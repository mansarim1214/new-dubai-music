{"ast":null,"code":"var _jsxFileName = \"D:\\\\My Work\\\\DubaiMusic\\\\dubai-music\\\\src\\\\components\\\\Dashboard\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthContext'; // Assuming you have an AuthContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  _s();\n  const {\n    user,\n    loading\n  } = useAuth(); // Add loading state if needed\n\n  if (loading) {\n    // While the auth status is loading, you can show a loader or nothing\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 16\n    }, this);\n  }\n  if (!user) {\n    // If the user is not authenticated, redirect to login page\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 16\n    }, this);\n  }\n  if (user.role !== 'admin') {\n    // If the user is authenticated but not an admin, redirect to unauthorized page\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/unauthorized\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 16\n    }, this);\n  }\n\n  // If the user is authenticated and is an admin, allow access to the route\n  return children;\n};\n_s(ProtectedRoute, \"EmJkapf7qiLC5Br5eCoEq4veZes=\", false, function () {\n  return [useAuth];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","useAuth","jsxDEV","_jsxDEV","ProtectedRoute","children","_s","user","loading","fileName","_jsxFileName","lineNumber","columnNumber","to","role","_c","$RefreshReg$"],"sources":["D:/My Work/DubaiMusic/dubai-music/src/components/Dashboard/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { useAuth } from '../../context/AuthContext'; // Assuming you have an AuthContext\r\n\r\nconst ProtectedRoute = ({ children }) => {\r\n    const { user, loading } = useAuth(); // Add loading state if needed\r\n\r\n    if (loading) {\r\n        // While the auth status is loading, you can show a loader or nothing\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    if (!user) {\r\n        // If the user is not authenticated, redirect to login page\r\n        return <Navigate to=\"/login\" />;\r\n    }\r\n\r\n    if (user.role !== 'admin') {\r\n        // If the user is authenticated but not an admin, redirect to unauthorized page\r\n        return <Navigate to=\"/unauthorized\" />;\r\n    }\r\n\r\n    // If the user is authenticated and is an admin, allow access to the route\r\n    return children;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,OAAO,QAAQ,2BAA2B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM;IAAEC,IAAI;IAAEC;EAAQ,CAAC,GAAGP,OAAO,CAAC,CAAC,CAAC,CAAC;;EAErC,IAAIO,OAAO,EAAE;IACT;IACA,oBAAOL,OAAA;MAAAE,QAAA,EAAK;IAAU;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAChC;EAEA,IAAI,CAACL,IAAI,EAAE;IACP;IACA,oBAAOJ,OAAA,CAACH,QAAQ;MAACa,EAAE,EAAC;IAAQ;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACnC;EAEA,IAAIL,IAAI,CAACO,IAAI,KAAK,OAAO,EAAE;IACvB;IACA,oBAAOX,OAAA,CAACH,QAAQ;MAACa,EAAE,EAAC;IAAe;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC1C;;EAEA;EACA,OAAOP,QAAQ;AACnB,CAAC;AAACC,EAAA,CApBIF,cAAc;EAAA,QACUH,OAAO;AAAA;AAAAc,EAAA,GAD/BX,cAAc;AAsBpB,eAAeA,cAAc;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}