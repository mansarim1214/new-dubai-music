{"ast":null,"code":"/*!\n  * PhotoSwipe 5.4.4 - https://photoswipe.com\n  * (c) 2024 Dmytro Semenov\n  */\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\nfunction createElement(className, tagName, appendToEl) {\n  const el = document.createElement(tagName);\n  if (className) {\n    el.className = className;\n  }\n  if (appendToEl) {\n    appendToEl.appendChild(el);\n  }\n  return el;\n}\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\n\nfunction equalizePoints(p1, p2) {\n  p1.x = p2.x;\n  p1.y = p2.y;\n  if (p2.id !== undefined) {\n    p1.id = p2.id;\n  }\n  return p1;\n}\n/**\r\n * @param {Point} p\r\n */\n\nfunction roundPoint(p) {\n  p.x = Math.round(p.x);\n  p.y = Math.round(p.y);\n}\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\n\nfunction getDistanceBetween(p1, p2) {\n  const x = Math.abs(p1.x - p2.x);\n  const y = Math.abs(p1.y - p2.y);\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\n\nfunction pointsEqual(p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n}\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\n\nfunction clamp(val, min, max) {\n  return Math.min(Math.max(val, min), max);\n}\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\n\nfunction toTransformString(x, y, scale) {\n  let propValue = \"translate3d(\".concat(x, \"px,\").concat(y || 0, \"px,0)\");\n  if (scale !== undefined) {\n    propValue += \" scale3d(\".concat(scale, \",\").concat(scale, \",1)\");\n  }\n  return propValue;\n}\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\n\nfunction setTransform(el, x, y, scale) {\n  el.style.transform = toTransformString(x, y, scale);\n}\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\n\nfunction setTransitionStyle(el, prop, duration, ease) {\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\n  el.style.transition = prop ? \"\".concat(prop, \" \").concat(duration, \"ms \").concat(ease || defaultCSSEasing) : 'none';\n}\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\n\nfunction setWidthHeight(el, w, h) {\n  el.style.width = typeof w === 'number' ? \"\".concat(w, \"px\") : w;\n  el.style.height = typeof h === 'number' ? \"\".concat(h, \"px\") : h;\n}\n/**\r\n * @param {HTMLElement} el\r\n */\n\nfunction removeTransitionStyle(el) {\n  setTransitionStyle(el);\n}\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\n\nfunction decodeImage(img) {\n  if ('decode' in img) {\n    return img.decode().catch(() => {});\n  }\n  if (img.complete) {\n    return Promise.resolve(img);\n  }\n  return new Promise((resolve, reject) => {\n    img.onload = () => resolve(img);\n    img.onerror = reject;\n  });\n}\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\n\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\n\nconst LOAD_STATE = {\n  IDLE: 'idle',\n  LOADING: 'loading',\n  LOADED: 'loaded',\n  ERROR: 'error'\n};\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\n\nfunction specialKeyUsed(e) {\n  return 'button' in e && e.button === 1 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\n}\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\n\nfunction getElementsFromOption(option, legacySelector) {\n  let parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;\n  /** @type {HTMLElement[]} */\n  let elements = [];\n  if (option instanceof Element) {\n    elements = [option];\n  } else if (option instanceof NodeList || Array.isArray(option)) {\n    elements = Array.from(option);\n  } else {\n    const selector = typeof option === 'string' ? option : legacySelector;\n    if (selector) {\n      elements = Array.from(parent.querySelectorAll(selector));\n    }\n  }\n  return elements;\n}\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\n\nfunction isSafari() {\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\n}\n\n// Detect passive event listener support\nlet supportsPassive = false;\n/* eslint-disable */\n\ntry {\n  /* @ts-ignore */\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n    get: () => {\n      supportsPassive = true;\n    }\n  }));\n} catch (e) {}\n/* eslint-enable */\n\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document | undefined | null} target\r\n * @prop {string} type\r\n * @prop {EventListenerOrEventListenerObject} listener\r\n * @prop {boolean} [passive]\r\n */\n\nclass DOMEvents {\n  constructor() {\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\n    this._pool = [];\n  }\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type Can be multiple, separated by space.\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\n\n  add(target, type, listener, passive) {\n    this._toggleListener(target, type, listener, passive);\n  }\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\n\n  remove(target, type, listener, passive) {\n    this._toggleListener(target, type, listener, passive, true);\n  }\n  /**\r\n   * Removes all bound events\r\n   */\n\n  removeAll() {\n    this._pool.forEach(poolItem => {\n      this._toggleListener(poolItem.target, poolItem.type, poolItem.listener, poolItem.passive, true, true);\n    });\n    this._pool = [];\n  }\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @private\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   * @param {boolean} [unbind] Whether the event should be added or removed\r\n   * @param {boolean} [skipPool] Whether events pool should be skipped\r\n   */\n\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\n    if (!target) {\n      return;\n    }\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\n    const types = type.split(' ');\n    types.forEach(eType => {\n      if (eType) {\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\n        // so developer doesn't need to do this manually\n        if (!skipPool) {\n          if (unbind) {\n            // Remove from the events pool\n            this._pool = this._pool.filter(poolItem => {\n              return poolItem.type !== eType || poolItem.listener !== listener || poolItem.target !== target;\n            });\n          } else {\n            // Add to the events pool\n            this._pool.push({\n              target,\n              type: eType,\n              listener,\n              passive\n            });\n          }\n        } // most PhotoSwipe events call preventDefault,\n        // and we do not need browser to scroll the page\n\n        const eventOptions = supportsPassive ? {\n          passive: passive || false\n        } : false;\n        target[methodName](eType, listener, eventOptions);\n      }\n    });\n  }\n}\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\nfunction getViewportSize(options, pswp) {\n  if (options.getViewportSizeFn) {\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\n    if (newViewportSize) {\n      return newViewportSize;\n    }\n  }\n  return {\n    x: document.documentElement.clientWidth,\n    // TODO: height on mobile is very incosistent due to toolbar\n    // find a way to improve this\n    //\n    // document.documentElement.clientHeight - doesn't seem to work well\n    y: window.innerHeight\n  };\n}\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\n\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\n  let paddingValue = 0;\n  if (options.paddingFn) {\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\n  } else if (options.padding) {\n    paddingValue = options.padding[prop];\n  } else {\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1); // @ts-expect-error\n\n    if (options[legacyPropName]) {\n      // @ts-expect-error\n      paddingValue = options[legacyPropName];\n    }\n  }\n  return Number(paddingValue) || 0;\n}\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\n\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\n  return {\n    x: viewportSize.x - parsePaddingOption('left', options, viewportSize, itemData, index) - parsePaddingOption('right', options, viewportSize, itemData, index),\n    y: viewportSize.y - parsePaddingOption('top', options, viewportSize, itemData, index) - parsePaddingOption('bottom', options, viewportSize, itemData, index)\n  };\n}\n\n/** @typedef {import('./slide.js').default} Slide */\n\n/** @typedef {Record<Axis, number>} Point */\n\n/** @typedef {'x' | 'y'} Axis */\n\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\n\nclass PanBounds {\n  /**\r\n   * @param {Slide} slide\r\n   */\n  constructor(slide) {\n    this.slide = slide;\n    this.currZoomLevel = 1;\n    this.center = /** @type {Point} */\n    {\n      x: 0,\n      y: 0\n    };\n    this.max = /** @type {Point} */\n    {\n      x: 0,\n      y: 0\n    };\n    this.min = /** @type {Point} */\n    {\n      x: 0,\n      y: 0\n    };\n  }\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\n\n  update(currZoomLevel) {\n    this.currZoomLevel = currZoomLevel;\n    if (!this.slide.width) {\n      this.reset();\n    } else {\n      this._updateAxis('x');\n      this._updateAxis('y');\n      this.slide.pswp.dispatch('calcBounds', {\n        slide: this.slide\n      });\n    }\n  }\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\n\n  _updateAxis(axis) {\n    const {\n      pswp\n    } = this.slide;\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\n    const paddingProp = axis === 'x' ? 'left' : 'top';\n    const padding = parsePaddingOption(paddingProp, pswp.options, pswp.viewportSize, this.slide.data, this.slide.index);\n    const panAreaSize = this.slide.panAreaSize[axis]; // Default position of element.\n    // By default, it is center of viewport:\n\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding; // maximum pan position\n\n    this.max[axis] = elSize > panAreaSize ? Math.round(panAreaSize - elSize) + padding : this.center[axis]; // minimum pan position\n\n    this.min[axis] = elSize > panAreaSize ? padding : this.center[axis];\n  } // _getZeroBounds\n\n  reset() {\n    this.center.x = 0;\n    this.center.y = 0;\n    this.max.x = 0;\n    this.max.y = 0;\n    this.min.x = 0;\n    this.min.y = 0;\n  }\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   * @returns {number}\r\n   */\n\n  correctPan(axis, panOffset) {\n    // checkPanBounds\n    return clamp(panOffset, this.max[axis], this.min[axis]);\n  }\n}\nconst MAX_IMAGE_WIDTH = 4000;\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\n\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\n\nclass ZoomLevel {\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\n  constructor(options, itemData, index, pswp) {\n    this.pswp = pswp;\n    this.options = options;\n    this.itemData = itemData;\n    this.index = index;\n    /** @type { Point | null } */\n\n    this.panAreaSize = null;\n    /** @type { Point | null } */\n\n    this.elementSize = null;\n    this.fit = 1;\n    this.fill = 1;\n    this.vFill = 1;\n    this.initial = 1;\n    this.secondary = 1;\n    this.max = 1;\n    this.min = 1;\n  }\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\n\n  update(maxWidth, maxHeight, panAreaSize) {\n    /** @type {Point} */\n    const elementSize = {\n      x: maxWidth,\n      y: maxHeight\n    };\n    this.elementSize = elementSize;\n    this.panAreaSize = panAreaSize;\n    const hRatio = panAreaSize.x / elementSize.x;\n    const vRatio = panAreaSize.y / elementSize.y;\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio); // zoom.vFill defines zoom level of the image\n    // when it has 100% of viewport vertical space (height)\n\n    this.vFill = Math.min(1, vRatio);\n    this.initial = this._getInitial();\n    this.secondary = this._getSecondary();\n    this.max = Math.max(this.initial, this.secondary, this._getMax());\n    this.min = Math.min(this.fit, this.initial, this.secondary);\n    if (this.pswp) {\n      this.pswp.dispatch('zoomLevelsUpdate', {\n        zoomLevels: this,\n        slideData: this.itemData\n      });\n    }\n  }\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\n\n  _parseZoomLevelOption(optionPrefix) {\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */\n    optionPrefix + 'ZoomLevel';\n    const optionValue = this.options[optionName];\n    if (!optionValue) {\n      return;\n    }\n    if (typeof optionValue === 'function') {\n      return optionValue(this);\n    }\n    if (optionValue === 'fill') {\n      return this.fill;\n    }\n    if (optionValue === 'fit') {\n      return this.fit;\n    }\n    return Number(optionValue);\n  }\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n  _getSecondary() {\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\n    if (currZoomLevel) {\n      return currZoomLevel;\n    } // 3x of \"fit\" state, but not larger than original\n\n    currZoomLevel = Math.min(1, this.fit * 3);\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\n    }\n    return currZoomLevel;\n  }\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n  _getInitial() {\n    return this._parseZoomLevelOption('initial') || this.fit;\n  }\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n  _getMax() {\n    // max zoom level is x4 from \"fit state\",\n    // used for zoom gesture and ctrl/trackpad zoom\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\n  }\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n/**\r\n * Renders and allows to control a single slide\r\n */\n\nclass Slide {\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(data, index, pswp) {\n    this.data = data;\n    this.index = index;\n    this.pswp = pswp;\n    this.isActive = index === pswp.currIndex;\n    this.currentResolution = 0;\n    /** @type {Point} */\n\n    this.panAreaSize = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.pan = {\n      x: 0,\n      y: 0\n    };\n    this.isFirstSlide = this.isActive && !pswp.opener.isOpen;\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\n    this.pswp.dispatch('gettingData', {\n      slide: this,\n      data: this.data,\n      index\n    });\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\n    this.container = createElement('pswp__zoom-wrap', 'div');\n    /** @type {HTMLElement | null} */\n\n    this.holderElement = null;\n    this.currZoomLevel = 1;\n    /** @type {number} */\n\n    this.width = this.content.width;\n    /** @type {number} */\n\n    this.height = this.content.height;\n    this.heavyAppended = false;\n    this.bounds = new PanBounds(this);\n    this.prevDisplayedWidth = -1;\n    this.prevDisplayedHeight = -1;\n    this.pswp.dispatch('slideInit', {\n      slide: this\n    });\n  }\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\n\n  setIsActive(isActive) {\n    if (isActive && !this.isActive) {\n      // slide just became active\n      this.activate();\n    } else if (!isActive && this.isActive) {\n      // slide just became non-active\n      this.deactivate();\n    }\n  }\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\n\n  append(holderElement) {\n    this.holderElement = holderElement;\n    this.container.style.transformOrigin = '0 0'; // Slide appended to DOM\n\n    if (!this.data) {\n      return;\n    }\n    this.calculateSize();\n    this.load();\n    this.updateContentSize();\n    this.appendHeavy();\n    this.holderElement.appendChild(this.container);\n    this.zoomAndPanToInitial();\n    this.pswp.dispatch('firstZoomPan', {\n      slide: this\n    });\n    this.applyCurrentZoomPan();\n    this.pswp.dispatch('afterSetContent', {\n      slide: this\n    });\n    if (this.isActive) {\n      this.activate();\n    }\n  }\n  load() {\n    this.content.load(false);\n    this.pswp.dispatch('slideLoad', {\n      slide: this\n    });\n  }\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\n\n  appendHeavy() {\n    const {\n      pswp\n    } = this;\n    const appendHeavyNearby = true; // todo\n    // Avoid appending heavy elements during animations\n\n    if (this.heavyAppended || !pswp.opener.isOpen || pswp.mainScroll.isShifted() || !this.isActive && !appendHeavyNearby) {\n      return;\n    }\n    if (this.pswp.dispatch('appendHeavy', {\n      slide: this\n    }).defaultPrevented) {\n      return;\n    }\n    this.heavyAppended = true;\n    this.content.append();\n    this.pswp.dispatch('appendHeavyContent', {\n      slide: this\n    });\n  }\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\n\n  activate() {\n    this.isActive = true;\n    this.appendHeavy();\n    this.content.activate();\n    this.pswp.dispatch('slideActivate', {\n      slide: this\n    });\n  }\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\n\n  deactivate() {\n    this.isActive = false;\n    this.content.deactivate();\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\n      // allow filtering\n      this.calculateSize();\n    } // reset zoom level\n\n    this.currentResolution = 0;\n    this.zoomAndPanToInitial();\n    this.applyCurrentZoomPan();\n    this.updateContentSize();\n    this.pswp.dispatch('slideDeactivate', {\n      slide: this\n    });\n  }\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\n\n  destroy() {\n    this.content.hasSlide = false;\n    this.content.remove();\n    this.container.remove();\n    this.pswp.dispatch('slideDestroy', {\n      slide: this\n    });\n  }\n  resize() {\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\n      // Keep initial zoom level if it was before the resize,\n      // as well as when this slide is not active\n      // Reset position and scale to original state\n      this.calculateSize();\n      this.currentResolution = 0;\n      this.zoomAndPanToInitial();\n      this.applyCurrentZoomPan();\n      this.updateContentSize();\n    } else {\n      // readjust pan position if it's beyond the bounds\n      this.calculateSize();\n      this.bounds.update(this.currZoomLevel);\n      this.panTo(this.pan.x, this.pan.y);\n    }\n  }\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean} [force] if size should be updated even if dimensions weren't changed\r\n   */\n\n  updateContentSize(force) {\n    // Use initial zoom level\n    // if resolution is not defined (user didn't zoom yet)\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\n    if (!scaleMultiplier) {\n      return;\n    }\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\n    if (!this.sizeChanged(width, height) && !force) {\n      return;\n    }\n    this.content.setDisplayedSize(width, height);\n  }\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\n\n  sizeChanged(width, height) {\n    if (width !== this.prevDisplayedWidth || height !== this.prevDisplayedHeight) {\n      this.prevDisplayedWidth = width;\n      this.prevDisplayedHeight = height;\n      return true;\n    }\n    return false;\n  }\n  /** @returns {HTMLImageElement | HTMLDivElement | null | undefined} */\n\n  getPlaceholderElement() {\n    var _this$content$placeho;\n    return (_this$content$placeho = this.content.placeholder) === null || _this$content$placeho === void 0 ? void 0 : _this$content$placeho.element;\n  }\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {Point} [centerPoint]\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean} [ignoreBounds] Minimum and maximum zoom levels will be ignored.\r\n   */\n\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\n    const {\n      pswp\n    } = this;\n    if (!this.isZoomable() || pswp.mainScroll.isShifted()) {\n      return;\n    }\n    pswp.dispatch('beforeZoomTo', {\n      destZoomLevel,\n      centerPoint,\n      transitionDuration\n    }); // stop all pan and zoom transitions\n\n    pswp.animations.stopAllPan(); // if (!centerPoint) {\n    //   centerPoint = pswp.getViewportCenterPoint();\n    // }\n\n    const prevZoomLevel = this.currZoomLevel;\n    if (!ignoreBounds) {\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\n    } // if (transitionDuration === undefined) {\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\n    // }\n\n    this.setZoomLevel(destZoomLevel);\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\n    roundPoint(this.pan);\n    const finishTransition = () => {\n      this._setResolution(destZoomLevel);\n      this.applyCurrentZoomPan();\n    };\n    if (!transitionDuration) {\n      finishTransition();\n    } else {\n      pswp.animations.startTransition({\n        isPan: true,\n        name: 'zoomTo',\n        target: this.container,\n        transform: this.getCurrentTransform(),\n        onComplete: finishTransition,\n        duration: transitionDuration,\n        easing: pswp.options.easing\n      });\n    }\n  }\n  /**\r\n   * @param {Point} [centerPoint]\r\n   */\n\n  toggleZoom(centerPoint) {\n    this.zoomTo(this.currZoomLevel === this.zoomLevels.initial ? this.zoomLevels.secondary : this.zoomLevels.initial, centerPoint, this.pswp.options.zoomAnimationDuration);\n  }\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\n\n  setZoomLevel(currZoomLevel) {\n    this.currZoomLevel = currZoomLevel;\n    this.bounds.update(this.currZoomLevel);\n  }\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {Point} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number} [prevZoomLevel] Zoom level before new zoom was applied.\r\n   * @returns {number}\r\n   */\n\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\n    if (totalPanDistance === 0) {\n      return this.bounds.center[axis];\n    }\n    if (!point) {\n      point = this.pswp.getViewportCenterPoint();\n    }\n    if (!prevZoomLevel) {\n      prevZoomLevel = this.zoomLevels.initial;\n    }\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\n    return this.bounds.correctPan(axis, (this.pan[axis] - point[axis]) * zoomFactor + point[axis]);\n  }\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\n\n  panTo(panX, panY) {\n    this.pan.x = this.bounds.correctPan('x', panX);\n    this.pan.y = this.bounds.correctPan('y', panY);\n    this.applyCurrentZoomPan();\n  }\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   * @returns {boolean}\r\n   */\n\n  isPannable() {\n    return Boolean(this.width) && this.currZoomLevel > this.zoomLevels.fit;\n  }\n  /**\r\n   * If the slide can be zoomed\r\n   * @returns {boolean}\r\n   */\n\n  isZoomable() {\n    return Boolean(this.width) && this.content.isZoomable();\n  }\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\n\n  applyCurrentZoomPan() {\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\n    if (this === this.pswp.currSlide) {\n      this.pswp.dispatch('zoomPanUpdate', {\n        slide: this\n      });\n    }\n  }\n  zoomAndPanToInitial() {\n    this.currZoomLevel = this.zoomLevels.initial; // pan according to the zoom level\n\n    this.bounds.update(this.currZoomLevel);\n    equalizePoints(this.pan, this.bounds.center);\n    this.pswp.dispatch('initialZoomPan', {\n      slide: this\n    });\n  }\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   * @private\r\n   */\n\n  _applyZoomTransform(x, y, zoom) {\n    zoom /= this.currentResolution || this.zoomLevels.initial;\n    setTransform(this.container, x, y, zoom);\n  }\n  calculateSize() {\n    const {\n      pswp\n    } = this;\n    equalizePoints(this.panAreaSize, getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index));\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\n    pswp.dispatch('calcSlideSize', {\n      slide: this\n    });\n  }\n  /** @returns {string} */\n\n  getCurrentTransform() {\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\n    return toTransformString(this.pan.x, this.pan.y, scale);\n  }\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in the highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\n\n  _setResolution(newResolution) {\n    if (newResolution === this.currentResolution) {\n      return;\n    }\n    this.currentResolution = newResolution;\n    this.updateContentSize();\n    this.pswp.dispatch('resolutionChanged');\n  }\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('./gestures.js').default} Gestures */\n\nconst PAN_END_FRICTION = 0.35;\nconst VERTICAL_DRAG_FRICTION = 0.6; // 1 corresponds to the third of viewport height\n\nconst MIN_RATIO_TO_CLOSE = 0.4; // Minimum speed required to navigate\n// to next or previous slide\n\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n * @returns {number}\r\n */\n\nfunction project(initialVelocity, decelerationRate) {\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\n}\n/**\r\n * Handles single pointer dragging\r\n */\n\nclass DragHandler {\n  /**\r\n   * @param {Gestures} gestures\r\n   */\n  constructor(gestures) {\n    this.gestures = gestures;\n    this.pswp = gestures.pswp;\n    /** @type {Point} */\n\n    this.startPan = {\n      x: 0,\n      y: 0\n    };\n  }\n  start() {\n    if (this.pswp.currSlide) {\n      equalizePoints(this.startPan, this.pswp.currSlide.pan);\n    }\n    this.pswp.animations.stopAll();\n  }\n  change() {\n    const {\n      p1,\n      prevP1,\n      dragAxis\n    } = this.gestures;\n    const {\n      currSlide\n    } = this.pswp;\n    if (dragAxis === 'y' && this.pswp.options.closeOnVerticalDrag && currSlide && currSlide.currZoomLevel <= currSlide.zoomLevels.fit && !this.gestures.isMultitouch) {\n      // Handle vertical drag to close\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\n      if (!this.pswp.dispatch('verticalDrag', {\n        panY\n      }).defaultPrevented) {\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\n        this.pswp.applyBgOpacity(bgOpacity);\n        currSlide.applyCurrentZoomPan();\n      }\n    } else {\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\n      if (!mainScrollChanged) {\n        this._panOrMoveMainScroll('y');\n        if (currSlide) {\n          roundPoint(currSlide.pan);\n          currSlide.applyCurrentZoomPan();\n        }\n      }\n    }\n  }\n  end() {\n    const {\n      velocity\n    } = this.gestures;\n    const {\n      mainScroll,\n      currSlide\n    } = this.pswp;\n    let indexDiff = 0;\n    this.pswp.animations.stopAll(); // Handle main scroll if it's shifted\n\n    if (mainScroll.isShifted()) {\n      // Position of the main scroll relative to the viewport\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX(); // Ratio between 0 and 1:\n      // 0 - slide is not visible at all,\n      // 0.5 - half of the slide is visible\n      // 1 - slide is fully visible\n\n      const currentSlideVisibilityRatio = mainScrollShiftDiff / this.pswp.viewportSize.x; // Go next slide.\n      //\n      // - if velocity and its direction is matched,\n      //   and we see at least tiny part of the next slide\n      //\n      // - or if we see less than 50% of the current slide\n      //   and velocity is close to 0\n      //\n\n      if (velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0 || velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5) {\n        // Go to next slide\n        indexDiff = 1;\n        velocity.x = Math.min(velocity.x, 0);\n      } else if (velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0 || velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5) {\n        // Go to prev slide\n        indexDiff = -1;\n        velocity.x = Math.max(velocity.x, 0);\n      }\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\n    } // Restore zoom level\n\n    if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.max || this.gestures.isMultitouch) {\n      this.gestures.zoomLevels.correctZoomPan(true);\n    } else {\n      // we run two animations instead of one,\n      // as each axis has own pan boundaries and thus different spring function\n      // (correctZoomPan does not have this functionality,\n      //  it animates all properties with single timing function)\n      this._finishPanGestureForAxis('x');\n      this._finishPanGestureForAxis('y');\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\n\n  _finishPanGestureForAxis(axis) {\n    const {\n      velocity\n    } = this.gestures;\n    const {\n      currSlide\n    } = this.pswp;\n    if (!currSlide) {\n      return;\n    }\n    const {\n      pan,\n      bounds\n    } = currSlide;\n    const panPos = pan[axis];\n    const restoreBgOpacity = this.pswp.bgOpacity < 1 && axis === 'y'; // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\n    // Increasing this number will reduce travel distance\n\n    const decelerationRate = 0.995; // 0.99\n    // Pan position if there is no bounds\n\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\n    if (restoreBgOpacity) {\n      const vDragRatio = this._getVerticalDragRatio(panPos);\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition); // If we are above and moving upwards,\n      // or if we are below and moving downwards\n\n      if (vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE || vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE) {\n        this.pswp.close();\n        return;\n      }\n    } // Pan position with corrected bounds\n\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition); // Exit if pan position should not be changed\n    // or if speed it too low\n\n    if (panPos === correctedPanPosition) {\n      return;\n    } // Overshoot if the final position is out of pan bounds\n\n    const dampingRatio = correctedPanPosition === projectedPosition ? 1 : 0.82;\n    const initialBgOpacity = this.pswp.bgOpacity;\n    const totalPanDist = correctedPanPosition - panPos;\n    this.pswp.animations.startSpring({\n      name: 'panGesture' + axis,\n      isPan: true,\n      start: panPos,\n      end: correctedPanPosition,\n      velocity: velocity[axis],\n      dampingRatio,\n      onUpdate: pos => {\n        // Animate opacity of background relative to Y pan position of an image\n        if (restoreBgOpacity && this.pswp.bgOpacity < 1) {\n          // 0 - start of animation, 1 - end of animation\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist; // We clamp opacity to keep it between 0 and 1.\n          // As progress ratio can be larger than 1 due to overshoot,\n          // and we do not want to bounce opacity.\n\n          this.pswp.applyBgOpacity(clamp(initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio, 0, 1));\n        }\n        pan[axis] = Math.floor(pos);\n        currSlide.applyCurrentZoomPan();\n      }\n    });\n  }\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @returns {boolean}\r\n   */\n\n  _panOrMoveMainScroll(axis) {\n    const {\n      p1,\n      dragAxis,\n      prevP1,\n      isMultitouch\n    } = this.gestures;\n    const {\n      currSlide,\n      mainScroll\n    } = this.pswp;\n    const delta = p1[axis] - prevP1[axis];\n    const newMainScrollX = mainScroll.x + delta;\n    if (!delta || !currSlide) {\n      return false;\n    } // Always move main scroll if image can not be panned\n\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\n      mainScroll.moveTo(newMainScrollX, true);\n      return true; // changed main scroll\n    }\n    const {\n      bounds\n    } = currSlide;\n    const newPan = currSlide.pan[axis] + delta;\n    if (this.pswp.options.allowPanToNext && dragAxis === 'x' && axis === 'x' && !isMultitouch) {\n      const currSlideMainScrollX = mainScroll.getCurrSlideX(); // Position of the main scroll relative to the viewport\n\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\n      const isLeftToRight = delta > 0;\n      const isRightToLeft = !isLeftToRight;\n      if (newPan > bounds.min[axis] && isLeftToRight) {\n        // Panning from left to right, beyond the left edge\n        // Wether the image was at minimum pan position (or less)\n        // when this drag gesture started.\n        // Minimum pan position refers to the left edge of the image.\n        const wasAtMinPanPosition = bounds.min[axis] <= this.startPan[axis];\n        if (wasAtMinPanPosition) {\n          mainScroll.moveTo(newMainScrollX, true);\n          return true;\n        } else {\n          this._setPanWithFriction(axis, newPan); //currSlide.pan[axis] = newPan;\n        }\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\n        // Paning from right to left, beyond the right edge\n        // Maximum pan position refers to the right edge of the image.\n        const wasAtMaxPanPosition = this.startPan[axis] <= bounds.max[axis];\n        if (wasAtMaxPanPosition) {\n          mainScroll.moveTo(newMainScrollX, true);\n          return true;\n        } else {\n          this._setPanWithFriction(axis, newPan); //currSlide.pan[axis] = newPan;\n        }\n      } else {\n        // If main scroll is shifted\n        if (mainScrollShiftDiff !== 0) {\n          // If main scroll is shifted right\n          if (mainScrollShiftDiff > 0\n          /*&& isRightToLeft*/) {\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\n            return true;\n          } else if (mainScrollShiftDiff < 0\n          /*&& isLeftToRight*/) {\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\n            return true;\n          }\n        } else {\n          // We are within pan bounds, so just pan\n          this._setPanWithFriction(axis, newPan);\n        }\n      }\n    } else {\n      if (axis === 'y') {\n        // Do not pan vertically if main scroll is shifted o\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\n          this._setPanWithFriction(axis, newPan);\n        }\n      } else {\n        this._setPanWithFriction(axis, newPan);\n      }\n    }\n    return false;\n  } // If we move above - the ratio is negative\n  // If we move below the ratio is positive\n\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   * @returns {number}\r\n   */\n\n  _getVerticalDragRatio(panY) {\n    var _this$pswp$currSlide$, _this$pswp$currSlide;\n    return (panY - ((_this$pswp$currSlide$ = (_this$pswp$currSlide = this.pswp.currSlide) === null || _this$pswp$currSlide === void 0 ? void 0 : _this$pswp$currSlide.bounds.center.y) !== null && _this$pswp$currSlide$ !== void 0 ? _this$pswp$currSlide$ : 0)) / (this.pswp.viewportSize.y / 3);\n  }\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number} [customFriction] (0.1 - 1)\r\n   */\n\n  _setPanWithFriction(axis, potentialPan, customFriction) {\n    const {\n      currSlide\n    } = this.pswp;\n    if (!currSlide) {\n      return;\n    }\n    const {\n      pan,\n      bounds\n    } = currSlide;\n    const correctedPan = bounds.correctPan(axis, potentialPan); // If we are out of pan bounds\n\n    if (correctedPan !== potentialPan || customFriction) {\n      const delta = Math.round(potentialPan - pan[axis]);\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\n    } else {\n      pan[axis] = potentialPan;\n    }\n  }\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('./gestures.js').default} Gestures */\n\nconst UPPER_ZOOM_FRICTION = 0.05;\nconst LOWER_ZOOM_FRICTION = 0.15;\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\n\nfunction getZoomPointsCenter(p, p1, p2) {\n  p.x = (p1.x + p2.x) / 2;\n  p.y = (p1.y + p2.y) / 2;\n  return p;\n}\nclass ZoomHandler {\n  /**\r\n   * @param {Gestures} gestures\r\n   */\n  constructor(gestures) {\n    this.gestures = gestures;\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\n\n    this._startPan = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\n\n    this._startZoomPoint = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\n\n    this._zoomPoint = {\n      x: 0,\n      y: 0\n    };\n    /** @private */\n\n    this._wasOverFitZoomLevel = false;\n    /** @private */\n\n    this._startZoomLevel = 1;\n  }\n  start() {\n    const {\n      currSlide\n    } = this.gestures.pswp;\n    if (currSlide) {\n      this._startZoomLevel = currSlide.currZoomLevel;\n      equalizePoints(this._startPan, currSlide.pan);\n    }\n    this.gestures.pswp.animations.stopAllPan();\n    this._wasOverFitZoomLevel = false;\n  }\n  change() {\n    const {\n      p1,\n      startP1,\n      p2,\n      startP2,\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n    if (!currSlide) {\n      return;\n    }\n    const minZoomLevel = currSlide.zoomLevels.min;\n    const maxZoomLevel = currSlide.zoomLevels.max;\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\n      return;\n    }\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\n    let currZoomLevel = 1 / getDistanceBetween(startP1, startP2) * getDistanceBetween(p1, p2) * this._startZoomLevel; // slightly over the zoom.fit\n\n    if (currZoomLevel > currSlide.zoomLevels.initial + currSlide.zoomLevels.initial / 15) {\n      this._wasOverFitZoomLevel = true;\n    }\n    if (currZoomLevel < minZoomLevel) {\n      if (pswp.options.pinchToClose && !this._wasOverFitZoomLevel && this._startZoomLevel <= currSlide.zoomLevels.initial) {\n        // fade out background if zooming out\n        const bgOpacity = 1 - (minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2);\n        if (!pswp.dispatch('pinchClose', {\n          bgOpacity\n        }).defaultPrevented) {\n          pswp.applyBgOpacity(bgOpacity);\n        }\n      } else {\n        // Apply the friction if zoom level is below the min\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\n      }\n    } else if (currZoomLevel > maxZoomLevel) {\n      // Apply the friction if zoom level is above the max\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\n    }\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\n    currSlide.setZoomLevel(currZoomLevel);\n    currSlide.applyCurrentZoomPan();\n  }\n  end() {\n    const {\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n    if ((!currSlide || currSlide.currZoomLevel < currSlide.zoomLevels.initial) && !this._wasOverFitZoomLevel && pswp.options.pinchToClose) {\n      pswp.close();\n    } else {\n      this.correctZoomPan();\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   * @returns {number}\r\n   */\n\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\n    return this._zoomPoint[axis] - (this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor;\n  }\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean} [ignoreGesture]\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\n\n  correctZoomPan(ignoreGesture) {\n    const {\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n    if (!(currSlide !== null && currSlide !== void 0 && currSlide.isZoomable())) {\n      return;\n    }\n    if (this._zoomPoint.x === 0) {\n      ignoreGesture = true;\n    }\n    const prevZoomLevel = currSlide.currZoomLevel;\n    /** @type {number} */\n\n    let destinationZoomLevel;\n    let currZoomLevelNeedsChange = true;\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\n      destinationZoomLevel = currSlide.zoomLevels.initial; // zoom to min\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\n      destinationZoomLevel = currSlide.zoomLevels.max; // zoom to max\n    } else {\n      currZoomLevelNeedsChange = false;\n      destinationZoomLevel = prevZoomLevel;\n    }\n    const initialBgOpacity = pswp.bgOpacity;\n    const restoreBgOpacity = pswp.bgOpacity < 1;\n    const initialPan = equalizePoints({\n      x: 0,\n      y: 0\n    }, currSlide.pan);\n    let destinationPan = equalizePoints({\n      x: 0,\n      y: 0\n    }, initialPan);\n    if (ignoreGesture) {\n      this._zoomPoint.x = 0;\n      this._zoomPoint.y = 0;\n      this._startZoomPoint.x = 0;\n      this._startZoomPoint.y = 0;\n      this._startZoomLevel = prevZoomLevel;\n      equalizePoints(this._startPan, initialPan);\n    }\n    if (currZoomLevelNeedsChange) {\n      destinationPan = {\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\n      };\n    } // set zoom level, so pan bounds are updated according to it\n\n    currSlide.setZoomLevel(destinationZoomLevel);\n    destinationPan = {\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\n    }; // return zoom level and its bounds to initial\n\n    currSlide.setZoomLevel(prevZoomLevel);\n    const panNeedsChange = !pointsEqual(destinationPan, initialPan);\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\n      // update resolution after gesture\n      currSlide._setResolution(destinationZoomLevel);\n      currSlide.applyCurrentZoomPan(); // nothing to animate\n\n      return;\n    }\n    pswp.animations.stopAllPan();\n    pswp.animations.startSpring({\n      isPan: true,\n      start: 0,\n      end: 1000,\n      velocity: 0,\n      dampingRatio: 1,\n      naturalFrequency: 40,\n      onUpdate: now => {\n        now /= 1000; // 0 - start, 1 - end\n\n        if (panNeedsChange || currZoomLevelNeedsChange) {\n          if (panNeedsChange) {\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\n          }\n          if (currZoomLevelNeedsChange) {\n            const newZoomLevel = prevZoomLevel + (destinationZoomLevel - prevZoomLevel) * now;\n            currSlide.setZoomLevel(newZoomLevel);\n          }\n          currSlide.applyCurrentZoomPan();\n        } // Restore background opacity\n\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\n          // We clamp opacity to keep it between 0 and 1.\n          // As progress ratio can be larger than 1 due to overshoot,\n          // and we do not want to bounce opacity.\n          pswp.applyBgOpacity(clamp(initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1));\n        }\n      },\n      onComplete: () => {\n        // update resolution after transition ends\n        currSlide._setResolution(destinationZoomLevel);\n        currSlide.applyCurrentZoomPan();\n      }\n    });\n  }\n}\n\n/**\r\n * @template {string} T\r\n * @template {string} P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\n\n/** @typedef {import('./gestures.js').default} Gestures */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\n\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n * @returns {boolean}\r\n */\nfunction didTapOnMainContent(event) {\n  return !! /** @type {HTMLElement} */\n  event.target.closest('.pswp__container');\n}\n/**\r\n * Tap, double-tap handler.\r\n */\n\nclass TapHandler {\n  /**\r\n   * @param {Gestures} gestures\r\n   */\n  constructor(gestures) {\n    this.gestures = gestures;\n  }\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n  click(point, originalEvent) {\n    const targetClassList = /** @type {HTMLElement} */\n    originalEvent.target.classList;\n    const isImageClick = targetClassList.contains('pswp__img');\n    const isBackgroundClick = targetClassList.contains('pswp__item') || targetClassList.contains('pswp__zoom-wrap');\n    if (isImageClick) {\n      this._doClickOrTapAction('imageClick', point, originalEvent);\n    } else if (isBackgroundClick) {\n      this._doClickOrTapAction('bgClick', point, originalEvent);\n    }\n  }\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n  tap(point, originalEvent) {\n    if (didTapOnMainContent(originalEvent)) {\n      this._doClickOrTapAction('tap', point, originalEvent);\n    }\n  }\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n  doubleTap(point, originalEvent) {\n    if (didTapOnMainContent(originalEvent)) {\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n  _doClickOrTapAction(actionName, point, originalEvent) {\n    var _this$gestures$pswp$e;\n    const {\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */\n    actionName + 'Action';\n    const optionValue = pswp.options[actionFullName];\n    if (pswp.dispatch(actionFullName, {\n      point,\n      originalEvent\n    }).defaultPrevented) {\n      return;\n    }\n    if (typeof optionValue === 'function') {\n      optionValue.call(pswp, point, originalEvent);\n      return;\n    }\n    switch (optionValue) {\n      case 'close':\n      case 'next':\n        pswp[optionValue]();\n        break;\n      case 'zoom':\n        currSlide === null || currSlide === void 0 || currSlide.toggleZoom(point);\n        break;\n      case 'zoom-or-close':\n        // by default click zooms current image,\n        // if it can not be zoomed - gallery will be closed\n        if (currSlide !== null && currSlide !== void 0 && currSlide.isZoomable() && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\n          currSlide.toggleZoom(point);\n        } else if (pswp.options.clickToCloseNonZoomable) {\n          pswp.close();\n        }\n        break;\n      case 'toggle-controls':\n        (_this$gestures$pswp$e = this.gestures.pswp.element) === null || _this$gestures$pswp$e === void 0 || _this$gestures$pswp$e.classList.toggle('pswp--ui-visible'); // if (_controlsVisible) {\n        //   _ui.hideControls();\n        // } else {\n        //   _ui.showControls();\n        // }\n\n        break;\n    }\n  }\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n// How far should user should drag\n// until we can determine that the gesture is swipe and its direction\n\nconst AXIS_SWIPE_HYSTERISIS = 10; //const PAN_END_FRICTION = 0.35;\n\nconst DOUBLE_TAP_DELAY = 300; // ms\n\nconst MIN_TAP_DISTANCE = 25; // px\n\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\n\nclass Gestures {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    /** @type {'x' | 'y' | null} */\n\n    this.dragAxis = null; // point objects are defined once and reused\n    // PhotoSwipe keeps track only of two pointers, others are ignored\n\n    /** @type {Point} */\n\n    this.p1 = {\n      x: 0,\n      y: 0\n    }; // the first pressed pointer\n\n    /** @type {Point} */\n\n    this.p2 = {\n      x: 0,\n      y: 0\n    }; // the second pressed pointer\n\n    /** @type {Point} */\n\n    this.prevP1 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.prevP2 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.startP1 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.startP2 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.velocity = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point}\r\n     * @private\r\n     */\n\n    this._lastStartP1 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point}\r\n     * @private\r\n     */\n\n    this._intervalP1 = {\n      x: 0,\n      y: 0\n    };\n    /** @private */\n\n    this._numActivePoints = 0;\n    /** @type {Point[]}\r\n     * @private\r\n     */\n\n    this._ongoingPointers = [];\n    /** @private */\n\n    this._touchEventEnabled = 'ontouchstart' in window;\n    /** @private */\n\n    this._pointerEventEnabled = !!window.PointerEvent;\n    this.supportsTouch = this._touchEventEnabled || this._pointerEventEnabled && navigator.maxTouchPoints > 1;\n    /** @private */\n\n    this._numActivePoints = 0;\n    /** @private */\n\n    this._intervalTime = 0;\n    /** @private */\n\n    this._velocityCalculated = false;\n    this.isMultitouch = false;\n    this.isDragging = false;\n    this.isZooming = false;\n    /** @type {number | null} */\n\n    this.raf = null;\n    /** @type {NodeJS.Timeout | null}\r\n     * @private\r\n     */\n\n    this._tapTimer = null;\n    if (!this.supportsTouch) {\n      // disable pan to next slide for non-touch devices\n      pswp.options.allowPanToNext = false;\n    }\n    this.drag = new DragHandler(this);\n    this.zoomLevels = new ZoomHandler(this);\n    this.tapHandler = new TapHandler(this);\n    pswp.on('bindEvents', () => {\n      pswp.events.add(pswp.scrollWrap, 'click', /** @type EventListener */\n      this._onClick.bind(this));\n      if (this._pointerEventEnabled) {\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\n      } else if (this._touchEventEnabled) {\n        this._bindEvents('touch', 'start', 'end', 'cancel'); // In previous versions we also bound mouse event here,\n        // in case device supports both touch and mouse events,\n        // but newer versions of browsers now support PointerEvent.\n        // on iOS10 if you bind touchmove/end after touchstart,\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\n        // preventDefault will have no effect on touchmove and touchend.\n        // Unless you bind it previously.\n\n        if (pswp.scrollWrap) {\n          pswp.scrollWrap.ontouchmove = () => {};\n          pswp.scrollWrap.ontouchend = () => {};\n        }\n      } else {\n        this._bindEvents('mouse', 'down', 'up');\n      }\n    });\n  }\n  /**\r\n   * @private\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\n\n  _bindEvents(pref, down, up, cancel) {\n    const {\n      pswp\n    } = this;\n    const {\n      events\n    } = pswp;\n    const cancelEvent = cancel ? pref + cancel : '';\n    events.add(pswp.scrollWrap, pref + down, /** @type EventListener */\n    this.onPointerDown.bind(this));\n    events.add(window, pref + 'move', /** @type EventListener */\n    this.onPointerMove.bind(this));\n    events.add(window, pref + up, /** @type EventListener */\n    this.onPointerUp.bind(this));\n    if (cancelEvent) {\n      events.add(pswp.scrollWrap, cancelEvent, /** @type EventListener */\n      this.onPointerUp.bind(this));\n    }\n  }\n  /**\r\n   * @param {PointerEvent} e\r\n   */\n\n  onPointerDown(e) {\n    // We do not call preventDefault for touch events\n    // to allow browser to show native dialog on longpress\n    // (the one that allows to save image or open it in new tab).\n    //\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\n    const isMousePointer = e.type === 'mousedown' || e.pointerType === 'mouse'; // Allow dragging only via left mouse button.\n    // http://www.quirksmode.org/js/events_properties.html\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\n\n    if (isMousePointer && e.button > 0) {\n      return;\n    }\n    const {\n      pswp\n    } = this; // if PhotoSwipe is opening or closing\n\n    if (!pswp.opener.isOpen) {\n      e.preventDefault();\n      return;\n    }\n    if (pswp.dispatch('pointerDown', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n    if (isMousePointer) {\n      pswp.mouseDetected(); // preventDefault mouse event to prevent\n      // browser image drag feature\n\n      this._preventPointerEventBehaviour(e, 'down');\n    }\n    pswp.animations.stopAll();\n    this._updatePoints(e, 'down');\n    if (this._numActivePoints === 1) {\n      this.dragAxis = null; // we need to store initial point to determine the main axis,\n      // drag is activated only after the axis is determined\n\n      equalizePoints(this.startP1, this.p1);\n    }\n    if (this._numActivePoints > 1) {\n      // Tap or double tap should not trigger if more than one pointer\n      this._clearTapTimer();\n      this.isMultitouch = true;\n    } else {\n      this.isMultitouch = false;\n    }\n  }\n  /**\r\n   * @param {PointerEvent} e\r\n   */\n\n  onPointerMove(e) {\n    this._preventPointerEventBehaviour(e, 'move');\n    if (!this._numActivePoints) {\n      return;\n    }\n    this._updatePoints(e, 'move');\n    if (this.pswp.dispatch('pointerMove', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n    if (this._numActivePoints === 1 && !this.isDragging) {\n      if (!this.dragAxis) {\n        this._calculateDragDirection();\n      } // Drag axis was detected, emit drag.start\n\n      if (this.dragAxis && !this.isDragging) {\n        if (this.isZooming) {\n          this.isZooming = false;\n          this.zoomLevels.end();\n        }\n        this.isDragging = true;\n        this._clearTapTimer(); // Tap can not trigger after drag\n        // Adjust starting point\n\n        this._updateStartPoints();\n        this._intervalTime = Date.now(); //this._startTime = this._intervalTime;\n\n        this._velocityCalculated = false;\n        equalizePoints(this._intervalP1, this.p1);\n        this.velocity.x = 0;\n        this.velocity.y = 0;\n        this.drag.start();\n        this._rafStopLoop();\n        this._rafRenderLoop();\n      }\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\n      this._finishDrag();\n      this.isZooming = true; // Adjust starting points\n\n      this._updateStartPoints();\n      this.zoomLevels.start();\n      this._rafStopLoop();\n      this._rafRenderLoop();\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n  _finishDrag() {\n    if (this.isDragging) {\n      this.isDragging = false; // Try to calculate velocity,\n      // if it wasn't calculated yet in drag.change\n\n      if (!this._velocityCalculated) {\n        this._updateVelocity(true);\n      }\n      this.drag.end();\n      this.dragAxis = null;\n    }\n  }\n  /**\r\n   * @param {PointerEvent} e\r\n   */\n\n  onPointerUp(e) {\n    if (!this._numActivePoints) {\n      return;\n    }\n    this._updatePoints(e, 'up');\n    if (this.pswp.dispatch('pointerUp', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n    if (this._numActivePoints === 0) {\n      this._rafStopLoop();\n      if (this.isDragging) {\n        this._finishDrag();\n      } else if (!this.isZooming && !this.isMultitouch) {\n        //this.zoomLevels.correctZoomPan();\n        this._finishTap(e);\n      }\n    }\n    if (this._numActivePoints < 2 && this.isZooming) {\n      this.isZooming = false;\n      this.zoomLevels.end();\n      if (this._numActivePoints === 1) {\n        // Since we have 1 point left, we need to reinitiate drag\n        this.dragAxis = null;\n        this._updateStartPoints();\n      }\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n  _rafRenderLoop() {\n    if (this.isDragging || this.isZooming) {\n      this._updateVelocity();\n      if (this.isDragging) {\n        // make sure that pointer moved since the last update\n        if (!pointsEqual(this.p1, this.prevP1)) {\n          this.drag.change();\n        }\n      } else /* if (this.isZooming) */\n        {\n          if (!pointsEqual(this.p1, this.prevP1) || !pointsEqual(this.p2, this.prevP2)) {\n            this.zoomLevels.change();\n          }\n        }\n      this._updatePrevPoints();\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\n    }\n  }\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @private\r\n   * @param {boolean} [force]\r\n   */\n\n  _updateVelocity(force) {\n    const time = Date.now();\n    const duration = time - this._intervalTime;\n    if (duration < 50 && !force) {\n      return;\n    }\n    this.velocity.x = this._getVelocity('x', duration);\n    this.velocity.y = this._getVelocity('y', duration);\n    this._intervalTime = time;\n    equalizePoints(this._intervalP1, this.p1);\n    this._velocityCalculated = true;\n  }\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\n\n  _finishTap(e) {\n    const {\n      mainScroll\n    } = this.pswp; // Do not trigger tap events if main scroll is shifted\n\n    if (mainScroll.isShifted()) {\n      // restore main scroll position\n      // (usually happens if stopped in the middle of animation)\n      mainScroll.moveIndexBy(0, true);\n      return;\n    } // Do not trigger tap for touchcancel or pointercancel\n\n    if (e.type.indexOf('cancel') > 0) {\n      return;\n    } // Trigger click instead of tap for mouse events\n\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\n      this.tapHandler.click(this.startP1, e);\n      return;\n    } // Disable delay if there is no doubleTapAction\n\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0; // If tapTimer is defined - we tapped recently,\n    // check if the current tap is close to the previous one,\n    // if yes - trigger double tap\n\n    if (this._tapTimer) {\n      this._clearTapTimer(); // Check if two taps were more or less on the same place\n\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\n        this.tapHandler.doubleTap(this.startP1, e);\n      }\n    } else {\n      equalizePoints(this._lastStartP1, this.startP1);\n      this._tapTimer = setTimeout(() => {\n        this.tapHandler.tap(this.startP1, e);\n        this._clearTapTimer();\n      }, tapDelay);\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n  _clearTapTimer() {\n    if (this._tapTimer) {\n      clearTimeout(this._tapTimer);\n      this._tapTimer = null;\n    }\n  }\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   * @returns {number}\r\n   */\n\n  _getVelocity(axis, duration) {\n    // displacement is like distance, but can be negative.\n    const displacement = this.p1[axis] - this._intervalP1[axis];\n    if (Math.abs(displacement) > 1 && duration > 5) {\n      return displacement / duration;\n    }\n    return 0;\n  }\n  /**\r\n   * @private\r\n   */\n\n  _rafStopLoop() {\n    if (this.raf) {\n      cancelAnimationFrame(this.raf);\n      this.raf = null;\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\n\n  _preventPointerEventBehaviour(e, pointerType) {\n    const preventPointerEvent = this.pswp.applyFilters('preventPointerEvent', true, e, pointerType);\n    if (preventPointerEvent) {\n      e.preventDefault();\n    }\n  }\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\n\n  _updatePoints(e, pointerType) {\n    if (this._pointerEventEnabled) {\n      const pointerEvent = /** @type {PointerEvent} */\n      e; // Try to find the current pointer in ongoing pointers by its ID\n\n      const pointerIndex = this._ongoingPointers.findIndex(ongoingPointer => {\n        return ongoingPointer.id === pointerEvent.pointerId;\n      });\n      if (pointerType === 'up' && pointerIndex > -1) {\n        // release the pointer - remove it from ongoing\n        this._ongoingPointers.splice(pointerIndex, 1);\n      } else if (pointerType === 'down' && pointerIndex === -1) {\n        // add new pointer\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {\n          x: 0,\n          y: 0\n        }));\n      } else if (pointerIndex > -1) {\n        // update existing pointer\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\n      }\n      this._numActivePoints = this._ongoingPointers.length; // update points that PhotoSwipe uses\n      // to calculate position and scale\n\n      if (this._numActivePoints > 0) {\n        equalizePoints(this.p1, this._ongoingPointers[0]);\n      }\n      if (this._numActivePoints > 1) {\n        equalizePoints(this.p2, this._ongoingPointers[1]);\n      }\n    } else {\n      const touchEvent = /** @type {TouchEvent} */\n      e;\n      this._numActivePoints = 0;\n      if (touchEvent.type.indexOf('touch') > -1) {\n        // Touch Event\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\n          this._numActivePoints++;\n          if (touchEvent.touches.length > 1) {\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\n            this._numActivePoints++;\n          }\n        }\n      } else {\n        // Mouse Event\n        this._convertEventPosToPoint( /** @type {PointerEvent} */\n        e, this.p1);\n        if (pointerType === 'up') {\n          // clear all points on mouseup\n          this._numActivePoints = 0;\n        } else {\n          this._numActivePoints++;\n        }\n      }\n    }\n  }\n  /** update points that were used during previous rAF tick\r\n   * @private\r\n   */\n\n  _updatePrevPoints() {\n    equalizePoints(this.prevP1, this.p1);\n    equalizePoints(this.prevP2, this.p2);\n  }\n  /** update points at the start of gesture\r\n   * @private\r\n   */\n\n  _updateStartPoints() {\n    equalizePoints(this.startP1, this.p1);\n    equalizePoints(this.startP2, this.p2);\n    this._updatePrevPoints();\n  }\n  /** @private */\n\n  _calculateDragDirection() {\n    if (this.pswp.mainScroll.isShifted()) {\n      // if main scroll position is shifted – direction is always horizontal\n      this.dragAxis = 'x';\n    } else {\n      // calculate delta of the last touchmove tick\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\n      if (diff !== 0) {\n        // check if pointer was shifted horizontally or vertically\n        const axisToCheck = diff > 0 ? 'x' : 'y';\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\n          this.dragAxis = axisToCheck;\n        }\n      }\n    }\n  }\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   * @returns {Point}\r\n   */\n\n  _convertEventPosToPoint(e, p) {\n    p.x = e.pageX - this.pswp.offset.x;\n    p.y = e.pageY - this.pswp.offset.y;\n    if ('pointerId' in e) {\n      p.id = e.pointerId;\n    } else if (e.identifier !== undefined) {\n      p.id = e.identifier;\n    }\n    return p;\n  }\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\n\n  _onClick(e) {\n    // Do not allow click event to pass through after drag\n    if (this.pswp.mainScroll.isShifted()) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('./slide/slide.js').default} Slide */\n\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\n\nconst MAIN_SCROLL_END_FRICTION = 0.35; // const MIN_SWIPE_TRANSITION_DURATION = 250;\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\n\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\n\nclass MainScroll {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.x = 0;\n    this.slideWidth = 0;\n    /** @private */\n\n    this._currPositionIndex = 0;\n    /** @private */\n\n    this._prevPositionIndex = 0;\n    /** @private */\n\n    this._containerShiftIndex = -1;\n    /** @type {ItemHolder[]} */\n\n    this.itemHolders = [];\n  }\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean} [resizeSlides] Whether slides content should resized\r\n   */\n\n  resize(resizeSlides) {\n    const {\n      pswp\n    } = this;\n    const newSlideWidth = Math.round(pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing); // Mobile browsers might trigger a resize event during a gesture.\n    // (due to toolbar appearing or hiding).\n    // Avoid re-adjusting main scroll position if width wasn't changed\n\n    const slideWidthChanged = newSlideWidth !== this.slideWidth;\n    if (slideWidthChanged) {\n      this.slideWidth = newSlideWidth;\n      this.moveTo(this.getCurrSlideX());\n    }\n    this.itemHolders.forEach((itemHolder, index) => {\n      if (slideWidthChanged) {\n        setTransform(itemHolder.el, (index + this._containerShiftIndex) * this.slideWidth);\n      }\n      if (resizeSlides && itemHolder.slide) {\n        itemHolder.slide.resize();\n      }\n    });\n  }\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\n\n  resetPosition() {\n    // Position on the main scroller (offset)\n    // it is independent from slide index\n    this._currPositionIndex = 0;\n    this._prevPositionIndex = 0; // This will force recalculation of size on next resize()\n\n    this.slideWidth = 0; // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\n\n    this._containerShiftIndex = -1;\n  }\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\n\n  appendHolders() {\n    this.itemHolders = []; // append our three slide holders -\n    // previous, current, and next\n\n    for (let i = 0; i < 3; i++) {\n      const el = createElement('pswp__item', 'div', this.pswp.container);\n      el.setAttribute('role', 'group');\n      el.setAttribute('aria-roledescription', 'slide');\n      el.setAttribute('aria-hidden', 'true'); // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\n\n      el.style.display = i === 1 ? 'block' : 'none';\n      this.itemHolders.push({\n        el //index: -1\n      });\n    }\n  }\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   * @returns {boolean}\r\n   */\n\n  canBeSwiped() {\n    return this.pswp.getNumItems() > 1;\n  }\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean} [animate]\r\n   * @param {number} [velocityX]\r\n   * @returns {boolean} whether index was changed or not\r\n   */\n\n  moveIndexBy(diff, animate, velocityX) {\n    const {\n      pswp\n    } = this;\n    let newIndex = pswp.potentialIndex + diff;\n    const numSlides = pswp.getNumItems();\n    if (pswp.canLoop()) {\n      newIndex = pswp.getLoopedIndex(newIndex);\n      const distance = (diff + numSlides) % numSlides;\n      if (distance <= numSlides / 2) {\n        // go forward\n        diff = distance;\n      } else {\n        // go backwards\n        diff = distance - numSlides;\n      }\n    } else {\n      if (newIndex < 0) {\n        newIndex = 0;\n      } else if (newIndex >= numSlides) {\n        newIndex = numSlides - 1;\n      }\n      diff = newIndex - pswp.potentialIndex;\n    }\n    pswp.potentialIndex = newIndex;\n    this._currPositionIndex -= diff;\n    pswp.animations.stopMainScroll();\n    const destinationX = this.getCurrSlideX();\n    if (!animate) {\n      this.moveTo(destinationX);\n      this.updateCurrItem();\n    } else {\n      pswp.animations.startSpring({\n        isMainScroll: true,\n        start: this.x,\n        end: destinationX,\n        velocity: velocityX || 0,\n        naturalFrequency: 30,\n        dampingRatio: 1,\n        //0.7,\n        onUpdate: x => {\n          this.moveTo(x);\n        },\n        onComplete: () => {\n          this.updateCurrItem();\n          pswp.appendHeavy();\n        }\n      });\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\n      if (pswp.canLoop()) {\n        const currDistance = (currDiff + numSlides) % numSlides;\n        if (currDistance <= numSlides / 2) {\n          // go forward\n          currDiff = currDistance;\n        } else {\n          // go backwards\n          currDiff = currDistance - numSlides;\n        }\n      } // Force-append new slides during transition\n      // if difference between slides is more than 1\n\n      if (Math.abs(currDiff) > 1) {\n        this.updateCurrItem();\n      }\n    }\n    return Boolean(diff);\n  }\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   * @returns {number}\r\n   */\n\n  getCurrSlideX() {\n    return this.slideWidth * this._currPositionIndex;\n  }\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   * @returns {boolean}\r\n   */\n\n  isShifted() {\n    return this.x !== this.getCurrSlideX();\n  }\n  /**\r\n   * Update slides X positions and set their content\r\n   */\n\n  updateCurrItem() {\n    var _this$itemHolders$;\n    const {\n      pswp\n    } = this;\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\n    if (!positionDifference) {\n      return;\n    }\n    this._prevPositionIndex = this._currPositionIndex;\n    pswp.currIndex = pswp.potentialIndex;\n    let diffAbs = Math.abs(positionDifference);\n    /** @type {ItemHolder | undefined} */\n\n    let tempHolder;\n    if (diffAbs >= 3) {\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\n      diffAbs = 3; // If slides are changed by 3 screens or more - clean up previous slides\n\n      this.itemHolders.forEach(itemHolder => {\n        var _itemHolder$slide;\n        (_itemHolder$slide = itemHolder.slide) === null || _itemHolder$slide === void 0 || _itemHolder$slide.destroy();\n        itemHolder.slide = undefined;\n      });\n    }\n    for (let i = 0; i < diffAbs; i++) {\n      if (positionDifference > 0) {\n        tempHolder = this.itemHolders.shift();\n        if (tempHolder) {\n          this.itemHolders[2] = tempHolder; // move first to last\n\n          this._containerShiftIndex++;\n          setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\n          pswp.setContent(tempHolder, pswp.currIndex - diffAbs + i + 2);\n        }\n      } else {\n        tempHolder = this.itemHolders.pop();\n        if (tempHolder) {\n          this.itemHolders.unshift(tempHolder); // move last to first\n\n          this._containerShiftIndex--;\n          setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\n          pswp.setContent(tempHolder, pswp.currIndex + diffAbs - i - 2);\n        }\n      }\n    } // Reset transfrom every 50ish navigations in one direction.\n    //\n    // Otherwise transform will keep growing indefinitely,\n    // which might cause issues as browsers have a maximum transform limit.\n    // I wasn't able to reach it, but just to be safe.\n    // This should not cause noticable lag.\n\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\n      this.resetPosition();\n      this.resize();\n    } // Pan transition might be running (and consntantly updating pan position)\n\n    pswp.animations.stopAllPan();\n    this.itemHolders.forEach((itemHolder, i) => {\n      if (itemHolder.slide) {\n        // Slide in the 2nd holder is always active\n        itemHolder.slide.setIsActive(i === 1);\n      }\n    });\n    pswp.currSlide = (_this$itemHolders$ = this.itemHolders[1]) === null || _this$itemHolders$ === void 0 ? void 0 : _this$itemHolders$.slide;\n    pswp.contentLoader.updateLazy(positionDifference);\n    if (pswp.currSlide) {\n      pswp.currSlide.applyCurrentZoomPan();\n    }\n    pswp.dispatch('change');\n  }\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean} [dragging]\r\n   */\n\n  moveTo(x, dragging) {\n    if (!this.pswp.canLoop() && dragging) {\n      // Apply friction\n      let newSlideIndexOffset = (this.slideWidth * this._currPositionIndex - x) / this.slideWidth;\n      newSlideIndexOffset += this.pswp.currIndex;\n      const delta = Math.round(x - this.x);\n      if (newSlideIndexOffset < 0 && delta > 0 || newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0) {\n        x = this.x + delta * MAIN_SCROLL_END_FRICTION;\n      }\n    }\n    this.x = x;\n    if (this.pswp.container) {\n      setTransform(this.pswp.container, x);\n    }\n    this.pswp.dispatch('moveMainScroll', {\n      x,\n      dragging: dragging !== null && dragging !== void 0 ? dragging : false\n    });\n  }\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\n\nconst KeyboardKeyCodesMap = {\n  Escape: 27,\n  z: 90,\n  ArrowLeft: 37,\n  ArrowUp: 38,\n  ArrowRight: 39,\n  ArrowDown: 40,\n  Tab: 9\n};\n/**\r\n * @template {keyof KeyboardKeyCodesMap} T\r\n * @param {T} key\r\n * @param {boolean} isKeySupported\r\n * @returns {T | number | undefined}\r\n */\n\nconst getKeyboardEventKey = (key, isKeySupported) => {\n  return isKeySupported ? key : KeyboardKeyCodesMap[key];\n};\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Helps trap focus within photoswipe.\r\n */\n\nclass Keyboard {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    /** @private */\n\n    this._wasFocused = false;\n    pswp.on('bindEvents', () => {\n      if (pswp.options.trapFocus) {\n        // Dialog was likely opened by keyboard if initial point is not defined\n        if (!pswp.options.initialPointerPos) {\n          // focus causes layout,\n          // which causes lag during the animation,\n          // that's why we delay it until the opener transition ends\n          this._focusRoot();\n        }\n        pswp.events.add(document, 'focusin', /** @type EventListener */\n        this._onFocusIn.bind(this));\n      }\n      pswp.events.add(document, 'keydown', /** @type EventListener */\n      this._onKeyDown.bind(this));\n    });\n    const lastActiveElement = /** @type {HTMLElement} */\n    document.activeElement;\n    pswp.on('destroy', () => {\n      if (pswp.options.returnFocus && lastActiveElement && this._wasFocused) {\n        lastActiveElement.focus();\n      }\n    });\n  }\n  /** @private */\n\n  _focusRoot() {\n    if (!this._wasFocused && this.pswp.element) {\n      this.pswp.element.focus();\n      this._wasFocused = true;\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {KeyboardEvent} e\r\n   */\n\n  _onKeyDown(e) {\n    const {\n      pswp\n    } = this;\n    if (pswp.dispatch('keydown', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n    if (specialKeyUsed(e)) {\n      // don't do anything if special key pressed\n      // to prevent from overriding default browser actions\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\n      return;\n    }\n    /** @type {Methods<PhotoSwipe> | undefined} */\n\n    let keydownAction;\n    /** @type {'x' | 'y' | undefined} */\n\n    let axis;\n    let isForward = false;\n    const isKeySupported = ('key' in e);\n    switch (isKeySupported ? e.key : e.keyCode) {\n      case getKeyboardEventKey('Escape', isKeySupported):\n        if (pswp.options.escKey) {\n          keydownAction = 'close';\n        }\n        break;\n      case getKeyboardEventKey('z', isKeySupported):\n        keydownAction = 'toggleZoom';\n        break;\n      case getKeyboardEventKey('ArrowLeft', isKeySupported):\n        axis = 'x';\n        break;\n      case getKeyboardEventKey('ArrowUp', isKeySupported):\n        axis = 'y';\n        break;\n      case getKeyboardEventKey('ArrowRight', isKeySupported):\n        axis = 'x';\n        isForward = true;\n        break;\n      case getKeyboardEventKey('ArrowDown', isKeySupported):\n        isForward = true;\n        axis = 'y';\n        break;\n      case getKeyboardEventKey('Tab', isKeySupported):\n        this._focusRoot();\n        break;\n    } // if left/right/top/bottom key\n\n    if (axis) {\n      // prevent page scroll\n      e.preventDefault();\n      const {\n        currSlide\n      } = pswp;\n      if (pswp.options.arrowKeys && axis === 'x' && pswp.getNumItems() > 1) {\n        keydownAction = isForward ? 'next' : 'prev';\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\n        // up/down arrow keys pan the image vertically\n        // left/right arrow keys pan horizontally.\n        // Unless there is only one image,\n        // or arrowKeys option is disabled\n        currSlide.pan[axis] += isForward ? -80 : 80;\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\n      }\n    }\n    if (keydownAction) {\n      e.preventDefault(); // @ts-ignore\n\n      pswp[keydownAction]();\n    }\n  }\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @private\r\n   * @param {FocusEvent} e\r\n   */\n\n  _onFocusIn(e) {\n    const {\n      template\n    } = this.pswp;\n    if (template && document !== e.target && template !== e.target && !template.contains( /** @type {Node} */\n    e.target)) {\n      // focus root element\n      template.focus();\n    }\n  }\n}\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\n\n/** @typedef {Object} DefaultCssAnimationProps\r\n *\r\n * @prop {HTMLElement} target\r\n * @prop {number} [duration]\r\n * @prop {string} [easing]\r\n * @prop {string} [transform]\r\n * @prop {string} [opacity]\r\n * */\n\n/** @typedef {SharedAnimationProps & DefaultCssAnimationProps} CssAnimationProps */\n\n/**\r\n * Runs CSS transition.\r\n */\n\nclass CSSAnimation {\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {CssAnimationProps} props\r\n   */\n  constructor(props) {\n    var _props$prop;\n    this.props = props;\n    const {\n      target,\n      onComplete,\n      transform,\n      onFinish = () => {},\n      duration = 333,\n      easing = DEFAULT_EASING\n    } = props;\n    this.onFinish = onFinish; // support only transform and opacity\n\n    const prop = transform ? 'transform' : 'opacity';\n    const propValue = (_props$prop = props[prop]) !== null && _props$prop !== void 0 ? _props$prop : '';\n    /** @private */\n\n    this._target = target;\n    /** @private */\n\n    this._onComplete = onComplete;\n    /** @private */\n\n    this._finished = false;\n    /** @private */\n\n    this._onTransitionEnd = this._onTransitionEnd.bind(this); // Using timeout hack to make sure that animation\n    // starts even if the animated property was changed recently,\n    // otherwise transitionend might not fire or transition won't start.\n    // https://drafts.csswg.org/css-transitions/#starting\n    //\n    // ¯\\_(ツ)_/¯\n\n    /** @private */\n\n    this._helperTimeout = setTimeout(() => {\n      setTransitionStyle(target, prop, duration, easing);\n      this._helperTimeout = setTimeout(() => {\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false); // Safari occasionally does not emit transitionend event\n        // if element property was modified during the transition,\n        // which may be caused by resize or third party component,\n        // using timeout as a safety fallback\n\n        this._helperTimeout = setTimeout(() => {\n          this._finalizeAnimation();\n        }, duration + 500);\n        target.style[prop] = propValue;\n      }, 30); // Do not reduce this number\n    }, 0);\n  }\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\n\n  _onTransitionEnd(e) {\n    if (e.target === this._target) {\n      this._finalizeAnimation();\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n  _finalizeAnimation() {\n    if (!this._finished) {\n      this._finished = true;\n      this.onFinish();\n      if (this._onComplete) {\n        this._onComplete();\n      }\n    }\n  } // Destroy is called automatically onFinish\n\n  destroy() {\n    if (this._helperTimeout) {\n      clearTimeout(this._helperTimeout);\n    }\n    removeTransitionStyle(this._target);\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\n    if (!this._finished) {\n      this._finalizeAnimation();\n    }\n  }\n}\nconst DEFAULT_NATURAL_FREQUENCY = 12;\nconst DEFAULT_DAMPING_RATIO = 0.75;\n/**\r\n * Spring easing helper\r\n */\n\nclass SpringEaser {\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} [dampingRatio]\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} [naturalFrequency]\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\n    // https://en.wikipedia.org/wiki/Damping_ratio\n\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO; // https://en.wikipedia.org/wiki/Natural_frequency\n\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\n    this._dampedFrequency = this._naturalFrequency;\n    if (this._dampingRatio < 1) {\n      this._dampedFrequency *= Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\n    }\n  }\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\n\n  easeFrame(deltaPosition, deltaTime) {\n    // Inspired by Apple Webkit and Android spring function implementation\n    // https://en.wikipedia.org/wiki/Oscillation\n    // https://en.wikipedia.org/wiki/Damping_ratio\n    // we ignore mass (assume that it's 1kg)\n    let displacement = 0;\n    let coeff;\n    deltaTime /= 1000;\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\n    if (this._dampingRatio === 1) {\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\n      this.velocity = displacement * -this._naturalFrequency + coeff * naturalDumpingPow;\n    } else if (this._dampingRatio < 1) {\n      coeff = 1 / this._dampedFrequency * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\n      displacement = naturalDumpingPow * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\n      this.velocity = displacement * -this._naturalFrequency * this._dampingRatio + naturalDumpingPow * (-this._dampedFrequency * deltaPosition * dumpedFSin + this._dampedFrequency * coeff * dumpedFCos);\n    } // Overdamped (>1) damping ratio is not supported\n\n    return displacement;\n  }\n}\n\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\n\n/**\r\n * @typedef {Object} DefaultSpringAnimationProps\r\n *\r\n * @prop {number} start\r\n * @prop {number} end\r\n * @prop {number} velocity\r\n * @prop {number} [dampingRatio]\r\n * @prop {number} [naturalFrequency]\r\n * @prop {(end: number) => void} onUpdate\r\n */\n\n/** @typedef {SharedAnimationProps & DefaultSpringAnimationProps} SpringAnimationProps */\n\nclass SpringAnimation {\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\n  constructor(props) {\n    this.props = props;\n    this._raf = 0;\n    const {\n      start,\n      end,\n      velocity,\n      onUpdate,\n      onComplete,\n      onFinish = () => {},\n      dampingRatio,\n      naturalFrequency\n    } = props;\n    this.onFinish = onFinish;\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\n    let prevTime = Date.now();\n    let deltaPosition = start - end;\n    const animationLoop = () => {\n      if (this._raf) {\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime); // Stop the animation if velocity is low and position is close to end\n\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\n          // Finalize the animation\n          onUpdate(end);\n          if (onComplete) {\n            onComplete();\n          }\n          this.onFinish();\n        } else {\n          prevTime = Date.now();\n          onUpdate(deltaPosition + end);\n          this._raf = requestAnimationFrame(animationLoop);\n        }\n      }\n    };\n    this._raf = requestAnimationFrame(animationLoop);\n  } // Destroy is called automatically onFinish\n\n  destroy() {\n    if (this._raf >= 0) {\n      cancelAnimationFrame(this._raf);\n    }\n    this._raf = 0;\n  }\n}\n\n/** @typedef {import('./css-animation.js').CssAnimationProps} CssAnimationProps */\n\n/** @typedef {import('./spring-animation.js').SpringAnimationProps} SpringAnimationProps */\n\n/** @typedef {Object} SharedAnimationProps\r\n * @prop {string} [name]\r\n * @prop {boolean} [isPan]\r\n * @prop {boolean} [isMainScroll]\r\n * @prop {VoidFunction} [onComplete]\r\n * @prop {VoidFunction} [onFinish]\r\n */\n\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\n\n/** @typedef {SpringAnimationProps | CssAnimationProps} AnimationProps */\n\n/**\r\n * Manages animations\r\n */\n\nclass Animations {\n  constructor() {\n    /** @type {Animation[]} */\n    this.activeAnimations = [];\n  }\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\n\n  startSpring(props) {\n    this._start(props, true);\n  }\n  /**\r\n   * @param {CssAnimationProps} props\r\n   */\n\n  startTransition(props) {\n    this._start(props);\n  }\n  /**\r\n   * @private\r\n   * @param {AnimationProps} props\r\n   * @param {boolean} [isSpring]\r\n   * @returns {Animation}\r\n   */\n\n  _start(props, isSpring) {\n    const animation = isSpring ? new SpringAnimation( /** @type SpringAnimationProps */\n    props) : new CSSAnimation( /** @type CssAnimationProps */\n    props);\n    this.activeAnimations.push(animation);\n    animation.onFinish = () => this.stop(animation);\n    return animation;\n  }\n  /**\r\n   * @param {Animation} animation\r\n   */\n\n  stop(animation) {\n    animation.destroy();\n    const index = this.activeAnimations.indexOf(animation);\n    if (index > -1) {\n      this.activeAnimations.splice(index, 1);\n    }\n  }\n  stopAll() {\n    // _stopAllAnimations\n    this.activeAnimations.forEach(animation => {\n      animation.destroy();\n    });\n    this.activeAnimations = [];\n  }\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\n\n  stopAllPan() {\n    this.activeAnimations = this.activeAnimations.filter(animation => {\n      if (animation.props.isPan) {\n        animation.destroy();\n        return false;\n      }\n      return true;\n    });\n  }\n  stopMainScroll() {\n    this.activeAnimations = this.activeAnimations.filter(animation => {\n      if (animation.props.isMainScroll) {\n        animation.destroy();\n        return false;\n      }\n      return true;\n    });\n  }\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\n  // isMainScrollRunning() {\n  //   return this.activeAnimations.some((animation) => {\n  //     return animation.props.isMainScroll;\n  //   });\n  // }\n\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\n\n  isPanRunning() {\n    return this.activeAnimations.some(animation => {\n      return animation.props.isPan;\n    });\n  }\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\nclass ScrollWheel {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    pswp.events.add(pswp.element, 'wheel', /** @type EventListener */\n    this._onWheel.bind(this));\n  }\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\n\n  _onWheel(e) {\n    e.preventDefault();\n    const {\n      currSlide\n    } = this.pswp;\n    let {\n      deltaX,\n      deltaY\n    } = e;\n    if (!currSlide) {\n      return;\n    }\n    if (this.pswp.dispatch('wheel', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\n      // zoom\n      if (currSlide.isZoomable()) {\n        let zoomFactor = -deltaY;\n        if (e.deltaMode === 1\n        /* DOM_DELTA_LINE */) {\n          zoomFactor *= 0.05;\n        } else {\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\n        }\n        zoomFactor = 2 ** zoomFactor;\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\n        currSlide.zoomTo(destZoomLevel, {\n          x: e.clientX,\n          y: e.clientY\n        });\n      }\n    } else {\n      // pan\n      if (currSlide.isPannable()) {\n        if (e.deltaMode === 1\n        /* DOM_DELTA_LINE */) {\n          // 18 - average line height\n          deltaX *= 18;\n          deltaY *= 18;\n        }\n        currSlide.panTo(currSlide.pan.x - deltaX, currSlide.pan.y - deltaY);\n      }\n    }\n  }\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\n\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean} [isCustomSVG]\r\n * @prop {string} inner\r\n * @prop {string} [outlineID]\r\n * @prop {number | string} [size]\r\n */\n\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string} [className]\r\n * @prop {UIElementMarkup} [html]\r\n * @prop {boolean} [isButton]\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string} [title]\r\n * @prop {string} [ariaLabel]\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number} [order]\r\n */\n\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\n\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\n\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n * @returns {string}\r\n */\n\nfunction addElementHTML(htmlData) {\n  if (typeof htmlData === 'string') {\n    // Allow developers to provide full svg,\n    // For example:\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\n    //   <path d=\"...\" />\n    //   <circle ... />\n    // </svg>\n    // Can also be any HTML string.\n    return htmlData;\n  }\n  if (!htmlData || !htmlData.isCustomSVG) {\n    return '';\n  }\n  const svgData = htmlData;\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">'; // replace all %d with size\n\n  out = out.split('%d').join( /** @type {string} */\n  svgData.size || 32); // Icons may contain outline/shadow,\n  // to make it we \"clone\" base icon shape and add border to it.\n  // Icon itself and border are styled via CSS.\n  //\n  // Property shadowID defines ID of element that should be cloned.\n\n  if (svgData.outlineID) {\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\n  }\n  out += svgData.inner;\n  out += '</svg>';\n  return out;\n}\nclass UIElement {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\n  constructor(pswp, data) {\n    var _container;\n    const name = data.name || data.className;\n    let elementHTML = data.html; // @ts-expect-error lookup only by `data.name` maybe?\n\n    if (pswp.options[name] === false) {\n      // exit if element is disabled from options\n      return;\n    } // Allow to override SVG icons from options\n    // @ts-expect-error lookup only by `data.name` maybe?\n\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\n      // arrowPrevSVG\n      // arrowNextSVG\n      // closeSVG\n      // zoomSVG\n      // @ts-expect-error lookup only by `data.name` maybe?\n      elementHTML = pswp.options[name + 'SVG'];\n    }\n    pswp.dispatch('uiElementCreate', {\n      data\n    });\n    let className = '';\n    if (data.isButton) {\n      className += 'pswp__button ';\n      className += data.className || \"pswp__button--\".concat(data.name);\n    } else {\n      className += data.className || \"pswp__\".concat(data.name);\n    }\n    let tagName = data.isButton ? data.tagName || 'button' : data.tagName || 'div';\n    tagName = /** @type {keyof HTMLElementTagNameMap} */\n    tagName.toLowerCase();\n    /** @type {HTMLElement} */\n\n    const element = createElement(className, tagName);\n    if (data.isButton) {\n      if (tagName === 'button') {\n        /** @type {HTMLButtonElement} */\n        element.type = 'button';\n      }\n      let {\n        title\n      } = data;\n      const {\n        ariaLabel\n      } = data; // @ts-expect-error lookup only by `data.name` maybe?\n\n      if (typeof pswp.options[name + 'Title'] === 'string') {\n        // @ts-expect-error lookup only by `data.name` maybe?\n        title = pswp.options[name + 'Title'];\n      }\n      if (title) {\n        element.title = title;\n      }\n      const ariaText = ariaLabel || title;\n      if (ariaText) {\n        element.setAttribute('aria-label', ariaText);\n      }\n    }\n    element.innerHTML = addElementHTML(elementHTML);\n    if (data.onInit) {\n      data.onInit(element, pswp);\n    }\n    if (data.onClick) {\n      element.onclick = e => {\n        if (typeof data.onClick === 'string') {\n          // @ts-ignore\n          pswp[data.onClick]();\n        } else if (typeof data.onClick === 'function') {\n          data.onClick(e, element, pswp);\n        }\n      };\n    } // Top bar is default position\n\n    const appendTo = data.appendTo || 'bar';\n    /** @type {HTMLElement | undefined} root element by default */\n\n    let container = pswp.element;\n    if (appendTo === 'bar') {\n      if (!pswp.topBar) {\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\n      }\n      container = pswp.topBar;\n    } else {\n      // element outside of top bar gets a secondary class\n      // that makes element fade out on close\n      element.classList.add('pswp__hide-on-close');\n      if (appendTo === 'wrapper') {\n        container = pswp.scrollWrap;\n      }\n    }\n    (_container = container) === null || _container === void 0 || _container.appendChild(pswp.applyFilters('uiElement', element, data));\n  }\n}\n\n/*\r\n  Backward and forward arrow buttons\r\n */\n\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean} [isNextButton]\r\n */\nfunction initArrowButton(element, pswp, isNextButton) {\n  element.classList.add('pswp__button--arrow'); // TODO: this should point to a unique id for this instance\n\n  element.setAttribute('aria-controls', 'pswp__items');\n  pswp.on('change', () => {\n    if (!pswp.options.loop) {\n      if (isNextButton) {\n        /** @type {HTMLButtonElement} */\n        element.disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\n      } else {\n        /** @type {HTMLButtonElement} */\n        element.disabled = !(pswp.currIndex > 0);\n      }\n    }\n  });\n}\n/** @type {UIElementData} */\n\nconst arrowPrev = {\n  name: 'arrowPrev',\n  className: 'pswp__button--arrow--prev',\n  title: 'Previous',\n  order: 10,\n  isButton: true,\n  appendTo: 'wrapper',\n  html: {\n    isCustomSVG: true,\n    size: 60,\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\n    outlineID: 'pswp__icn-arrow'\n  },\n  onClick: 'prev',\n  onInit: initArrowButton\n};\n/** @type {UIElementData} */\n\nconst arrowNext = {\n  name: 'arrowNext',\n  className: 'pswp__button--arrow--next',\n  title: 'Next',\n  order: 11,\n  isButton: true,\n  appendTo: 'wrapper',\n  html: {\n    isCustomSVG: true,\n    size: 60,\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\n    outlineID: 'pswp__icn-arrow'\n  },\n  onClick: 'next',\n  onInit: (el, pswp) => {\n    initArrowButton(el, pswp, true);\n  }\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\nconst closeButton = {\n  name: 'close',\n  title: 'Close',\n  order: 20,\n  isButton: true,\n  html: {\n    isCustomSVG: true,\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\n    outlineID: 'pswp__icn-close'\n  },\n  onClick: 'close'\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\nconst zoomButton = {\n  name: 'zoom',\n  title: 'Zoom',\n  order: 10,\n  isButton: true,\n  html: {\n    isCustomSVG: true,\n    // eslint-disable-next-line max-len\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>' + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>' + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\n    outlineID: 'pswp__icn-zoom'\n  },\n  onClick: 'toggleZoom'\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\nconst loadingIndicator = {\n  name: 'preloader',\n  appendTo: 'bar',\n  order: 7,\n  html: {\n    isCustomSVG: true,\n    // eslint-disable-next-line max-len\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\n    outlineID: 'pswp__icn-loading'\n  },\n  onInit: (indicatorElement, pswp) => {\n    /** @type {boolean | undefined} */\n    let isVisible;\n    /** @type {NodeJS.Timeout | null} */\n\n    let delayTimeout = null;\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\n\n    const toggleIndicatorClass = (className, add) => {\n      indicatorElement.classList.toggle('pswp__preloader--' + className, add);\n    };\n    /**\r\n     * @param {boolean} visible\r\n     */\n\n    const setIndicatorVisibility = visible => {\n      if (isVisible !== visible) {\n        isVisible = visible;\n        toggleIndicatorClass('active', visible);\n      }\n    };\n    const updatePreloaderVisibility = () => {\n      var _pswp$currSlide;\n      if (!((_pswp$currSlide = pswp.currSlide) !== null && _pswp$currSlide !== void 0 && _pswp$currSlide.content.isLoading())) {\n        setIndicatorVisibility(false);\n        if (delayTimeout) {\n          clearTimeout(delayTimeout);\n          delayTimeout = null;\n        }\n        return;\n      }\n      if (!delayTimeout) {\n        // display loading indicator with delay\n        delayTimeout = setTimeout(() => {\n          var _pswp$currSlide2;\n          setIndicatorVisibility(Boolean((_pswp$currSlide2 = pswp.currSlide) === null || _pswp$currSlide2 === void 0 ? void 0 : _pswp$currSlide2.content.isLoading()));\n          delayTimeout = null;\n        }, pswp.options.preloaderDelay);\n      }\n    };\n    pswp.on('change', updatePreloaderVisibility);\n    pswp.on('loadComplete', e => {\n      if (pswp.currSlide === e.slide) {\n        updatePreloaderVisibility();\n      }\n    }); // expose the method\n\n    if (pswp.ui) {\n      pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\n    }\n  }\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\nconst counterIndicator = {\n  name: 'counter',\n  order: 5,\n  onInit: (counterElement, pswp) => {\n    pswp.on('change', () => {\n      counterElement.innerText = pswp.currIndex + 1 + pswp.options.indexIndicatorSep + pswp.getNumItems();\n    });\n  }\n};\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\n\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default, it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\n\nfunction setZoomedIn(el, isZoomedIn) {\n  el.classList.toggle('pswp--zoomed-in', isZoomedIn);\n}\nclass UI {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.isRegistered = false;\n    /** @type {UIElementData[]} */\n\n    this.uiElementsData = [];\n    /** @type {(UIElement | UIElementData)[]} */\n\n    this.items = [];\n    /** @type {() => void} */\n\n    this.updatePreloaderVisibility = () => {};\n    /**\r\n     * @private\r\n     * @type {number | undefined}\r\n     */\n\n    this._lastUpdatedZoomLevel = undefined;\n  }\n  init() {\n    const {\n      pswp\n    } = this;\n    this.isRegistered = false;\n    this.uiElementsData = [closeButton, arrowPrev, arrowNext, zoomButton, loadingIndicator, counterIndicator];\n    pswp.dispatch('uiRegister'); // sort by order\n\n    this.uiElementsData.sort((a, b) => {\n      // default order is 0\n      return (a.order || 0) - (b.order || 0);\n    });\n    this.items = [];\n    this.isRegistered = true;\n    this.uiElementsData.forEach(uiElementData => {\n      this.registerElement(uiElementData);\n    });\n    pswp.on('change', () => {\n      var _pswp$element;\n      (_pswp$element = pswp.element) === null || _pswp$element === void 0 || _pswp$element.classList.toggle('pswp--one-slide', pswp.getNumItems() === 1);\n    });\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\n  }\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\n\n  registerElement(elementData) {\n    if (this.isRegistered) {\n      this.items.push(new UIElement(this.pswp, elementData));\n    } else {\n      this.uiElementsData.push(elementData);\n    }\n  }\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   *\r\n   * @private\r\n   */\n\n  _onZoomPanUpdate() {\n    const {\n      template,\n      currSlide,\n      options\n    } = this.pswp;\n    if (this.pswp.opener.isClosing || !template || !currSlide) {\n      return;\n    }\n    let {\n      currZoomLevel\n    } = currSlide; // if not open yet - check against initial zoom level\n\n    if (!this.pswp.opener.isOpen) {\n      currZoomLevel = currSlide.zoomLevels.initial;\n    }\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\n      return;\n    }\n    this._lastUpdatedZoomLevel = currZoomLevel;\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary; // Initial and secondary zoom levels are almost equal\n\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\n      // disable zoom\n      setZoomedIn(template, false);\n      template.classList.remove('pswp--zoom-allowed');\n      return;\n    }\n    template.classList.add('pswp--zoom-allowed');\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\n    if (options.imageClickAction === 'zoom' || options.imageClickAction === 'zoom-or-close') {\n      template.classList.add('pswp--click-to-zoom');\n    }\n  }\n}\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\n\n/**\r\n * @param {HTMLElement} el\r\n * @returns Bounds\r\n */\nfunction getBoundsByElement(el) {\n  const thumbAreaRect = el.getBoundingClientRect();\n  return {\n    x: thumbAreaRect.left,\n    y: thumbAreaRect.top,\n    w: thumbAreaRect.width\n  };\n}\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n * @returns Bounds\r\n */\n\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\n  const thumbAreaRect = el.getBoundingClientRect(); // fill image into the area\n  // (do they same as object-fit:cover does to retrieve coordinates)\n\n  const hRatio = thumbAreaRect.width / imageWidth;\n  const vRatio = thumbAreaRect.height / imageHeight;\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\n\n  const bounds = {\n    x: thumbAreaRect.left + offsetX,\n    y: thumbAreaRect.top + offsetY,\n    w: imageWidth * fillZoomLevel\n  }; // Coordinates of inner crop area\n  // relative to the image\n\n  bounds.innerRect = {\n    w: thumbAreaRect.width,\n    h: thumbAreaRect.height,\n    x: offsetX,\n    y: offsetY\n  };\n  return bounds;\n}\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\n\nfunction getThumbBounds(index, itemData, instance) {\n  // legacy event, before filters were introduced\n  const event = instance.dispatch('thumbBounds', {\n    index,\n    itemData,\n    instance\n  }); // @ts-expect-error\n\n  if (event.thumbBounds) {\n    // @ts-expect-error\n    return event.thumbBounds;\n  }\n  const {\n    element\n  } = itemData;\n  /** @type {Bounds | undefined} */\n\n  let thumbBounds;\n  /** @type {HTMLElement | null | undefined} */\n\n  let thumbnail;\n  if (element && instance.options.thumbSelector !== false) {\n    const thumbSelector = instance.options.thumbSelector || 'img';\n    thumbnail = element.matches(thumbSelector) ? element : /** @type {HTMLElement | null} */\n    element.querySelector(thumbSelector);\n  }\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\n  if (thumbnail) {\n    if (!itemData.thumbCropped) {\n      thumbBounds = getBoundsByElement(thumbnail);\n    } else {\n      thumbBounds = getCroppedBoundsByElement(thumbnail, itemData.width || itemData.w || 0, itemData.height || itemData.h || 0);\n    }\n  }\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\n}\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\n\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\n\n/** @typedef {import('../slide/content.js').default} ContentDefault */\n\n/** @typedef {import('../slide/slide.js').default} Slide */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\n\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\n\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\n\n/** @typedef {{ x?: number; y?: number }} Point */\n\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\n\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thumbnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thumbnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n * @prop {(preventPointerEvent: boolean, event: PointerEvent, pointerType: string) => boolean} preventPointerEvent\r\n *\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\n\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\nclass PhotoSwipeEvent {\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\n  constructor(type, details) {\n    this.type = type;\n    this.defaultPrevented = false;\n    if (details) {\n      Object.assign(this, details);\n    }\n  }\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n}\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\n\nclass Eventable {\n  constructor() {\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\n    this._listeners = {};\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\n\n    this._filters = {};\n    /** @type {PhotoSwipe | undefined} */\n\n    this.pswp = undefined;\n    /** @type {PhotoSwipeOptions | undefined} */\n\n    this.options = undefined;\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\n\n  addFilter(name, fn) {\n    let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n    var _this$_filters$name, _this$_filters$name2, _this$pswp;\n    if (!this._filters[name]) {\n      this._filters[name] = [];\n    }\n    (_this$_filters$name = this._filters[name]) === null || _this$_filters$name === void 0 || _this$_filters$name.push({\n      fn,\n      priority\n    });\n    (_this$_filters$name2 = this._filters[name]) === null || _this$_filters$name2 === void 0 || _this$_filters$name2.sort((f1, f2) => f1.priority - f2.priority);\n    (_this$pswp = this.pswp) === null || _this$pswp === void 0 || _this$pswp.addFilter(name, fn, priority);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\n\n  removeFilter(name, fn) {\n    if (this._filters[name]) {\n      // @ts-expect-error\n      this._filters[name] = this._filters[name].filter(filter => filter.fn !== fn);\n    }\n    if (this.pswp) {\n      this.pswp.removeFilter(name, fn);\n    }\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\n\n  applyFilters(name) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    var _this$_filters$name3;\n    (_this$_filters$name3 = this._filters[name]) === null || _this$_filters$name3 === void 0 || _this$_filters$name3.forEach(filter => {\n      // @ts-expect-error\n      args[0] = filter.fn.apply(this, args);\n    });\n    return args[0];\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\n\n  on(name, fn) {\n    var _this$_listeners$name, _this$pswp2;\n    if (!this._listeners[name]) {\n      this._listeners[name] = [];\n    }\n    (_this$_listeners$name = this._listeners[name]) === null || _this$_listeners$name === void 0 || _this$_listeners$name.push(fn); // When binding events to lightbox,\n    // also bind events to PhotoSwipe Core,\n    // if it's open.\n\n    (_this$pswp2 = this.pswp) === null || _this$pswp2 === void 0 || _this$pswp2.on(name, fn);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\n\n  off(name, fn) {\n    var _this$pswp3;\n    if (this._listeners[name]) {\n      // @ts-expect-error\n      this._listeners[name] = this._listeners[name].filter(listener => fn !== listener);\n    }\n    (_this$pswp3 = this.pswp) === null || _this$pswp3 === void 0 || _this$pswp3.off(name, fn);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\n\n  dispatch(name, details) {\n    var _this$_listeners$name2;\n    if (this.pswp) {\n      return this.pswp.dispatch(name, details);\n    }\n    const event = /** @type {AugmentedEvent<T>} */\n    new PhotoSwipeEvent(name, details);\n    (_this$_listeners$name2 = this._listeners[name]) === null || _this$_listeners$name2 === void 0 || _this$_listeners$name2.forEach(listener => {\n      listener.call(this, event);\n    });\n    return event;\n  }\n}\nclass Placeholder {\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\n  constructor(imageSrc, container) {\n    // Create placeholder\n    // (stretched thumbnail or simple div behind the main image)\n\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\n    this.element = createElement('pswp__img pswp__img--placeholder', imageSrc ? 'img' : 'div', container);\n    if (imageSrc) {\n      const imgEl = /** @type {HTMLImageElement} */\n      this.element;\n      imgEl.decoding = 'async';\n      imgEl.alt = '';\n      imgEl.src = imageSrc;\n      imgEl.setAttribute('role', 'presentation');\n    }\n    this.element.setAttribute('aria-hidden', 'true');\n  }\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\n\n  setDisplayedSize(width, height) {\n    if (!this.element) {\n      return;\n    }\n    if (this.element.tagName === 'IMG') {\n      // Use transform scale() to modify img placeholder size\n      // (instead of changing width/height directly).\n      // This helps with performance, specifically in iOS15 Safari.\n      setWidthHeight(this.element, 250, 'auto');\n      this.element.style.transformOrigin = '0 0';\n      this.element.style.transform = toTransformString(0, 0, width / 250);\n    } else {\n      setWidthHeight(this.element, width, height);\n    }\n  }\n  destroy() {\n    var _this$element;\n    if ((_this$element = this.element) !== null && _this$element !== void 0 && _this$element.parentNode) {\n      this.element.remove();\n    }\n    this.element = null;\n  }\n}\n\n/** @typedef {import('./slide.js').default} Slide */\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../util/util.js').LoadState} LoadState */\n\nclass Content {\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\n  constructor(itemData, instance, index) {\n    this.instance = instance;\n    this.data = itemData;\n    this.index = index;\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\n\n    this.element = undefined;\n    /** @type {Placeholder | undefined} */\n\n    this.placeholder = undefined;\n    /** @type {Slide | undefined} */\n\n    this.slide = undefined;\n    this.displayedImageWidth = 0;\n    this.displayedImageHeight = 0;\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\n    this.isAttached = false;\n    this.hasSlide = false;\n    this.isDecoding = false;\n    /** @type {LoadState} */\n\n    this.state = LOAD_STATE.IDLE;\n    if (this.data.type) {\n      this.type = this.data.type;\n    } else if (this.data.src) {\n      this.type = 'image';\n    } else {\n      this.type = 'html';\n    }\n    this.instance.dispatch('contentInit', {\n      content: this\n    });\n  }\n  removePlaceholder() {\n    if (this.placeholder && !this.keepPlaceholder()) {\n      // With delay, as image might be loaded, but not rendered\n      setTimeout(() => {\n        if (this.placeholder) {\n          this.placeholder.destroy();\n          this.placeholder = undefined;\n        }\n      }, 1000);\n    }\n  }\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\n\n  load(isLazy, reload) {\n    if (this.slide && this.usePlaceholder()) {\n      if (!this.placeholder) {\n        const placeholderSrc = this.instance.applyFilters('placeholderSrc',\n        // use  image-based placeholder only for the first slide,\n        // as rendering (even small stretched thumbnail) is an expensive operation\n        this.data.msrc && this.slide.isFirstSlide ? this.data.msrc : false, this);\n        this.placeholder = new Placeholder(placeholderSrc, this.slide.container);\n      } else {\n        const placeholderEl = this.placeholder.element; // Add placeholder to DOM if it was already created\n\n        if (placeholderEl && !placeholderEl.parentElement) {\n          this.slide.container.prepend(placeholderEl);\n        }\n      }\n    }\n    if (this.element && !reload) {\n      return;\n    }\n    if (this.instance.dispatch('contentLoad', {\n      content: this,\n      isLazy\n    }).defaultPrevented) {\n      return;\n    }\n    if (this.isImageContent()) {\n      this.element = createElement('pswp__img', 'img'); // Start loading only after width is defined, as sizes might depend on it.\n      // Due to Safari feature, we must define sizes before srcset.\n\n      if (this.displayedImageWidth) {\n        this.loadImage(isLazy);\n      }\n    } else {\n      this.element = createElement('pswp__content', 'div');\n      this.element.innerHTML = this.data.html || '';\n    }\n    if (reload && this.slide) {\n      this.slide.updateContentSize(true);\n    }\n  }\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\n\n  loadImage(isLazy) {\n    var _this$data$src, _this$data$alt;\n    if (!this.isImageContent() || !this.element || this.instance.dispatch('contentLoadImage', {\n      content: this,\n      isLazy\n    }).defaultPrevented) {\n      return;\n    }\n    const imageElement = /** @type HTMLImageElement */\n    this.element;\n    this.updateSrcsetSizes();\n    if (this.data.srcset) {\n      imageElement.srcset = this.data.srcset;\n    }\n    imageElement.src = (_this$data$src = this.data.src) !== null && _this$data$src !== void 0 ? _this$data$src : '';\n    imageElement.alt = (_this$data$alt = this.data.alt) !== null && _this$data$alt !== void 0 ? _this$data$alt : '';\n    this.state = LOAD_STATE.LOADING;\n    if (imageElement.complete) {\n      this.onLoaded();\n    } else {\n      imageElement.onload = () => {\n        this.onLoaded();\n      };\n      imageElement.onerror = () => {\n        this.onError();\n      };\n    }\n  }\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\n\n  setSlide(slide) {\n    this.slide = slide;\n    this.hasSlide = true;\n    this.instance = slide.pswp; // todo: do we need to unset slide?\n  }\n  /**\r\n   * Content load success handler\r\n   */\n\n  onLoaded() {\n    this.state = LOAD_STATE.LOADED;\n    if (this.slide && this.element) {\n      this.instance.dispatch('loadComplete', {\n        slide: this.slide,\n        content: this\n      }); // if content is reloaded\n\n      if (this.slide.isActive && this.slide.heavyAppended && !this.element.parentNode) {\n        this.append();\n        this.slide.updateContentSize(true);\n      }\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\n        this.removePlaceholder();\n      }\n    }\n  }\n  /**\r\n   * Content load error handler\r\n   */\n\n  onError() {\n    this.state = LOAD_STATE.ERROR;\n    if (this.slide) {\n      this.displayError();\n      this.instance.dispatch('loadComplete', {\n        slide: this.slide,\n        isError: true,\n        content: this\n      });\n      this.instance.dispatch('loadError', {\n        slide: this.slide,\n        content: this\n      });\n    }\n  }\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\n\n  isLoading() {\n    return this.instance.applyFilters('isContentLoading', this.state === LOAD_STATE.LOADING, this);\n  }\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\n\n  isError() {\n    return this.state === LOAD_STATE.ERROR;\n  }\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\n\n  isImageContent() {\n    return this.type === 'image';\n  }\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\n\n  setDisplayedSize(width, height) {\n    if (!this.element) {\n      return;\n    }\n    if (this.placeholder) {\n      this.placeholder.setDisplayedSize(width, height);\n    }\n    if (this.instance.dispatch('contentResize', {\n      content: this,\n      width,\n      height\n    }).defaultPrevented) {\n      return;\n    }\n    setWidthHeight(this.element, width, height);\n    if (this.isImageContent() && !this.isError()) {\n      const isInitialSizeUpdate = !this.displayedImageWidth && width;\n      this.displayedImageWidth = width;\n      this.displayedImageHeight = height;\n      if (isInitialSizeUpdate) {\n        this.loadImage(false);\n      } else {\n        this.updateSrcsetSizes();\n      }\n      if (this.slide) {\n        this.instance.dispatch('imageSizeChange', {\n          slide: this.slide,\n          width,\n          height,\n          content: this\n        });\n      }\n    }\n  }\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\n\n  isZoomable() {\n    return this.instance.applyFilters('isContentZoomable', this.isImageContent() && this.state !== LOAD_STATE.ERROR, this);\n  }\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\n\n  updateSrcsetSizes() {\n    // Handle srcset sizes attribute.\n    //\n    // Never lower quality, if it was increased previously.\n    // Chrome does this automatically, Firefox and Safari do not,\n    // so we store largest used size in dataset.\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\n      return;\n    }\n    const image = /** @type HTMLImageElement */\n    this.element;\n    const sizesWidth = this.instance.applyFilters('srcsetSizesWidth', this.displayedImageWidth, this);\n    if (!image.dataset.largestUsedSize || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\n      image.sizes = sizesWidth + 'px';\n      image.dataset.largestUsedSize = String(sizesWidth);\n    }\n  }\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\n\n  usePlaceholder() {\n    return this.instance.applyFilters('useContentPlaceholder', this.isImageContent(), this);\n  }\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\n\n  lazyLoad() {\n    if (this.instance.dispatch('contentLazyLoad', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n    this.load(true);\n  }\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\n\n  keepPlaceholder() {\n    return this.instance.applyFilters('isKeepingPlaceholder', this.isLoading(), this);\n  }\n  /**\r\n   * Destroy the content\r\n   */\n\n  destroy() {\n    this.hasSlide = false;\n    this.slide = undefined;\n    if (this.instance.dispatch('contentDestroy', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n    this.remove();\n    if (this.placeholder) {\n      this.placeholder.destroy();\n      this.placeholder = undefined;\n    }\n    if (this.isImageContent() && this.element) {\n      this.element.onload = null;\n      this.element.onerror = null;\n      this.element = undefined;\n    }\n  }\n  /**\r\n   * Display error message\r\n   */\n\n  displayError() {\n    if (this.slide) {\n      var _this$instance$option, _this$instance$option2;\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\n      errorMsgEl.innerText = (_this$instance$option = (_this$instance$option2 = this.instance.options) === null || _this$instance$option2 === void 0 ? void 0 : _this$instance$option2.errorMsg) !== null && _this$instance$option !== void 0 ? _this$instance$option : '';\n      errorMsgEl = /** @type {HTMLDivElement} */\n      this.instance.applyFilters('contentErrorElement', errorMsgEl, this);\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\n      this.element.appendChild(errorMsgEl);\n      this.slide.container.innerText = '';\n      this.slide.container.appendChild(this.element);\n      this.slide.updateContentSize(true);\n      this.removePlaceholder();\n    }\n  }\n  /**\r\n   * Append the content\r\n   */\n\n  append() {\n    if (this.isAttached || !this.element) {\n      return;\n    }\n    this.isAttached = true;\n    if (this.state === LOAD_STATE.ERROR) {\n      this.displayError();\n      return;\n    }\n    if (this.instance.dispatch('contentAppend', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n    const supportsDecode = ('decode' in this.element);\n    if (this.isImageContent()) {\n      // Use decode() on nearby slides\n      //\n      // Nearby slide images are in DOM and not hidden via display:none.\n      // However, they are placed offscreen (to the left and right side).\n      //\n      // Some browsers do not composite the image until it's actually visible,\n      // using decode() helps.\n      //\n      // You might ask \"why dont you just decode() and then append all images\",\n      // that's because I want to show image before it's fully loaded,\n      // as browser can render parts of image while it is loading.\n      // We do not do this in Safari due to partial loading bug.\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\n        this.isDecoding = true; // purposefully using finally instead of then,\n        // as if srcset sizes changes dynamically - it may cause decode error\n\n        /** @type {HTMLImageElement} */\n\n        this.element.decode().catch(() => {}).finally(() => {\n          this.isDecoding = false;\n          this.appendImage();\n        });\n      } else {\n        this.appendImage();\n      }\n    } else if (this.slide && !this.element.parentNode) {\n      this.slide.container.appendChild(this.element);\n    }\n  }\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\n\n  activate() {\n    if (this.instance.dispatch('contentActivate', {\n      content: this\n    }).defaultPrevented || !this.slide) {\n      return;\n    }\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\n      // add image to slide when it becomes active,\n      // even if it's not finished decoding\n      this.appendImage();\n    } else if (this.isError()) {\n      this.load(false, true); // try to reload\n    }\n    if (this.slide.holderElement) {\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\n    }\n  }\n  /**\r\n   * Deactivate the content\r\n   */\n\n  deactivate() {\n    this.instance.dispatch('contentDeactivate', {\n      content: this\n    });\n    if (this.slide && this.slide.holderElement) {\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n  /**\r\n   * Remove the content from DOM\r\n   */\n\n  remove() {\n    this.isAttached = false;\n    if (this.instance.dispatch('contentRemove', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n    if (this.element && this.element.parentNode) {\n      this.element.remove();\n    }\n    if (this.placeholder && this.placeholder.element) {\n      this.placeholder.element.remove();\n    }\n  }\n  /**\r\n   * Append the image content to slide container\r\n   */\n\n  appendImage() {\n    if (!this.isAttached) {\n      return;\n    }\n    if (this.instance.dispatch('contentAppendImage', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    } // ensure that element exists and is not already appended\n\n    if (this.slide && this.element && !this.element.parentNode) {\n      this.slide.container.appendChild(this.element);\n    }\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\n      this.removePlaceholder();\n    }\n  }\n}\n\n/** @typedef {import('./content.js').default} Content */\n\n/** @typedef {import('./slide.js').default} Slide */\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\nconst MIN_SLIDES_TO_CACHE = 5;\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\n\nfunction lazyLoadData(itemData, instance, index) {\n  const content = instance.createContentFromData(itemData, index);\n  /** @type {ZoomLevel | undefined} */\n\n  let zoomLevel;\n  const {\n    options\n  } = instance; // We need to know dimensions of the image to preload it,\n  // as it might use srcset, and we need to define sizes\n\n  if (options) {\n    zoomLevel = new ZoomLevel(options, itemData, -1);\n    let viewportSize;\n    if (instance.pswp) {\n      viewportSize = instance.pswp.viewportSize;\n    } else {\n      viewportSize = getViewportSize(options, instance);\n    }\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\n    zoomLevel.update(content.width, content.height, panAreaSize);\n  }\n  content.lazyLoad();\n  if (zoomLevel) {\n    content.setDisplayedSize(Math.ceil(content.width * zoomLevel.initial), Math.ceil(content.height * zoomLevel.initial));\n  }\n  return content;\n}\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\n\nfunction lazyLoadSlide(index, instance) {\n  const itemData = instance.getItemData(index);\n  if (instance.dispatch('lazyLoadSlide', {\n    index,\n    itemData\n  }).defaultPrevented) {\n    return;\n  }\n  return lazyLoadData(itemData, instance, index);\n}\nclass ContentLoader {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp; // Total amount of cached images\n\n    this.limit = Math.max(pswp.options.preload[0] + pswp.options.preload[1] + 1, MIN_SLIDES_TO_CACHE);\n    /** @type {Content[]} */\n\n    this._cachedItems = [];\n  }\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\n\n  updateLazy(diff) {\n    const {\n      pswp\n    } = this;\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\n      return;\n    }\n    const {\n      preload\n    } = pswp.options;\n    const isForward = diff === undefined ? true : diff >= 0;\n    let i; // preload[1] - num items to preload in forward direction\n\n    for (i = 0; i <= preload[1]; i++) {\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : -i));\n    } // preload[0] - num items to preload in backward direction\n\n    for (i = 1; i <= preload[0]; i++) {\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? -i : i));\n    }\n  }\n  /**\r\n   * @param {number} initialIndex\r\n   */\n\n  loadSlideByIndex(initialIndex) {\n    const index = this.pswp.getLoopedIndex(initialIndex); // try to get cached content\n\n    let content = this.getContentByIndex(index);\n    if (!content) {\n      // no cached content, so try to load from scratch:\n      content = lazyLoadSlide(index, this.pswp); // if content can be loaded, add it to cache:\n\n      if (content) {\n        this.addToCache(content);\n      }\n    }\n  }\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\n\n  getContentBySlide(slide) {\n    let content = this.getContentByIndex(slide.index);\n    if (!content) {\n      // create content if not found in cache\n      content = this.pswp.createContentFromData(slide.data, slide.index);\n      this.addToCache(content);\n    } // assign slide to content\n\n    content.setSlide(slide);\n    return content;\n  }\n  /**\r\n   * @param {Content} content\r\n   */\n\n  addToCache(content) {\n    // move to the end of array\n    this.removeByIndex(content.index);\n    this._cachedItems.push(content);\n    if (this._cachedItems.length > this.limit) {\n      // Destroy the first content that's not attached\n      const indexToRemove = this._cachedItems.findIndex(item => {\n        return !item.isAttached && !item.hasSlide;\n      });\n      if (indexToRemove !== -1) {\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\n        removedItem.destroy();\n      }\n    }\n  }\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\n\n  removeByIndex(index) {\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\n    if (indexToRemove !== -1) {\n      this._cachedItems.splice(indexToRemove, 1);\n    }\n  }\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\n\n  getContentByIndex(index) {\n    return this._cachedItems.find(content => content.index === index);\n  }\n  destroy() {\n    this._cachedItems.forEach(content => content.destroy());\n    this._cachedItems = [];\n  }\n}\n\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\n\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\n\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\n\nclass PhotoSwipeBase extends Eventable {\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\n  getNumItems() {\n    var _this$options;\n    let numItems = 0;\n    const dataSource = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.dataSource;\n    if (dataSource && 'length' in dataSource) {\n      // may be an array or just object with length property\n      numItems = dataSource.length;\n    } else if (dataSource && 'gallery' in dataSource) {\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n      if (dataSource.items) {\n        numItems = dataSource.items.length;\n      }\n    } // legacy event, before filters were introduced\n\n    const event = this.dispatch('numItems', {\n      dataSource,\n      numItems\n    });\n    return this.applyFilters('numItems', event.numItems, dataSource);\n  }\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\n\n  createContentFromData(slideData, index) {\n    return new Content(slideData, this, index);\n  }\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\n\n  getItemData(index) {\n    var _this$options2;\n    const dataSource = (_this$options2 = this.options) === null || _this$options2 === void 0 ? void 0 : _this$options2.dataSource;\n    /** @type {SlideData | HTMLElement} */\n\n    let dataSourceItem = {};\n    if (Array.isArray(dataSource)) {\n      // Datasource is an array of elements\n      dataSourceItem = dataSource[index];\n    } else if (dataSource && 'gallery' in dataSource) {\n      // dataSource has gallery property,\n      // thus it was created by Lightbox, based on\n      // gallery and children options\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n      dataSourceItem = dataSource.items[index];\n    }\n    let itemData = dataSourceItem;\n    if (itemData instanceof Element) {\n      itemData = this._domElementToItemData(itemData);\n    } // Dispatching the itemData event,\n    // it's a legacy verion before filters were introduced\n\n    const event = this.dispatch('itemData', {\n      itemData: itemData || {},\n      index\n    });\n    return this.applyFilters('itemData', event.itemData, index);\n  }\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\n\n  _getGalleryDOMElements(galleryElement) {\n    var _this$options3, _this$options4;\n    if ((_this$options3 = this.options) !== null && _this$options3 !== void 0 && _this$options3.children || (_this$options4 = this.options) !== null && _this$options4 !== void 0 && _this$options4.childSelector) {\n      return getElementsFromOption(this.options.children, this.options.childSelector, galleryElement) || [];\n    }\n    return [galleryElement];\n  }\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\n\n  _domElementToItemData(element) {\n    /** @type {SlideData} */\n    const itemData = {\n      element\n    };\n    const linkEl = /** @type {HTMLAnchorElement} */\n    element.tagName === 'A' ? element : element.querySelector('a');\n    if (linkEl) {\n      // src comes from data-pswp-src attribute,\n      // if it's empty link href is used\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\n      if (linkEl.dataset.pswpSrcset) {\n        itemData.srcset = linkEl.dataset.pswpSrcset;\n      }\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0; // support legacy w & h properties\n\n      itemData.w = itemData.width;\n      itemData.h = itemData.height;\n      if (linkEl.dataset.pswpType) {\n        itemData.type = linkEl.dataset.pswpType;\n      }\n      const thumbnailEl = element.querySelector('img');\n      if (thumbnailEl) {\n        var _thumbnailEl$getAttri;\n\n        // msrc is URL to placeholder image that's displayed before large image is loaded\n        // by default it's displayed only for the first slide\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\n        itemData.alt = (_thumbnailEl$getAttri = thumbnailEl.getAttribute('alt')) !== null && _thumbnailEl$getAttri !== void 0 ? _thumbnailEl$getAttri : '';\n      }\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\n        itemData.thumbCropped = true;\n      }\n    }\n    return this.applyFilters('domItemData', itemData, element, linkEl);\n  }\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\n\n  lazyLoadData(itemData, index) {\n    return lazyLoadData(itemData, this, index);\n  }\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\n\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\n// some browsers do not paint\n// elements which opacity is set to 0,\n// since we need to pre-render elements for the animation -\n// we set it to the minimum amount\n\nconst MIN_OPACITY = 0.003;\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\n\nclass Opener {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.isClosed = true;\n    this.isOpen = false;\n    this.isClosing = false;\n    this.isOpening = false;\n    /**\r\n     * @private\r\n     * @type {number | false | undefined}\r\n     */\n\n    this._duration = undefined;\n    /** @private */\n\n    this._useAnimation = false;\n    /** @private */\n\n    this._croppedZoom = false;\n    /** @private */\n\n    this._animateRootOpacity = false;\n    /** @private */\n\n    this._animateBgOpacity = false;\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | HTMLImageElement | null | undefined }\r\n     */\n\n    this._placeholder = undefined;\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\n\n    this._opacityElement = undefined;\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\n\n    this._cropContainer1 = undefined;\n    /**\r\n     * @private\r\n     * @type { HTMLElement | null | undefined }\r\n     */\n\n    this._cropContainer2 = undefined;\n    /**\r\n     * @private\r\n     * @type {Bounds | undefined}\r\n     */\n\n    this._thumbBounds = undefined;\n    this._prepareOpen = this._prepareOpen.bind(this); // Override initial zoom and pan position\n\n    pswp.on('firstZoomPan', this._prepareOpen);\n  }\n  open() {\n    this._prepareOpen();\n    this._start();\n  }\n  close() {\n    if (this.isClosed || this.isClosing || this.isOpening) {\n      // if we close during opening animation\n      // for now do nothing,\n      // browsers aren't good at changing the direction of the CSS transition\n      return;\n    }\n    const slide = this.pswp.currSlide;\n    this.isOpen = false;\n    this.isOpening = false;\n    this.isClosing = true;\n    this._duration = this.pswp.options.hideAnimationDuration;\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\n      this._duration = 0;\n    }\n    this._applyStartProps();\n    setTimeout(() => {\n      this._start();\n    }, this._croppedZoom ? 30 : 0);\n  }\n  /** @private */\n\n  _prepareOpen() {\n    this.pswp.off('firstZoomPan', this._prepareOpen);\n    if (!this.isOpening) {\n      const slide = this.pswp.currSlide;\n      this.isOpening = true;\n      this.isClosing = false;\n      this._duration = this.pswp.options.showAnimationDuration;\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\n        this._duration = 0;\n      }\n      this._applyStartProps();\n    }\n  }\n  /** @private */\n\n  _applyStartProps() {\n    const {\n      pswp\n    } = this;\n    const slide = this.pswp.currSlide;\n    const {\n      options\n    } = pswp;\n    if (options.showHideAnimationType === 'fade') {\n      options.showHideOpacity = true;\n      this._thumbBounds = undefined;\n    } else if (options.showHideAnimationType === 'none') {\n      options.showHideOpacity = false;\n      this._duration = 0;\n      this._thumbBounds = undefined;\n    } else if (this.isOpening && pswp._initialThumbBounds) {\n      // Use initial bounds if defined\n      this._thumbBounds = pswp._initialThumbBounds;\n    } else {\n      this._thumbBounds = this.pswp.getThumbBounds();\n    }\n    this._placeholder = slide === null || slide === void 0 ? void 0 : slide.getPlaceholderElement();\n    pswp.animations.stopAll(); // Discard animations when duration is less than 50ms\n\n    this._useAnimation = Boolean(this._duration && this._duration > 50);\n    this._animateZoom = Boolean(this._thumbBounds) && (slide === null || slide === void 0 ? void 0 : slide.content.usePlaceholder()) && (!this.isClosing || !pswp.mainScroll.isShifted());\n    if (!this._animateZoom) {\n      this._animateRootOpacity = true;\n      if (this.isOpening && slide) {\n        slide.zoomAndPanToInitial();\n        slide.applyCurrentZoomPan();\n      }\n    } else {\n      var _options$showHideOpac;\n      this._animateRootOpacity = (_options$showHideOpac = options.showHideOpacity) !== null && _options$showHideOpac !== void 0 ? _options$showHideOpac : false;\n    }\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\n    if (!this._useAnimation) {\n      this._duration = 0;\n      this._animateZoom = false;\n      this._animateBgOpacity = false;\n      this._animateRootOpacity = true;\n      if (this.isOpening) {\n        if (pswp.element) {\n          pswp.element.style.opacity = String(MIN_OPACITY);\n        }\n        pswp.applyBgOpacity(1);\n      }\n      return;\n    }\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\n      var _this$pswp$currSlide;\n\n      // Properties are used when animation from cropped thumbnail\n      this._croppedZoom = true;\n      this._cropContainer1 = this.pswp.container;\n      this._cropContainer2 = (_this$pswp$currSlide = this.pswp.currSlide) === null || _this$pswp$currSlide === void 0 ? void 0 : _this$pswp$currSlide.holderElement;\n      if (pswp.container) {\n        pswp.container.style.overflow = 'hidden';\n        pswp.container.style.width = pswp.viewportSize.x + 'px';\n      }\n    } else {\n      this._croppedZoom = false;\n    }\n    if (this.isOpening) {\n      // Apply styles before opening transition\n      if (this._animateRootOpacity) {\n        if (pswp.element) {\n          pswp.element.style.opacity = String(MIN_OPACITY);\n        }\n        pswp.applyBgOpacity(1);\n      } else {\n        if (this._animateBgOpacity && pswp.bg) {\n          pswp.bg.style.opacity = String(MIN_OPACITY);\n        }\n        if (pswp.element) {\n          pswp.element.style.opacity = '1';\n        }\n      }\n      if (this._animateZoom) {\n        this._setClosedStateZoomPan();\n        if (this._placeholder) {\n          // tell browser that we plan to animate the placeholder\n          this._placeholder.style.willChange = 'transform'; // hide placeholder to allow hiding of\n          // elements that overlap it (such as icons over the thumbnail)\n\n          this._placeholder.style.opacity = String(MIN_OPACITY);\n        }\n      }\n    } else if (this.isClosing) {\n      // hide nearby slides to make sure that\n      // they are not painted during the transition\n      if (pswp.mainScroll.itemHolders[0]) {\n        pswp.mainScroll.itemHolders[0].el.style.display = 'none';\n      }\n      if (pswp.mainScroll.itemHolders[2]) {\n        pswp.mainScroll.itemHolders[2].el.style.display = 'none';\n      }\n      if (this._croppedZoom) {\n        if (pswp.mainScroll.x !== 0) {\n          // shift the main scroller to zero position\n          pswp.mainScroll.resetPosition();\n          pswp.mainScroll.resize();\n        }\n      }\n    }\n  }\n  /** @private */\n\n  _start() {\n    if (this.isOpening && this._useAnimation && this._placeholder && this._placeholder.tagName === 'IMG') {\n      // To ensure smooth animation\n      // we wait till the current slide image placeholder is decoded,\n      // but no longer than 250ms,\n      // and no shorter than 50ms\n      // (just using requestanimationframe is not enough in Firefox,\n      // for some reason)\n      new Promise(resolve => {\n        let decoded = false;\n        let isDelaying = true;\n        decodeImage( /** @type {HTMLImageElement} */\n        this._placeholder).finally(() => {\n          decoded = true;\n          if (!isDelaying) {\n            resolve(true);\n          }\n        });\n        setTimeout(() => {\n          isDelaying = false;\n          if (decoded) {\n            resolve(true);\n          }\n        }, 50);\n        setTimeout(resolve, 250);\n      }).finally(() => this._initiate());\n    } else {\n      this._initiate();\n    }\n  }\n  /** @private */\n\n  _initiate() {\n    var _this$pswp$element, _this$pswp$element2;\n    (_this$pswp$element = this.pswp.element) === null || _this$pswp$element === void 0 || _this$pswp$element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\n    this.pswp.dispatch(this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'); // legacy event\n\n    this.pswp.dispatch( /** @type {'initialZoomIn' | 'initialZoomOut'} */\n    'initialZoom' + (this.isOpening ? 'In' : 'Out'));\n    (_this$pswp$element2 = this.pswp.element) === null || _this$pswp$element2 === void 0 || _this$pswp$element2.classList.toggle('pswp--ui-visible', this.isOpening);\n    if (this.isOpening) {\n      if (this._placeholder) {\n        // unhide the placeholder\n        this._placeholder.style.opacity = '1';\n      }\n      this._animateToOpenState();\n    } else if (this.isClosing) {\n      this._animateToClosedState();\n    }\n    if (!this._useAnimation) {\n      this._onAnimationComplete();\n    }\n  }\n  /** @private */\n\n  _onAnimationComplete() {\n    const {\n      pswp\n    } = this;\n    this.isOpen = this.isOpening;\n    this.isClosed = this.isClosing;\n    this.isOpening = false;\n    this.isClosing = false;\n    pswp.dispatch(this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'); // legacy event\n\n    pswp.dispatch( /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\n    'initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'));\n    if (this.isClosed) {\n      pswp.destroy();\n    } else if (this.isOpen) {\n      var _pswp$currSlide;\n      if (this._animateZoom && pswp.container) {\n        pswp.container.style.overflow = 'visible';\n        pswp.container.style.width = '100%';\n      }\n      (_pswp$currSlide = pswp.currSlide) === null || _pswp$currSlide === void 0 || _pswp$currSlide.applyCurrentZoomPan();\n    }\n  }\n  /** @private */\n\n  _animateToOpenState() {\n    const {\n      pswp\n    } = this;\n    if (this._animateZoom) {\n      if (this._croppedZoom && this._cropContainer1 && this._cropContainer2) {\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\n        this._animateTo(this._cropContainer2, 'transform', 'none');\n      }\n      if (pswp.currSlide) {\n        pswp.currSlide.zoomAndPanToInitial();\n        this._animateTo(pswp.currSlide.container, 'transform', pswp.currSlide.getCurrentTransform());\n      }\n    }\n    if (this._animateBgOpacity && pswp.bg) {\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\n    }\n    if (this._animateRootOpacity && pswp.element) {\n      this._animateTo(pswp.element, 'opacity', '1');\n    }\n  }\n  /** @private */\n\n  _animateToClosedState() {\n    const {\n      pswp\n    } = this;\n    if (this._animateZoom) {\n      this._setClosedStateZoomPan(true);\n    } // do not animate opacity if it's already at 0\n\n    if (this._animateBgOpacity && pswp.bgOpacity > 0.01 && pswp.bg) {\n      this._animateTo(pswp.bg, 'opacity', '0');\n    }\n    if (this._animateRootOpacity && pswp.element) {\n      this._animateTo(pswp.element, 'opacity', '0');\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {boolean} [animate]\r\n   */\n\n  _setClosedStateZoomPan(animate) {\n    if (!this._thumbBounds) return;\n    const {\n      pswp\n    } = this;\n    const {\n      innerRect\n    } = this._thumbBounds;\n    const {\n      currSlide,\n      viewportSize\n    } = pswp;\n    if (this._croppedZoom && innerRect && this._cropContainer1 && this._cropContainer2) {\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\n      const containerTwoPanX = viewportSize.x - innerRect.w;\n      const containerTwoPanY = viewportSize.y - innerRect.h;\n      if (animate) {\n        this._animateTo(this._cropContainer1, 'transform', toTransformString(containerOnePanX, containerOnePanY));\n        this._animateTo(this._cropContainer2, 'transform', toTransformString(containerTwoPanX, containerTwoPanY));\n      } else {\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\n      }\n    }\n    if (currSlide) {\n      equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\n      currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\n      if (animate) {\n        this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\n      } else {\n        currSlide.applyCurrentZoomPan();\n      }\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\n\n  _animateTo(target, prop, propValue) {\n    if (!this._duration) {\n      target.style[prop] = propValue;\n      return;\n    }\n    const {\n      animations\n    } = this.pswp;\n    /** @type {AnimationProps} */\n\n    const animProps = {\n      duration: this._duration,\n      easing: this.pswp.options.easing,\n      onComplete: () => {\n        if (!animations.activeAnimations.length) {\n          this._onAnimationComplete();\n        }\n      },\n      target\n    };\n    animProps[prop] = propValue;\n    animations.startTransition(animProps);\n  }\n}\n\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\n\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\n\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\n\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\n\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\n\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\n\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\n\n/** @typedef {import('./slide/get-thumb-bounds').Bounds} Bounds */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\n\n/** @typedef {{ x: number; y: number; id?: string | number }} Point */\n\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\n\n/** @typedef {SlideData[]} DataSourceArray */\n\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\n\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\n\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\n\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\n\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\n\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\n\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\n\n/** @typedef {Partial<PreparedPhotoSwipeOptions>} PhotoSwipeOptions https://photoswipe.com/options/ */\n\n/**\r\n * @typedef {Object} PreparedPhotoSwipeOptions\r\n *\r\n * @prop {DataSource} [dataSource]\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean} [wheelToZoom]\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding} [padding]\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Point, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} hideAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} showAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} zoomAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean} trapFocus\r\n * Trap focus within PhotoSwipe element while it's open.\r\n *\r\n * @prop {boolean} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} imageClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} bgClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} tapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} doubleTapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipeBase) => Point} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string} [mainClass]\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement} [appendToEl]\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string} [closeTitle]\r\n * Translating\r\n *\r\n * @prop {string} [zoomTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowNextTitle]\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean} [arrowPrev]\r\n * @prop {boolean} [arrowNext]\r\n * @prop {boolean} [zoom]\r\n * @prop {boolean} [close]\r\n * @prop {boolean} [counter]\r\n *\r\n * @prop {string} [arrowPrevSVG]\r\n * @prop {string} [arrowNextSVG]\r\n * @prop {string} [zoomSVG]\r\n * @prop {string} [closeSVG]\r\n * @prop {string} [counterSVG]\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * @prop {string} [arrowNextTitle]\r\n * @prop {string} [zoomTitle]\r\n * @prop {string} [closeTitle]\r\n * @prop {string} [counterTitle]\r\n *\r\n * @prop {ZoomLevelOption} [initialZoomLevel]\r\n * @prop {ZoomLevelOption} [secondaryZoomLevel]\r\n * @prop {ZoomLevelOption} [maxZoomLevel]\r\n *\r\n * @prop {boolean} [mouseMovePan]\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean} [showHideOpacity]\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean} [preloadFirstSlide]\r\n * @prop {ElementProvider} [gallery]\r\n * @prop {string} [gallerySelector]\r\n * @prop {ElementProvider} [children]\r\n * @prop {string} [childSelector]\r\n * @prop {string | false} [thumbSelector]\r\n */\n\n/** @type {PreparedPhotoSwipeOptions} */\n\nconst defaultOptions = {\n  allowPanToNext: true,\n  spacing: 0.1,\n  loop: true,\n  pinchToClose: true,\n  closeOnVerticalDrag: true,\n  hideAnimationDuration: 333,\n  showAnimationDuration: 333,\n  zoomAnimationDuration: 333,\n  escKey: true,\n  arrowKeys: true,\n  trapFocus: true,\n  returnFocus: true,\n  maxWidthToAnimate: 4000,\n  clickToCloseNonZoomable: true,\n  imageClickAction: 'zoom-or-close',\n  bgClickAction: 'close',\n  tapAction: 'toggle-controls',\n  doubleTapAction: 'zoom',\n  indexIndicatorSep: ' / ',\n  preloaderDelay: 2000,\n  bgOpacity: 0.8,\n  index: 0,\n  errorMsg: 'The image cannot be loaded',\n  preload: [1, 2],\n  easing: 'cubic-bezier(.4,0,.22,1)'\n};\n/**\r\n * PhotoSwipe Core\r\n */\n\nclass PhotoSwipe extends PhotoSwipeBase {\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\n  constructor(options) {\n    super();\n    this.options = this._prepareOptions(options || {});\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {Point}\r\n     */\n\n    this.offset = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * @type {Point}\r\n     * @private\r\n     */\n\n    this._prevViewportSize = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {Point}\r\n     */\n\n    this.viewportSize = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * background (backdrop) opacity\r\n     */\n\n    this.bgOpacity = 1;\n    this.currIndex = 0;\n    this.potentialIndex = 0;\n    this.isOpen = false;\n    this.isDestroying = false;\n    this.hasMouse = false;\n    /**\r\n     * @private\r\n     * @type {SlideData}\r\n     */\n\n    this._initialItemData = {};\n    /** @type {Bounds | undefined} */\n\n    this._initialThumbBounds = undefined;\n    /** @type {HTMLDivElement | undefined} */\n\n    this.topBar = undefined;\n    /** @type {HTMLDivElement | undefined} */\n\n    this.element = undefined;\n    /** @type {HTMLDivElement | undefined} */\n\n    this.template = undefined;\n    /** @type {HTMLDivElement | undefined} */\n\n    this.container = undefined;\n    /** @type {HTMLElement | undefined} */\n\n    this.scrollWrap = undefined;\n    /** @type {Slide | undefined} */\n\n    this.currSlide = undefined;\n    this.events = new DOMEvents();\n    this.animations = new Animations();\n    this.mainScroll = new MainScroll(this);\n    this.gestures = new Gestures(this);\n    this.opener = new Opener(this);\n    this.keyboard = new Keyboard(this);\n    this.contentLoader = new ContentLoader(this);\n  }\n  /** @returns {boolean} */\n\n  init() {\n    if (this.isOpen || this.isDestroying) {\n      return false;\n    }\n    this.isOpen = true;\n    this.dispatch('init'); // legacy\n\n    this.dispatch('beforeOpen');\n    this._createMainStructure(); // add classes to the root element of PhotoSwipe\n\n    let rootClasses = 'pswp--open';\n    if (this.gestures.supportsTouch) {\n      rootClasses += ' pswp--touch';\n    }\n    if (this.options.mainClass) {\n      rootClasses += ' ' + this.options.mainClass;\n    }\n    if (this.element) {\n      this.element.className += ' ' + rootClasses;\n    }\n    this.currIndex = this.options.index || 0;\n    this.potentialIndex = this.currIndex;\n    this.dispatch('firstUpdate'); // starting index can be modified here\n    // initialize scroll wheel handler to block the scroll\n\n    this.scrollWheel = new ScrollWheel(this); // sanitize index\n\n    if (Number.isNaN(this.currIndex) || this.currIndex < 0 || this.currIndex >= this.getNumItems()) {\n      this.currIndex = 0;\n    }\n    if (!this.gestures.supportsTouch) {\n      // enable mouse features if no touch support detected\n      this.mouseDetected();\n    } // causes forced synchronous layout\n\n    this.updateSize();\n    this.offset.y = window.pageYOffset;\n    this._initialItemData = this.getItemData(this.currIndex);\n    this.dispatch('gettingData', {\n      index: this.currIndex,\n      data: this._initialItemData,\n      slide: undefined\n    }); // *Layout* - calculate size and position of elements here\n\n    this._initialThumbBounds = this.getThumbBounds();\n    this.dispatch('initialLayout');\n    this.on('openingAnimationEnd', () => {\n      const {\n        itemHolders\n      } = this.mainScroll; // Add content to the previous and next slide\n\n      if (itemHolders[0]) {\n        itemHolders[0].el.style.display = 'block';\n        this.setContent(itemHolders[0], this.currIndex - 1);\n      }\n      if (itemHolders[2]) {\n        itemHolders[2].el.style.display = 'block';\n        this.setContent(itemHolders[2], this.currIndex + 1);\n      }\n      this.appendHeavy();\n      this.contentLoader.updateLazy();\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\n      this.dispatch('bindEvents');\n    }); // set content for center slide (first time)\n\n    if (this.mainScroll.itemHolders[1]) {\n      this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\n    }\n    this.dispatch('change');\n    this.opener.open();\n    this.dispatch('afterInit');\n    return true;\n  }\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   * @returns {number}\r\n   */\n\n  getLoopedIndex(index) {\n    const numSlides = this.getNumItems();\n    if (this.options.loop) {\n      if (index > numSlides - 1) {\n        index -= numSlides;\n      }\n      if (index < 0) {\n        index += numSlides;\n      }\n    }\n    return clamp(index, 0, numSlides - 1);\n  }\n  appendHeavy() {\n    this.mainScroll.itemHolders.forEach(itemHolder => {\n      var _itemHolder$slide;\n      (_itemHolder$slide = itemHolder.slide) === null || _itemHolder$slide === void 0 || _itemHolder$slide.appendHeavy();\n    });\n  }\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\n\n  goTo(index) {\n    this.mainScroll.moveIndexBy(this.getLoopedIndex(index) - this.potentialIndex);\n  }\n  /**\r\n   * Go to the next slide.\r\n   */\n\n  next() {\n    this.goTo(this.potentialIndex + 1);\n  }\n  /**\r\n   * Go to the previous slide.\r\n   */\n\n  prev() {\n    this.goTo(this.potentialIndex - 1);\n  }\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\n\n  zoomTo() {\n    var _this$currSlide;\n    (_this$currSlide = this.currSlide) === null || _this$currSlide === void 0 || _this$currSlide.zoomTo(...arguments);\n  }\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\n\n  toggleZoom() {\n    var _this$currSlide2;\n    (_this$currSlide2 = this.currSlide) === null || _this$currSlide2 === void 0 || _this$currSlide2.toggleZoom();\n  }\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\n\n  close() {\n    if (!this.opener.isOpen || this.isDestroying) {\n      return;\n    }\n    this.isDestroying = true;\n    this.dispatch('close');\n    this.events.removeAll();\n    this.opener.close();\n  }\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\n\n  destroy() {\n    var _this$element;\n    if (!this.isDestroying) {\n      this.options.showHideAnimationType = 'none';\n      this.close();\n      return;\n    }\n    this.dispatch('destroy');\n    this._listeners = {};\n    if (this.scrollWrap) {\n      this.scrollWrap.ontouchmove = null;\n      this.scrollWrap.ontouchend = null;\n    }\n    (_this$element = this.element) === null || _this$element === void 0 || _this$element.remove();\n    this.mainScroll.itemHolders.forEach(itemHolder => {\n      var _itemHolder$slide2;\n      (_itemHolder$slide2 = itemHolder.slide) === null || _itemHolder$slide2 === void 0 || _itemHolder$slide2.destroy();\n    });\n    this.contentLoader.destroy();\n    this.events.removeAll();\n  }\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\n\n  refreshSlideContent(slideIndex) {\n    this.contentLoader.removeByIndex(slideIndex);\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\n      var _this$currSlide$index, _this$currSlide3;\n      let potentialHolderIndex = ((_this$currSlide$index = (_this$currSlide3 = this.currSlide) === null || _this$currSlide3 === void 0 ? void 0 : _this$currSlide3.index) !== null && _this$currSlide$index !== void 0 ? _this$currSlide$index : 0) - 1 + i;\n      if (this.canLoop()) {\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\n      }\n      if (potentialHolderIndex === slideIndex) {\n        // set the new slide content\n        this.setContent(itemHolder, slideIndex, true); // activate the new slide if it's current\n\n        if (i === 1) {\n          var _itemHolder$slide3;\n          this.currSlide = itemHolder.slide;\n          (_itemHolder$slide3 = itemHolder.slide) === null || _itemHolder$slide3 === void 0 || _itemHolder$slide3.setIsActive(true);\n        }\n      }\n    });\n    this.dispatch('change');\n  }\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean} [force] If content should be set even if index wasn't changed\r\n   */\n\n  setContent(holder, index, force) {\n    if (this.canLoop()) {\n      index = this.getLoopedIndex(index);\n    }\n    if (holder.slide) {\n      if (holder.slide.index === index && !force) {\n        // exit if holder already contains this slide\n        // this could be common when just three slides are used\n        return;\n      } // destroy previous slide\n\n      holder.slide.destroy();\n      holder.slide = undefined;\n    } // exit if no loop and index is out of bounds\n\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\n      return;\n    }\n    const itemData = this.getItemData(index);\n    holder.slide = new Slide(itemData, index, this); // set current slide\n\n    if (index === this.currIndex) {\n      this.currSlide = holder.slide;\n    }\n    holder.slide.append(holder.el);\n  }\n  /** @returns {Point} */\n\n  getViewportCenterPoint() {\n    return {\n      x: this.viewportSize.x / 2,\n      y: this.viewportSize.y / 2\n    };\n  }\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean} [force] Update size even if size of viewport was not changed.\r\n   */\n\n  updateSize(force) {\n    // let item;\n    // let itemIndex;\n    if (this.isDestroying) {\n      // exit if PhotoSwipe is closed or closing\n      // (to avoid errors, as resize event might be delayed)\n      return;\n    } //const newWidth = this.scrollWrap.clientWidth;\n    //const newHeight = this.scrollWrap.clientHeight;\n\n    const newViewportSize = getViewportSize(this.options, this);\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\n      // Exit if dimensions were not changed\n      return;\n    } //this._prevViewportSize.x = newWidth;\n    //this._prevViewportSize.y = newHeight;\n\n    equalizePoints(this._prevViewportSize, newViewportSize);\n    this.dispatch('beforeResize');\n    equalizePoints(this.viewportSize, this._prevViewportSize);\n    this._updatePageScrollOffset();\n    this.dispatch('viewportSize'); // Resize slides only after opener animation is finished\n    // and don't re-calculate size on inital size update\n\n    this.mainScroll.resize(this.opener.isOpen);\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\n      this.mouseDetected();\n    }\n    this.dispatch('resize');\n  }\n  /**\r\n   * @param {number} opacity\r\n   */\n\n  applyBgOpacity(opacity) {\n    this.bgOpacity = Math.max(opacity, 0);\n    if (this.bg) {\n      this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\n    }\n  }\n  /**\r\n   * Whether mouse is detected\r\n   */\n\n  mouseDetected() {\n    if (!this.hasMouse) {\n      var _this$element2;\n      this.hasMouse = true;\n      (_this$element2 = this.element) === null || _this$element2 === void 0 || _this$element2.classList.add('pswp--has_mouse');\n    }\n  }\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\n\n  _handlePageResize() {\n    this.updateSize(); // In iOS webview, if element size depends on document size,\n    // it'll be measured incorrectly in resize event\n    //\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\n\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\n      setTimeout(() => {\n        this.updateSize();\n      }, 500);\n    }\n  }\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\n\n  _updatePageScrollOffset() {\n    this.setScrollOffset(0, window.pageYOffset);\n  }\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\n\n  setScrollOffset(x, y) {\n    this.offset.x = x;\n    this.offset.y = y;\n    this.dispatch('updateScrollOffset');\n  }\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\n\n  _createMainStructure() {\n    // root DOM element of PhotoSwipe (.pswp)\n    this.element = createElement('pswp', 'div');\n    this.element.setAttribute('tabindex', '-1');\n    this.element.setAttribute('role', 'dialog'); // template is legacy prop\n\n    this.template = this.element; // Background is added as a separate element,\n    // as animating opacity is faster than animating rgba()\n\n    this.bg = createElement('pswp__bg', 'div', this.element);\n    this.scrollWrap = createElement('pswp__scroll-wrap', 'section', this.element);\n    this.container = createElement('pswp__container', 'div', this.scrollWrap); // aria pattern: carousel\n\n    this.scrollWrap.setAttribute('aria-roledescription', 'carousel');\n    this.container.setAttribute('aria-live', 'off');\n    this.container.setAttribute('id', 'pswp__items');\n    this.mainScroll.appendHolders();\n    this.ui = new UI(this);\n    this.ui.init(); // append to DOM\n\n    (this.options.appendToEl || document.body).appendChild(this.element);\n  }\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   *\r\n   * @returns {Bounds | undefined}\r\n   */\n\n  getThumbBounds() {\n    return getThumbBounds(this.currIndex, this.currSlide ? this.currSlide.data : this._initialItemData, this);\n  }\n  /**\r\n   * If the PhotoSwipe can have continuous loop\r\n   * @returns Boolean\r\n   */\n\n  canLoop() {\n    return this.options.loop && this.getNumItems() > 2;\n  }\n  /**\r\n   * @private\r\n   * @param {PhotoSwipeOptions} options\r\n   * @returns {PreparedPhotoSwipeOptions}\r\n   */\n\n  _prepareOptions(options) {\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\n      options.showHideAnimationType = 'none';\n      options.zoomAnimationDuration = 0;\n    }\n    /** @type {PreparedPhotoSwipeOptions} */\n\n    return {\n      ...defaultOptions,\n      ...options\n    };\n  }\n}\nexport { PhotoSwipe as default };","map":{"version":3,"names":["createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","id","undefined","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","concat","setTransform","style","transform","defaultCSSEasing","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","removeTransitionStyle","decodeImage","img","decode","catch","complete","Promise","resolve","reject","onload","onerror","LOAD_STATE","IDLE","LOADING","LOADED","ERROR","specialKeyUsed","e","button","ctrlKey","metaKey","altKey","shiftKey","getElementsFromOption","option","legacySelector","parent","arguments","length","elements","Element","NodeList","Array","isArray","from","selector","querySelectorAll","isSafari","navigator","vendor","match","supportsPassive","window","addEventListener","Object","defineProperty","get","DOMEvents","constructor","_pool","add","target","type","listener","passive","_toggleListener","remove","removeAll","forEach","poolItem","unbind","skipPool","methodName","types","split","eType","filter","push","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","Number","getPanAreaSize","PanBounds","slide","currZoomLevel","center","update","reset","_updateAxis","dispatch","axis","elSize","paddingProp","data","panAreaSize","correctPan","panOffset","MAX_IMAGE_WIDTH","ZoomLevel","elementSize","fit","fill","vFill","initial","secondary","maxWidth","maxHeight","hRatio","vRatio","_getInitial","_getSecondary","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionName","optionValue","Slide","isActive","currIndex","currentResolution","pan","isFirstSlide","opener","isOpen","content","contentLoader","getContentBySlide","container","holderElement","heavyAppended","bounds","prevDisplayedWidth","prevDisplayedHeight","setIsActive","activate","deactivate","append","transformOrigin","calculateSize","load","updateContentSize","appendHeavy","zoomAndPanToInitial","applyCurrentZoomPan","appendHeavyNearby","mainScroll","isShifted","defaultPrevented","destroy","hasSlide","resize","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","getPlaceholderElement","_this$content$placeho","placeholder","element","zoomTo","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","toggleZoom","zoomAnimationDuration","point","totalPanDistance","getViewportCenterPoint","zoomFactor","panX","panY","isPannable","Boolean","_applyZoomTransform","currSlide","zoom","newResolution","PAN_END_FRICTION","VERTICAL_DRAG_FRICTION","MIN_RATIO_TO_CLOSE","MIN_NEXT_SLIDE_SPEED","project","initialVelocity","decelerationRate","DragHandler","gestures","startPan","start","stopAll","change","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","mainScrollChanged","_panOrMoveMainScroll","end","velocity","indexDiff","mainScrollShiftDiff","getCurrSlideX","currentSlideVisibilityRatio","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","moveTo","newPan","allowPanToNext","currSlideMainScrollX","isLeftToRight","isRightToLeft","wasAtMinPanPosition","wasAtMaxPanPosition","_this$pswp$currSlide$","_this$pswp$currSlide","potentialPan","customFriction","correctedPan","UPPER_ZOOM_FRICTION","LOWER_ZOOM_FRICTION","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_wasOverFitZoomLevel","_startZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","click","originalEvent","targetClassList","classList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","tap","doubleTap","actionName","_this$gestures$pswp$e","actionFullName","call","clickToCloseNonZoomable","toggle","AXIS_SWIPE_HYSTERISIS","DOUBLE_TAP_DELAY","MIN_TAP_DISTANCE","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","PointerEvent","supportsTouch","maxTouchPoints","_intervalTime","_velocityCalculated","isDragging","isZooming","raf","_tapTimer","drag","tapHandler","on","events","scrollWrap","_onClick","bind","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","onPointerMove","onPointerUp","isMousePointer","pointerType","preventDefault","mouseDetected","_preventPointerEventBehaviour","_updatePoints","_clearTapTimer","_calculateDragDirection","_updateStartPoints","Date","_rafStopLoop","_rafRenderLoop","_finishDrag","_updateVelocity","_finishTap","_updatePrevPoints","requestAnimationFrame","time","_getVelocity","indexOf","tapDelay","doubleTapAction","setTimeout","clearTimeout","displacement","cancelAnimationFrame","preventPointerEvent","applyFilters","pointerEvent","pointerIndex","findIndex","ongoingPointer","pointerId","splice","_convertEventPosToPoint","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MAIN_SCROLL_END_FRICTION","MainScroll","slideWidth","_currPositionIndex","_prevPositionIndex","_containerShiftIndex","itemHolders","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","resetPosition","appendHolders","i","setAttribute","display","canBeSwiped","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","updateCurrItem","isMainScroll","currDiff","currDistance","_this$itemHolders$","positionDifference","diffAbs","tempHolder","_itemHolder$slide","shift","setContent","pop","unshift","updateLazy","dragging","newSlideIndexOffset","KeyboardKeyCodesMap","Escape","z","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Tab","getKeyboardEventKey","key","isKeySupported","Keyboard","_wasFocused","trapFocus","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","activeElement","returnFocus","focus","keydownAction","isForward","keyCode","escKey","arrowKeys","template","DEFAULT_EASING","CSSAnimation","props","_props$prop","onFinish","_target","_onComplete","_finished","_onTransitionEnd","_helperTimeout","_finalizeAnimation","removeEventListener","DEFAULT_NATURAL_FREQUENCY","DEFAULT_DAMPING_RATIO","SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","easeFrame","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","_raf","easer","prevTime","animationLoop","Animations","activeAnimations","_start","isSpring","animation","stop","isPanRunning","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","addElementHTML","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","UIElement","_container","elementHTML","html","isButton","toLowerCase","title","ariaLabel","ariaText","innerHTML","onInit","onClick","onclick","appendTo","topBar","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","toggleIndicatorClass","setIndicatorVisibility","visible","updatePreloaderVisibility","_pswp$currSlide","isLoading","_pswp$currSlide2","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","isRegistered","uiElementsData","items","_lastUpdatedZoomLevel","init","sort","a","b","uiElementData","registerElement","_pswp$element","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","potentialZoomLevel","imageClickAction","getBoundsByElement","thumbAreaRect","getBoundingClientRect","left","top","getCroppedBoundsByElement","imageWidth","imageHeight","fillZoomLevel","offsetX","offsetY","innerRect","getThumbBounds","instance","thumbBounds","thumbnail","thumbSelector","matches","querySelector","thumbCropped","PhotoSwipeEvent","details","assign","Eventable","_listeners","_filters","addFilter","fn","priority","_this$_filters$name","_this$_filters$name2","_this$pswp","f1","f2","removeFilter","_len","args","_key","_this$_filters$name3","apply","_this$_listeners$name","_this$pswp2","off","_this$pswp3","_this$_listeners$name2","Placeholder","imageSrc","imgEl","decoding","alt","src","_this$element","parentNode","Content","displayedImageWidth","displayedImageHeight","isAttached","isDecoding","state","removePlaceholder","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderSrc","msrc","placeholderEl","parentElement","prepend","isImageContent","loadImage","_this$data$src","_this$data$alt","imageElement","updateSrcsetSizes","srcset","onLoaded","onError","setSlide","displayError","isError","isInitialSizeUpdate","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","lazyLoad","_this$instance$option","_this$instance$option2","errorMsgEl","errorMsg","supportsDecode","finally","appendImage","MIN_SLIDES_TO_CACHE","lazyLoadData","createContentFromData","zoomLevel","ceil","lazyLoadSlide","getItemData","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","initialIndex","getContentByIndex","addToCache","removeByIndex","indexToRemove","item","removedItem","find","PhotoSwipeBase","_this$options","numItems","dataSource","_getGalleryDOMElements","gallery","_this$options2","dataSourceItem","_domElementToItemData","galleryElement","_this$options3","_this$options4","children","childSelector","linkEl","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","_thumbnailEl$getAttri","currentSrc","getAttribute","pswpCropped","cropped","MIN_OPACITY","Opener","isClosed","isOpening","_duration","_useAnimation","_croppedZoom","_animateRootOpacity","_animateBgOpacity","_placeholder","_opacityElement","_cropContainer1","_cropContainer2","_thumbBounds","_prepareOpen","open","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","showAnimationDuration","showHideAnimationType","showHideOpacity","_initialThumbBounds","_animateZoom","_options$showHideOpac","bg","opacity","overflow","_setClosedStateZoomPan","willChange","decoded","isDelaying","_initiate","_this$pswp$element","_this$pswp$element2","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","defaultOptions","bgClickAction","tapAction","PhotoSwipe","_prepareOptions","_prevViewportSize","isDestroying","hasMouse","_initialItemData","keyboard","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_handlePageResize","_updatePageScrollOffset","goTo","next","prev","_this$currSlide","_this$currSlide2","_itemHolder$slide2","refreshSlideContent","slideIndex","_this$currSlide$index","_this$currSlide3","potentialHolderIndex","_itemHolder$slide3","holder","matchMedia","_this$element2","test","userAgent","setScrollOffset","body"],"sources":["D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\util\\util.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\util\\dom-events.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\util\\viewport-size.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\slide\\pan-bounds.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\slide\\zoom-level.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\slide\\slide.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\gestures\\drag-handler.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\gestures\\zoom-handler.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\gestures\\tap-handler.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\gestures\\gestures.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\main-scroll.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\keyboard.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\util\\css-animation.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\util\\spring-easer.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\util\\spring-animation.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\util\\animations.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\scroll-wheel.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\ui\\ui-element.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\ui\\button-arrow.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\ui\\button-close.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\ui\\button-zoom.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\ui\\loading-indicator.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\ui\\counter-indicator.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\ui\\ui.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\slide\\get-thumb-bounds.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\core\\eventable.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\slide\\placeholder.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\slide\\content.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\slide\\loader.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\core\\base.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\opener.js","D:\\My Work\\DubaiMusic\\dubai-music\\src\\js\\photoswipe.js"],"sourcesContent":["/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName);\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ` scale3d(${scale},${scale},1)`;\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? `${prop} ${duration}ms ${ease || defaultCSSEasing}`\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? `${w}px` : w;\r\n  el.style.height = (typeof h === 'number') ? `${h}px` : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\r\nexport function specialKeyUsed(e) {\r\n  return ('button' in e && e.button === 1) || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n * @returns {boolean}\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\r\n\r\n","// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  /* @ts-ignore */\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document | undefined | null} target\r\n * @prop {string} type\r\n * @prop {EventListenerOrEventListenerObject} listener\r\n * @prop {boolean} [passive]\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type Can be multiple, separated by space.\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @private\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   * @param {boolean} [unbind] Whether the event should be added or removed\r\n   * @param {boolean} [skipPool] Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default DOMEvents;\r\n","/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue = 0;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return Number(paddingValue) || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","import { clamp } from '../util/util.js';\r\nimport { parsePaddingOption } from '../util/viewport-size.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {Record<Axis, number>} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n    this.currZoomLevel = 1;\r\n    this.center = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.max = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.min = /** @type {Point} */ { x: 0, y: 0 };\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By default, it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   * @returns {number}\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\r\n\r\nexport default PanBounds;\r\n","const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n    /** @type { Point | null } */\r\n    this.panAreaSize = null;\r\n    /** @type { Point | null } */\r\n    this.elementSize = null;\r\n    this.fit = 1;\r\n    this.fill = 1;\r\n    this.vFill = 1;\r\n    this.initial = 1;\r\n    this.secondary = 1;\r\n    this.max = 1;\r\n    this.min = 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    /** @type {Point} */\r\n    const elementSize = { x: maxWidth, y: maxHeight };\r\n    this.elementSize = elementSize;\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = panAreaSize.x / elementSize.x;\r\n    const vRatio = panAreaSize.y / elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (\r\n      optionPrefix + 'ZoomLevel'\r\n    );\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @typedef {_SlideData & Record<string, any>} SlideData\r\n * @typedef {Object} _SlideData\r\n * @prop {HTMLElement} [element] thumbnail element\r\n * @prop {string} [src] image URL\r\n * @prop {string} [srcset] image srcset\r\n * @prop {number} [w] image width (deprecated)\r\n * @prop {number} [h] image height (deprecated)\r\n * @prop {number} [width] image width\r\n * @prop {number} [height] image height\r\n * @prop {string} [msrc] placeholder image URL that's displayed before large image is loaded\r\n * @prop {string} [alt] image alt text\r\n * @prop {boolean} [thumbCropped] whether thumbnail is cropped client-side or not\r\n * @prop {string} [html] html content of a slide\r\n * @prop {'image' | 'html' | string} [type] slide type\r\n */\r\n\r\nimport {\r\n  createElement,\r\n  setTransform,\r\n  equalizePoints,\r\n  roundPoint,\r\n  toTransformString,\r\n  clamp,\r\n} from '../util/util.js';\r\n\r\nimport PanBounds from './pan-bounds.js';\r\nimport ZoomLevel from './zoom-level.js';\r\nimport { getPanAreaSize } from '../util/viewport-size.js';\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.pan = { x: 0, y: 0 };\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap', 'div');\r\n    /** @type {HTMLElement | null} */\r\n    this.holderElement = null;\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n    this.heavyAppended = false;\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load(false);\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean} [force] if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** @returns {HTMLImageElement | HTMLDivElement | null | undefined} */\r\n  getPlaceholderElement() {\r\n    return this.content.placeholder?.element;\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {Point} [centerPoint]\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean} [ignoreBounds] Minimum and maximum zoom levels will be ignored.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {Point} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number} [prevZoomLevel] Zoom level before new zoom was applied.\r\n   * @returns {number}\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    if (!prevZoomLevel) {\r\n      prevZoomLevel = this.zoomLevels.initial;\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   * @returns {boolean}\r\n   */\r\n  isPannable() {\r\n    return Boolean(this.width) && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   * @returns {boolean}\r\n   */\r\n  isZoomable() {\r\n    return Boolean(this.width) && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   * @private\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  /** @returns {string} */\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in the highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\r\n\r\nexport default Slide;\r\n","import {\r\n  equalizePoints, roundPoint, clamp\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n * @returns {number}\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = { x: 0, y: 0 };\r\n  }\r\n\r\n  start() {\r\n    if (this.pswp.currSlide) {\r\n      equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    }\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && this.pswp.options.closeOnVerticalDrag\r\n        && (currSlide && currSlide.currZoomLevel <= currSlide.zoomLevels.fit)\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!this.pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        this.pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        if (currSlide) {\r\n          roundPoint(currSlide.pan);\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { velocity } = this.gestures;\r\n    const { mainScroll, currSlide } = this.pswp;\r\n    let indexDiff = 0;\r\n\r\n    this.pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is visible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / this.pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched,\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if ((currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.max)\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { velocity } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (this.pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Increasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        this.pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = this.pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    this.pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && this.pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          this.pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @returns {boolean}\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = this.pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta || !currSlide) {\r\n      return false;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (this.pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   * @returns {number}\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - (this.pswp.currSlide?.bounds.center.y ?? 0)) / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number} [customFriction] (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DragHandler;\r\n","import {\r\n  equalizePoints, getDistanceBetween, clamp, pointsEqual\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startPan = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startZoomPoint = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._zoomPoint = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._wasOverFitZoomLevel = false;\r\n    /** @private */\r\n    this._startZoomLevel = 1;\r\n  }\r\n\r\n  start() {\r\n    const { currSlide } = this.gestures.pswp;\r\n    if (currSlide) {\r\n      this._startZoomLevel = currSlide.currZoomLevel;\r\n      equalizePoints(this._startPan, currSlide.pan);\r\n    }\r\n\r\n    this.gestures.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    if ((!currSlide || currSlide.currZoomLevel < currSlide.zoomLevels.initial)\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   * @returns {number}\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean} [ignoreGesture]\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide?.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === 0) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({ x: 0, y: 0 }, currSlide.pan);\r\n    let destinationPan = equalizePoints({ x: 0, y: 0 }, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    const panNeedsChange = !pointsEqual(destinationPan, initialPan);\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default ZoomHandler;\r\n","/**\r\n * @template {string} T\r\n * @template {string} P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n * @returns {boolean}\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide?.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide?.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element?.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TapHandler;\r\n","import {\r\n  equalizePoints, pointsEqual, getDistanceBetween\r\n} from '../util/util.js';\r\n\r\nimport DragHandler from './drag-handler.js';\r\nimport ZoomHandler from './zoom-handler.js';\r\nimport TapHandler from './tap-handler.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y' | null} */\r\n    this.dragAxis = null;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = { x: 0, y: 0 }; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = { x: 0, y: 0 }; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.prevP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.velocity = { x: 0, y: 0 };\r\n\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._lastStartP1 = { x: 0, y: 0 };\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._intervalP1 = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]}\r\n     * @private\r\n     */\r\n    this._ongoingPointers = [];\r\n    /** @private */\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    /** @private */\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @private */\r\n    this._intervalTime = 0;\r\n    /** @private */\r\n    this._velocityCalculated = false;\r\n    this.isMultitouch = false;\r\n    this.isDragging = false;\r\n    this.isZooming = false;\r\n    /** @type {number | null} */\r\n    this.raf = null;\r\n    /** @type {NodeJS.Timeout | null}\r\n     * @private\r\n     */\r\n    this._tapTimer = null;\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(\r\n        pswp.scrollWrap,\r\n        'click',\r\n        /** @type EventListener */(this._onClick.bind(this))\r\n      );\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        if (pswp.scrollWrap) {\r\n          pswp.scrollWrap.ontouchmove = () => {};\r\n          pswp.scrollWrap.ontouchend = () => {};\r\n        }\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(\r\n      pswp.scrollWrap,\r\n      pref + down,\r\n      /** @type EventListener */(this.onPointerDown.bind(this))\r\n    );\r\n    events.add(window, pref + 'move', /** @type EventListener */(this.onPointerMove.bind(this)));\r\n    events.add(window, pref + up, /** @type EventListener */(this.onPointerUp.bind(this)));\r\n    if (cancelEvent) {\r\n      events.add(\r\n        pswp.scrollWrap,\r\n        cancelEvent,\r\n        /** @type EventListener */(this.onPointerUp.bind(this))\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    const isMousePointer = e.type === 'mousedown' || e.pointerType === 'mouse';\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e, 'down');\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    this._preventPointerEventBehaviour(e, 'move');\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @private\r\n   * @param {boolean} [force]\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   * @returns {number}\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _preventPointerEventBehaviour(e, pointerType) {\r\n    const preventPointerEvent = this.pswp.applyFilters('preventPointerEvent', true, e, pointerType);\r\n    if (preventPointerEvent) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPointer) => {\r\n        return ongoingPointer.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, { x: 0, y: 0 }));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** update points that were used during previous rAF tick\r\n   * @private\r\n   */\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  /** update points at the start of gesture\r\n   * @private\r\n   */\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  /** @private */\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   * @returns {Point}\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gestures;\r\n","import {\r\n  setTransform,\r\n  createElement,\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n    this.slideWidth = 0;\r\n    /** @private */\r\n    this._currPositionIndex = 0;\r\n    /** @private */\r\n    this._prevPositionIndex = 0;\r\n    /** @private */\r\n    this._containerShiftIndex = -1;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = [];\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean} [resizeSlides] Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', 'div', this.pswp.container);\r\n      el.setAttribute('role', 'group');\r\n      el.setAttribute('aria-roledescription', 'slide');\r\n      el.setAttribute('aria-hidden', 'true');\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   * @returns {boolean}\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean} [animate]\r\n   * @param {number} [velocityX]\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    return Boolean(diff);\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   * @returns {number}\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   * @returns {boolean}\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    /** @type {ItemHolder | undefined} */\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n\r\n      // If slides are changed by 3 screens or more - clean up previous slides\r\n      this.itemHolders.forEach((itemHolder) => {\r\n        itemHolder.slide?.destroy();\r\n        itemHolder.slide = undefined;\r\n      });\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        if (tempHolder) {\r\n          this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n          this._containerShiftIndex++;\r\n\r\n          setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n        }\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        if (tempHolder) {\r\n          this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n          this._containerShiftIndex--;\r\n\r\n          setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1]?.slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    if (pswp.currSlide) {\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean} [dragging]\r\n   */\r\n  moveTo(x, dragging) {\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      let newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      const delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n\r\n    if (this.pswp.container) {\r\n      setTransform(this.pswp.container, x);\r\n    }\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging: dragging ?? false });\r\n  }\r\n}\r\n\r\nexport default MainScroll;\r\n","import { specialKeyUsed } from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\nconst KeyboardKeyCodesMap = {\r\n  Escape: 27,\r\n  z: 90,\r\n  ArrowLeft: 37,\r\n  ArrowUp: 38,\r\n  ArrowRight: 39,\r\n  ArrowDown: 40,\r\n  Tab: 9,\r\n};\r\n\r\n/**\r\n * @template {keyof KeyboardKeyCodesMap} T\r\n * @param {T} key\r\n * @param {boolean} isKeySupported\r\n * @returns {T | number | undefined}\r\n */\r\nconst getKeyboardEventKey = (key, isKeySupported) => {\r\n  return isKeySupported ? key : KeyboardKeyCodesMap[key];\r\n};\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Helps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    /** @private */\r\n    this._wasFocused = false;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      if (pswp.options.trapFocus) {\r\n        // Dialog was likely opened by keyboard if initial point is not defined\r\n        if (!pswp.options.initialPointerPos) {\r\n          // focus causes layout,\r\n          // which causes lag during the animation,\r\n          // that's why we delay it until the opener transition ends\r\n          this._focusRoot();\r\n        }\r\n\r\n        pswp.events.add(\r\n          document,\r\n          'focusin',\r\n          /** @type EventListener */(this._onFocusIn.bind(this))\r\n        );\r\n      }\r\n\r\n      pswp.events.add(document, 'keydown', /** @type EventListener */(this._onKeyDown.bind(this)));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** @private */\r\n  _focusRoot() {\r\n    if (!this._wasFocused && this.pswp.element) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe> | undefined} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y' | undefined} */\r\n    let axis;\r\n    let isForward = false;\r\n    const isKeySupported = 'key' in e;\r\n\r\n    switch (isKeySupported ? e.key : e.keyCode) {\r\n      case getKeyboardEventKey('Escape', isKeySupported):\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case getKeyboardEventKey('z', isKeySupported):\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case getKeyboardEventKey('ArrowLeft', isKeySupported):\r\n        axis = 'x';\r\n        break;\r\n      case getKeyboardEventKey('ArrowUp', isKeySupported):\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('ArrowRight', isKeySupported):\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case getKeyboardEventKey('ArrowDown', isKeySupported):\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('Tab', isKeySupported):\r\n        this._focusRoot();\r\n        break;\r\n      default:\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      // @ts-ignore\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @private\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (template\r\n        && document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Keyboard;\r\n","import { setTransitionStyle, removeTransitionStyle } from './util.js';\r\n\r\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/** @typedef {Object} DefaultCssAnimationProps\r\n *\r\n * @prop {HTMLElement} target\r\n * @prop {number} [duration]\r\n * @prop {string} [easing]\r\n * @prop {string} [transform]\r\n * @prop {string} [opacity]\r\n * */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultCssAnimationProps} CssAnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish = () => {},\r\n      duration = 333,\r\n      easing = DEFAULT_EASING,\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop] ?? '';\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n    /** @private */\r\n    this._finished = false;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transition won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element property was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default CSSAnimation;\r\n","const DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} [dampingRatio]\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} [naturalFrequency]\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    this._dampedFrequency = this._naturalFrequency;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency *= Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\r\n\r\nexport default SpringEaser;\r\n","import SpringEaser from './spring-easer.js';\r\n\r\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/**\r\n * @typedef {Object} DefaultSpringAnimationProps\r\n *\r\n * @prop {number} start\r\n * @prop {number} end\r\n * @prop {number} velocity\r\n * @prop {number} [dampingRatio]\r\n * @prop {number} [naturalFrequency]\r\n * @prop {(end: number) => void} onUpdate\r\n */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultSpringAnimationProps} SpringAnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    this._raf = 0;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish = () => {},\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = 0;\r\n  }\r\n}\r\n\r\nexport default SpringAnimation;\r\n","import CSSAnimation from './css-animation.js';\r\nimport SpringAnimation from './spring-animation.js';\r\n\r\n/** @typedef {import('./css-animation.js').CssAnimationProps} CssAnimationProps */\r\n/** @typedef {import('./spring-animation.js').SpringAnimationProps} SpringAnimationProps */\r\n\r\n/** @typedef {Object} SharedAnimationProps\r\n * @prop {string} [name]\r\n * @prop {boolean} [isPan]\r\n * @prop {boolean} [isMainScroll]\r\n * @prop {VoidFunction} [onComplete]\r\n * @prop {VoidFunction} [onFinish]\r\n */\r\n\r\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n/** @typedef {SpringAnimationProps | CssAnimationProps} AnimationProps */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {AnimationProps} props\r\n   * @param {boolean} [isSpring]\r\n   * @returns {Animation}\r\n   */\r\n  _start(props, isSpring) {\r\n    const animation = isSpring\r\n      ? new SpringAnimation(/** @type SpringAnimationProps */ (props))\r\n      : new CSSAnimation(/** @type CssAnimationProps */ (props));\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Animations;\r\n","/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', /** @type EventListener */(this._onWheel.bind(this)));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScrollWheel;\r\n","import { createElement } from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean} [isCustomSVG]\r\n * @prop {string} inner\r\n * @prop {string} [outlineID]\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string} [className]\r\n * @prop {UIElementMarkup} [html]\r\n * @prop {boolean} [isButton]\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string} [title]\r\n * @prop {string} [ariaLabel]\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number} [order]\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n * @returns {string}\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    /** @type {HTMLElement} */\r\n    const element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      const ariaText = ariaLabel || title;\r\n      if (ariaText) {\r\n        element.setAttribute('aria-label', ariaText);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          // @ts-ignore\r\n          pswp[data.onClick]();\r\n        } else if (typeof data.onClick === 'function') {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    /** @type {HTMLElement | undefined} root element by default */\r\n    let container = pswp.element;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      }\r\n    }\r\n\r\n    container?.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\r\n\r\nexport default UIElement;\r\n","/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean} [isNextButton]\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  // TODO: this should point to a unique id for this instance\r\n  element.setAttribute('aria-controls', 'pswp__items');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\r\n\r\nexport default closeButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\r\n\r\nexport default zoomButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean | undefined} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout | null} */\r\n    let delayTimeout = null;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList.toggle('pswp__preloader--' + className, add);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide?.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(Boolean(pswp.currSlide?.content.isLoading()));\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    if (pswp.ui) {\r\n      pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n    }\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\r\n","import UIElement from './ui-element.js';\r\nimport { arrowPrev, arrowNext } from './button-arrow.js';\r\nimport closeButton from './button-close.js';\r\nimport zoomButton from './button-zoom.js';\r\nimport { loadingIndicator } from './loading-indicator.js';\r\nimport { counterIndicator } from './counter-indicator.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default, it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList.toggle('pswp--zoomed-in', isZoomedIn);\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [];\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = () => {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {number | undefined}\r\n     */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element?.classList.toggle('pswp--one-slide', pswp.getNumItems() === 1);\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   *\r\n   * @private\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n\r\n    if (this.pswp.opener.isClosing || !template || !currSlide) {\r\n      return;\r\n    }\r\n\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\r\n\r\nexport default UI;\r\n","/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @returns Bounds\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n * @returns Bounds\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nexport function getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  /** @type {Bounds | undefined} */\r\n  let thumbBounds;\r\n  /** @type {HTMLElement | null | undefined} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : /** @type {HTMLElement | null} */ (element.querySelector(thumbSelector));\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w || 0,\r\n        itemData.height || itemData.h || 0\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\r\n","/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thumbnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thumbnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n * @prop {(preventPointerEvent: boolean, event: PointerEvent, pointerType: string) => boolean} preventPointerEvent\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    this.defaultPrevented = false;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe | undefined} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions | undefined} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name]?.push({ fn, priority });\r\n    this._filters[name]?.sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    this.pswp?.addFilter(name, fn, priority);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    this._filters[name]?.forEach((filter) => {\r\n      // @ts-expect-error\r\n      args[0] = filter.fn.apply(this, args);\r\n    });\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name]?.push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    this.pswp?.on(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    this.pswp?.off(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    this._listeners[name]?.forEach((listener) => {\r\n      listener.call(this, event);\r\n    });\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : 'div',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      const imgEl = /** @type {HTMLImageElement} */ (this.element);\r\n      imgEl.decoding = 'async';\r\n      imgEl.alt = '';\r\n      imgEl.src = imageSrc;\r\n      imgEl.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element?.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","import { createElement, isSafari, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {Placeholder | undefined} */\r\n    this.placeholder = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.slide = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.isDecoding = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = undefined;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content', 'div');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    if (!this.isImageContent()\r\n      || !this.element\r\n      || this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src ?? '';\r\n    imageElement.alt = this.data.alt ?? '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide && this.element) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch(\r\n      'contentResize',\r\n      { content: this, width, height }).defaultPrevented\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch(\r\n          'imageSizeChange',\r\n          { slide: this.slide, width, height, content: this }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\r\n      return;\r\n    }\r\n\r\n    const image = /** @type HTMLImageElement */ (this.element);\r\n    const sizesWidth = this.instance.applyFilters(\r\n      'srcsetSizesWidth',\r\n      this.displayedImageWidth,\r\n      this\r\n    );\r\n\r\n    if (\r\n      !image.dataset.largestUsedSize\r\n      || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)\r\n    ) {\r\n      image.sizes = sizesWidth + 'px';\r\n      image.dataset.largestUsedSize = String(sizesWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = undefined;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = undefined;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\r\n      errorMsgEl.innerText = this.instance.options?.errorMsg ?? '';\r\n      errorMsgEl = /** @type {HTMLDivElement} */ (this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      ));\r\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached || !this.element) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.slide && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented\r\n      || !this.slide) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n      // add image to slide when it becomes active,\r\n      // even if it's not finished decoding\r\n      this.appendImage();\r\n    } else if (this.isError()) {\r\n      this.load(false, true); // try to reload\r\n    }\r\n\r\n    if (this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  const content = instance.createContentFromData(itemData, index);\r\n  /** @type {ZoomLevel | undefined} */\r\n  let zoomLevel;\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset, and we need to define sizes\r\n  if (options) {\r\n    zoomLevel = new ZoomLevel(options, itemData, -1);\r\n\r\n    let viewportSize;\r\n    if (instance.pswp) {\r\n      viewportSize = instance.pswp.viewportSize;\r\n    } else {\r\n      viewportSize = getViewportSize(options, instance);\r\n    }\r\n\r\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n    zoomLevel.update(content.width, content.height, panAreaSize);\r\n  }\r\n\r\n  content.lazyLoad();\r\n\r\n  if (zoomLevel) {\r\n    content.setDisplayedSize(\r\n      Math.ceil(content.width * zoomLevel.initial),\r\n      Math.ceil(content.height * zoomLevel.initial)\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} initialIndex\r\n   */\r\n  loadSlideByIndex(initialIndex) {\r\n    const index = this.pswp.getLoopedIndex(initialIndex);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      this.addToCache(content);\r\n    }\r\n\r\n    // assign slide to content\r\n    content.setSlide(slide);\r\n\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = [];\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import Eventable from './eventable.js';\r\nimport { getElementsFromOption } from '../util/util.js';\r\nimport Content from '../slide/content.js';\r\nimport { lazyLoadData } from '../slide/loader.js';\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems = 0;\r\n    const dataSource = this.options?.dataSource;\r\n\r\n    if (dataSource && 'length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\r\n  getItemData(index) {\r\n    const dataSource = this.options?.dataSource;\r\n    /** @type {SlideData | HTMLElement} */\r\n    let dataSourceItem = {};\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options?.children || this.options?.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (\r\n      element.tagName === 'A'\r\n        ? element\r\n        : element.querySelector('a')\r\n    );\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\r\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt') ?? '';\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n","import {\r\n  setTransform,\r\n  equalizePoints,\r\n  decodeImage,\r\n  toTransformString\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this.isOpen = false;\r\n    this.isClosing = false;\r\n    this.isOpening = false;\r\n    /**\r\n     * @private\r\n     * @type {number | false | undefined}\r\n     */\r\n    this._duration = undefined;\r\n    /** @private */\r\n    this._useAnimation = false;\r\n    /** @private */\r\n    this._croppedZoom = false;\r\n    /** @private */\r\n    this._animateRootOpacity = false;\r\n    /** @private */\r\n    this._animateBgOpacity = false;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | HTMLImageElement | null | undefined }\r\n     */\r\n    this._placeholder = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._opacityElement = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._cropContainer1 = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLElement | null | undefined }\r\n     */\r\n    this._cropContainer2 = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Bounds | undefined}\r\n     */\r\n    this._thumbBounds = undefined;\r\n\r\n\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n  }\r\n\r\n  /** @private */\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = undefined;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = undefined;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide?.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = Boolean(this._duration && this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && slide?.content.usePlaceholder()\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening && slide) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity ?? false;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide?.holderElement;\r\n\r\n      if (pswp.container) {\r\n        pswp.container.style.overflow = 'hidden';\r\n        pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n      }\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity && pswp.bg) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = '1';\r\n        }\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      if (pswp.mainScroll.itemHolders[0]) {\r\n        pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      }\r\n      if (pswp.mainScroll.itemHolders[2]) {\r\n        pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n      }\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve(true);\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve(true);\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _initiate() {\r\n    this.pswp.element?.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element?.classList.toggle('pswp--ui-visible', this.isOpening);\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom && pswp.container) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide?.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom && this._cropContainer1 && this._cropContainer2) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      if (pswp.currSlide) {\r\n        pswp.currSlide.zoomAndPanToInitial();\r\n        this._animateTo(\r\n          pswp.currSlide.container,\r\n          'transform',\r\n          pswp.currSlide.getCurrentTransform()\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this._animateBgOpacity && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    // do not animate opacity if it's already at 0\r\n    if (this._animateBgOpacity && pswp.bgOpacity > 0.01 && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {boolean} [animate]\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom && innerRect && this._cropContainer1 && this._cropContainer2) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    if (currSlide) {\r\n      equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n      currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n      if (animate) {\r\n        this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n      } else {\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\r\n\r\nexport default Opener;\r\n","import {\r\n  createElement,\r\n  equalizePoints,\r\n  pointsEqual,\r\n  clamp,\r\n} from './util/util.js';\r\n\r\nimport DOMEvents from './util/dom-events.js';\r\nimport Slide from './slide/slide.js';\r\nimport Gestures from './gestures/gestures.js';\r\nimport MainScroll from './main-scroll.js';\r\n\r\nimport Keyboard from './keyboard.js';\r\nimport Animations from './util/animations.js';\r\nimport ScrollWheel from './scroll-wheel.js';\r\nimport UI from './ui/ui.js';\r\nimport { getViewportSize } from './util/viewport-size.js';\r\nimport { getThumbBounds } from './slide/get-thumb-bounds.js';\r\nimport PhotoSwipeBase from './core/base.js';\r\nimport Opener from './opener.js';\r\nimport ContentLoader from './slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/** @typedef {import('./slide/get-thumb-bounds').Bounds} Bounds */\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x: number; y: number; id?: string | number }} Point */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\r\n\r\n/** @typedef {Partial<PreparedPhotoSwipeOptions>} PhotoSwipeOptions https://photoswipe.com/options/ */\r\n/**\r\n * @typedef {Object} PreparedPhotoSwipeOptions\r\n *\r\n * @prop {DataSource} [dataSource]\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean} [wheelToZoom]\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding} [padding]\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Point, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} hideAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} showAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} zoomAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean} trapFocus\r\n * Trap focus within PhotoSwipe element while it's open.\r\n *\r\n * @prop {boolean} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} imageClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} bgClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} tapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} doubleTapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipeBase) => Point} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string} [mainClass]\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement} [appendToEl]\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string} [closeTitle]\r\n * Translating\r\n *\r\n * @prop {string} [zoomTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowNextTitle]\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean} [arrowPrev]\r\n * @prop {boolean} [arrowNext]\r\n * @prop {boolean} [zoom]\r\n * @prop {boolean} [close]\r\n * @prop {boolean} [counter]\r\n *\r\n * @prop {string} [arrowPrevSVG]\r\n * @prop {string} [arrowNextSVG]\r\n * @prop {string} [zoomSVG]\r\n * @prop {string} [closeSVG]\r\n * @prop {string} [counterSVG]\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * @prop {string} [arrowNextTitle]\r\n * @prop {string} [zoomTitle]\r\n * @prop {string} [closeTitle]\r\n * @prop {string} [counterTitle]\r\n *\r\n * @prop {ZoomLevelOption} [initialZoomLevel]\r\n * @prop {ZoomLevelOption} [secondaryZoomLevel]\r\n * @prop {ZoomLevelOption} [maxZoomLevel]\r\n *\r\n * @prop {boolean} [mouseMovePan]\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean} [showHideOpacity]\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean} [preloadFirstSlide]\r\n * @prop {ElementProvider} [gallery]\r\n * @prop {string} [gallerySelector]\r\n * @prop {ElementProvider} [children]\r\n * @prop {string} [childSelector]\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PreparedPhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  trapFocus: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.options = this._prepareOptions(options || {});\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.offset = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * @type {Point}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.viewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     */\r\n    this.bgOpacity = 1;\r\n    this.currIndex = 0;\r\n    this.potentialIndex = 0;\r\n    this.isOpen = false;\r\n    this.isDestroying = false;\r\n    this.hasMouse = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {SlideData}\r\n     */\r\n    this._initialItemData = {};\r\n    /** @type {Bounds | undefined} */\r\n    this._initialThumbBounds = undefined;\r\n\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.topBar = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.template = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.container = undefined;\r\n    /** @type {HTMLElement | undefined} */\r\n    this.scrollWrap = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.currSlide = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n    this.animations = new Animations();\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  /** @returns {boolean} */\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return false;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    if (this.element) {\r\n      this.element.className += ' ' + rootClasses;\r\n    }\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      const { itemHolders } = this.mainScroll;\r\n\r\n      // Add content to the previous and next slide\r\n      if (itemHolders[0]) {\r\n        itemHolders[0].el.style.display = 'block';\r\n        this.setContent(itemHolders[0], this.currIndex - 1);\r\n      }\r\n      if (itemHolders[2]) {\r\n        itemHolders[2].el.style.display = 'block';\r\n        this.setContent(itemHolders[2], this.currIndex + 1);\r\n      }\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    if (this.mainScroll.itemHolders[1]) {\r\n      this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    }\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   * @returns {number}\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    return clamp(index, 0, numSlides - 1);\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.appendHeavy();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide?.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide?.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this._listeners = {};\r\n\r\n    if (this.scrollWrap) {\r\n      this.scrollWrap.ontouchmove = null;\r\n      this.scrollWrap.ontouchend = null;\r\n    }\r\n\r\n    this.element?.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.destroy();\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = (this.currSlide?.index ?? 0) - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide?.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean} [force] If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = undefined;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  /** @returns {Point} */\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean} [force] Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    if (this.bg) {\r\n      this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element?.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp', 'div');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', 'div', this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', 'section', this.element);\r\n    this.container = createElement('pswp__container', 'div', this.scrollWrap);\r\n\r\n    // aria pattern: carousel\r\n    this.scrollWrap.setAttribute('aria-roledescription', 'carousel');\r\n    this.container.setAttribute('aria-live', 'off');\r\n    this.container.setAttribute('id', 'pswp__items');\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   *\r\n   * @returns {Bounds | undefined}\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continuous loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PhotoSwipeOptions} options\r\n   * @returns {PreparedPhotoSwipeOptions}\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PreparedPhotoSwipeOptions} */\r\n    return {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n\r\nexport default PhotoSwipe;\r\n"],"mappings":"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ChF,MAAT,IAAmBgF,QAAQ,CAAClF,CAA5B,IAAiC,CAHI,CAAvC;IAKD;EACF;EAED,OAAOslB,QAAQ,CAAC9N,YAAT,CAAsB,aAAtB,EAAqC+N,WAArC,EAAkDrgB,QAAlD,EAA4DC,KAA5D,CAAP;AACD;;AC9GD;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM0gB,eAAN,CA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}