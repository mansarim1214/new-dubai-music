{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport areConnectedThroughProperties from './utils/areconnectedthroughproperties.js';\nimport Watchdog from './watchdog.js';\nimport { throttle, cloneDeepWith, isElement } from 'lodash-es';\n/**\n * A watchdog for CKEditor 5 editors.\n *\n * See the {@glink features/watchdog Watchdog feature guide} to learn the rationale behind it and\n * how to use it.\n */\nexport default class EditorWatchdog extends Watchdog {\n  /**\n   * @param Editor The editor class.\n   * @param watchdogConfig The watchdog plugin configuration.\n   */\n  constructor(Editor, watchdogConfig = {}) {\n    super(watchdogConfig);\n    /**\n     * The current editor instance.\n     */\n    this._editor = null;\n    /**\n     * A promise associated with the life cycle of the editor (creation or destruction processes).\n     *\n     * It is used to prevent the initialization of the editor if the previous instance has not been destroyed yet,\n     * and conversely, to prevent the destruction of the editor if it has not been initialized.\n     */\n    this._lifecyclePromise = null;\n    /**\n     * Specifies whether the editor was initialized using document data (`true`) or HTML elements (`false`).\n     */\n    this._initUsingData = true;\n    /**\n     * The latest record of the editor editable elements. Used to restart the editor.\n     */\n    this._editables = {};\n    // this._editorClass = Editor;\n    this._throttledSave = throttle(this._save.bind(this), typeof watchdogConfig.saveInterval === 'number' ? watchdogConfig.saveInterval : 5000);\n    // Set default creator and destructor functions:\n    if (Editor) {\n      this._creator = (elementOrData, config) => Editor.create(elementOrData, config);\n    }\n    this._destructor = editor => editor.destroy();\n  }\n  /**\n   * The current editor instance.\n   */\n  get editor() {\n    return this._editor;\n  }\n  /**\n   * @internal\n   */\n  get _item() {\n    return this._editor;\n  }\n  /**\n   * Sets the function that is responsible for the editor creation.\n   * It expects a function that should return a promise.\n   *\n   * ```ts\n   * watchdog.setCreator( ( element, config ) => ClassicEditor.create( element, config ) );\n   * ```\n   */\n  setCreator(creator) {\n    this._creator = creator;\n  }\n  /**\n   * Sets the function that is responsible for the editor destruction.\n   * Overrides the default destruction function, which destroys only the editor instance.\n   * It expects a function that should return a promise or `undefined`.\n   *\n   * ```ts\n   * watchdog.setDestructor( editor => {\n   * \t// Do something before the editor is destroyed.\n   *\n   * \treturn editor\n   * \t\t.destroy()\n   * \t\t.then( () => {\n   * \t\t\t// Do something after the editor is destroyed.\n   * \t\t} );\n   * } );\n   * ```\n   */\n  setDestructor(destructor) {\n    this._destructor = destructor;\n  }\n  /**\n   * Restarts the editor instance. This method is called whenever an editor error occurs. It fires the `restart` event and changes\n   * the state to `initializing`.\n   *\n   * @fires restart\n   */\n  _restart() {\n    return Promise.resolve().then(() => {\n      this.state = 'initializing';\n      this._fire('stateChange');\n      return this._destroy();\n    }).catch(err => {\n      console.error('An error happened during the editor destroying.', err);\n    }).then(() => {\n      // Pre-process some data from the original editor config.\n      // Our goal here is to make sure that the restarted editor will be reinitialized with correct set of roots.\n      // We are not interested in any data set in config or in `.create()` first parameter. It will be replaced anyway.\n      // But we need to set them correctly to make sure that proper roots are created.\n      //\n      // Since a different set of roots will be created, `lazyRoots` and `rootsAttributes` properties must be managed too.\n      // Keys are root names, values are ''. Used when the editor was initialized by setting the first parameter to document data.\n      const existingRoots = {};\n      // Keeps lazy roots. They may be different when compared to initial config if some of the roots were loaded.\n      const lazyRoots = [];\n      // Roots attributes from the old config. Will be referred when setting new attributes.\n      const oldRootsAttributes = this._config.rootsAttributes || {};\n      // New attributes to be set. Is filled only for roots that still exist in the document.\n      const rootsAttributes = {};\n      // Traverse through the roots saved when the editor crashed and set up the discussed values.\n      for (const [rootName, rootData] of Object.entries(this._data.roots)) {\n        if (rootData.isLoaded) {\n          existingRoots[rootName] = '';\n          rootsAttributes[rootName] = oldRootsAttributes[rootName] || {};\n        } else {\n          lazyRoots.push(rootName);\n        }\n      }\n      const updatedConfig = {\n        ...this._config,\n        extraPlugins: this._config.extraPlugins || [],\n        lazyRoots,\n        rootsAttributes,\n        _watchdogInitialData: this._data\n      };\n      // Delete `initialData` as it is not needed. Data will be set by the watchdog based on `_watchdogInitialData`.\n      // First parameter of the editor `.create()` will be used to set up initial roots.\n      delete updatedConfig.initialData;\n      updatedConfig.extraPlugins.push(EditorWatchdogInitPlugin);\n      if (this._initUsingData) {\n        return this.create(existingRoots, updatedConfig, updatedConfig.context);\n      } else {\n        // Set correct editables to make sure that proper roots are created and linked with DOM elements.\n        // No need to set initial data, as it would be discarded anyway.\n        //\n        // If one element was initially set in `elementOrData`, then use that original element to restart the editor.\n        // This is for compatibility purposes with single-root editor types.\n        if (isElement(this._elementOrData)) {\n          return this.create(this._elementOrData, updatedConfig, updatedConfig.context);\n        } else {\n          return this.create(this._editables, updatedConfig, updatedConfig.context);\n        }\n      }\n    }).then(() => {\n      this._fire('restart');\n    });\n  }\n  /**\n   * Creates the editor instance and keeps it running, using the defined creator and destructor.\n   *\n   * @param elementOrData The editor source element or the editor data.\n   * @param config The editor configuration.\n   * @param context A context for the editor.\n   */\n  create(elementOrData = this._elementOrData, config = this._config, context) {\n    this._lifecyclePromise = Promise.resolve(this._lifecyclePromise).then(() => {\n      super._startErrorHandling();\n      this._elementOrData = elementOrData;\n      // Use document data in the first parameter of the editor `.create()` call only if it was used like this originally.\n      // Use document data if a string or object with strings was passed.\n      this._initUsingData = typeof elementOrData == 'string' || Object.keys(elementOrData).length > 0 && typeof Object.values(elementOrData)[0] == 'string';\n      // Clone configuration because it might be shared within multiple watchdog instances. Otherwise,\n      // when an error occurs in one of these editors, the watchdog will restart all of them.\n      this._config = this._cloneEditorConfiguration(config) || {};\n      this._config.context = context;\n      return this._creator(elementOrData, this._config);\n    }).then(editor => {\n      this._editor = editor;\n      editor.model.document.on('change:data', this._throttledSave);\n      this._lastDocumentVersion = editor.model.document.version;\n      this._data = this._getData();\n      if (!this._initUsingData) {\n        this._editables = this._getEditables();\n      }\n      this.state = 'ready';\n      this._fire('stateChange');\n    }).finally(() => {\n      this._lifecyclePromise = null;\n    });\n    return this._lifecyclePromise;\n  }\n  /**\n   * Destroys the watchdog and the current editor instance. It fires the callback\n   * registered in {@link #setDestructor `setDestructor()`} and uses it to destroy the editor instance.\n   * It also sets the state to `destroyed`.\n   */\n  destroy() {\n    this._lifecyclePromise = Promise.resolve(this._lifecyclePromise).then(() => {\n      this.state = 'destroyed';\n      this._fire('stateChange');\n      super.destroy();\n      return this._destroy();\n    }).finally(() => {\n      this._lifecyclePromise = null;\n    });\n    return this._lifecyclePromise;\n  }\n  _destroy() {\n    return Promise.resolve().then(() => {\n      this._stopErrorHandling();\n      this._throttledSave.cancel();\n      const editor = this._editor;\n      this._editor = null;\n      // Remove the `change:data` listener before destroying the editor.\n      // Incorrectly written plugins may trigger firing `change:data` events during the editor destruction phase\n      // causing the watchdog to call `editor.getData()` when some parts of editor are already destroyed.\n      editor.model.document.off('change:data', this._throttledSave);\n      return this._destructor(editor);\n    });\n  }\n  /**\n   * Saves the editor data, so it can be restored after the crash even if the data cannot be fetched at\n   * the moment of the crash.\n   */\n  _save() {\n    const version = this._editor.model.document.version;\n    try {\n      this._data = this._getData();\n      if (!this._initUsingData) {\n        this._editables = this._getEditables();\n      }\n      this._lastDocumentVersion = version;\n    } catch (err) {\n      console.error(err, 'An error happened during restoring editor data. ' + 'Editor will be restored from the previously saved data.');\n    }\n  }\n  /**\n   * @internal\n   */\n  _setExcludedProperties(props) {\n    this._excludedProps = props;\n  }\n  /**\n   * Gets all data that is required to reinitialize editor instance.\n   */\n  _getData() {\n    const editor = this._editor;\n    const roots = editor.model.document.roots.filter(root => root.isAttached() && root.rootName != '$graveyard');\n    const {\n      plugins\n    } = editor;\n    // `as any` to avoid linking from external private repo.\n    const commentsRepository = plugins.has('CommentsRepository') && plugins.get('CommentsRepository');\n    const trackChanges = plugins.has('TrackChanges') && plugins.get('TrackChanges');\n    const data = {\n      roots: {},\n      markers: {},\n      commentThreads: JSON.stringify([]),\n      suggestions: JSON.stringify([])\n    };\n    roots.forEach(root => {\n      data.roots[root.rootName] = {\n        content: JSON.stringify(Array.from(root.getChildren())),\n        attributes: JSON.stringify(Array.from(root.getAttributes())),\n        isLoaded: root._isLoaded\n      };\n    });\n    for (const marker of editor.model.markers) {\n      if (!marker._affectsData) {\n        continue;\n      }\n      data.markers[marker.name] = {\n        rangeJSON: marker.getRange().toJSON(),\n        usingOperation: marker._managedUsingOperations,\n        affectsData: marker._affectsData\n      };\n    }\n    if (commentsRepository) {\n      data.commentThreads = JSON.stringify(commentsRepository.getCommentThreads({\n        toJSON: true,\n        skipNotAttached: true\n      }));\n    }\n    if (trackChanges) {\n      data.suggestions = JSON.stringify(trackChanges.getSuggestions({\n        toJSON: true,\n        skipNotAttached: true\n      }));\n    }\n    return data;\n  }\n  /**\n   * For each attached model root, returns its HTML editable element (if available).\n   */\n  _getEditables() {\n    const editables = {};\n    for (const rootName of this.editor.model.document.getRootNames()) {\n      const editable = this.editor.ui.getEditableElement(rootName);\n      if (editable) {\n        editables[rootName] = editable;\n      }\n    }\n    return editables;\n  }\n  /**\n   * Traverses the error context and the current editor to find out whether these structures are connected\n   * to each other via properties.\n   *\n   * @internal\n   */\n  _isErrorComingFromThisItem(error) {\n    return areConnectedThroughProperties(this._editor, error.context, this._excludedProps);\n  }\n  /**\n   * Clones the editor configuration.\n   */\n  _cloneEditorConfiguration(config) {\n    return cloneDeepWith(config, (value, key) => {\n      // Leave DOM references.\n      if (isElement(value)) {\n        return value;\n      }\n      if (key === 'context') {\n        return value;\n      }\n    });\n  }\n}\n/**\n * Internal plugin that is used to stop the default editor initialization and restoring the editor state\n * based on the `editor.config._watchdogInitialData` data.\n */\nclass EditorWatchdogInitPlugin {\n  constructor(editor) {\n    this.editor = editor;\n    this._data = editor.config.get('_watchdogInitialData');\n  }\n  /**\n   * @inheritDoc\n   */\n  init() {\n    // Stops the default editor initialization and use the saved data to restore the editor state.\n    // Some of data could not be initialize as a config properties. It is important to keep the data\n    // in the same form as it was before the restarting.\n    this.editor.data.on('init', evt => {\n      evt.stop();\n      this.editor.model.enqueueChange({\n        isUndoable: false\n      }, writer => {\n        this._restoreCollaborationData();\n        this._restoreEditorData(writer);\n      });\n      this.editor.data.fire('ready');\n      // Keep priority `'high' - 1` to be sure that RTC initialization will be first.\n    }, {\n      priority: 1000 - 1\n    });\n  }\n  /**\n   * Creates a model node (element or text) based on provided JSON.\n   */\n  _createNode(writer, jsonNode) {\n    if ('name' in jsonNode) {\n      // If child has name property, it is an Element.\n      const element = writer.createElement(jsonNode.name, jsonNode.attributes);\n      if (jsonNode.children) {\n        for (const child of jsonNode.children) {\n          element._appendChild(this._createNode(writer, child));\n        }\n      }\n      return element;\n    } else {\n      // Otherwise, it is a Text node.\n      return writer.createText(jsonNode.data, jsonNode.attributes);\n    }\n  }\n  /**\n   * Restores the editor by setting the document data, roots attributes and markers.\n   */\n  _restoreEditorData(writer) {\n    const editor = this.editor;\n    Object.entries(this._data.roots).forEach(([rootName, {\n      content,\n      attributes\n    }]) => {\n      const parsedNodes = JSON.parse(content);\n      const parsedAttributes = JSON.parse(attributes);\n      const rootElement = editor.model.document.getRoot(rootName);\n      for (const [key, value] of parsedAttributes) {\n        writer.setAttribute(key, value, rootElement);\n      }\n      for (const child of parsedNodes) {\n        const node = this._createNode(writer, child);\n        writer.insert(node, rootElement, 'end');\n      }\n    });\n    Object.entries(this._data.markers).forEach(([markerName, markerOptions]) => {\n      const {\n        document\n      } = editor.model;\n      const {\n        rangeJSON: {\n          start,\n          end\n        },\n        ...options\n      } = markerOptions;\n      const root = document.getRoot(start.root);\n      const startPosition = writer.createPositionFromPath(root, start.path, start.stickiness);\n      const endPosition = writer.createPositionFromPath(root, end.path, end.stickiness);\n      const range = writer.createRange(startPosition, endPosition);\n      writer.addMarker(markerName, {\n        range,\n        ...options\n      });\n    });\n  }\n  /**\n   * Restores the editor collaboration data - comment threads and suggestions.\n   */\n  _restoreCollaborationData() {\n    // `as any` to avoid linking from external private repo.\n    const parsedCommentThreads = JSON.parse(this._data.commentThreads);\n    const parsedSuggestions = JSON.parse(this._data.suggestions);\n    parsedCommentThreads.forEach(commentThreadData => {\n      const channelId = this.editor.config.get('collaboration.channelId');\n      const commentsRepository = this.editor.plugins.get('CommentsRepository');\n      if (commentsRepository.hasCommentThread(commentThreadData.threadId)) {\n        const commentThread = commentsRepository.getCommentThread(commentThreadData.threadId);\n        commentThread.remove();\n      }\n      commentsRepository.addCommentThread({\n        channelId,\n        ...commentThreadData\n      });\n    });\n    parsedSuggestions.forEach(suggestionData => {\n      const trackChangesEditing = this.editor.plugins.get('TrackChangesEditing');\n      if (trackChangesEditing.hasSuggestion(suggestionData.id)) {\n        const suggestion = trackChangesEditing.getSuggestion(suggestionData.id);\n        suggestion.attributes = suggestionData.attributes;\n      } else {\n        trackChangesEditing.addSuggestionData(suggestionData);\n      }\n    });\n  }\n}","map":{"version":3,"names":["areConnectedThroughProperties","Watchdog","throttle","cloneDeepWith","isElement","EditorWatchdog","constructor","Editor","watchdogConfig","_editor","_lifecyclePromise","_initUsingData","_editables","_throttledSave","_save","bind","saveInterval","_creator","elementOrData","config","create","_destructor","editor","destroy","_item","setCreator","creator","setDestructor","destructor","_restart","Promise","resolve","then","state","_fire","_destroy","catch","err","console","error","existingRoots","lazyRoots","oldRootsAttributes","_config","rootsAttributes","rootName","rootData","Object","entries","_data","roots","isLoaded","push","updatedConfig","extraPlugins","_watchdogInitialData","initialData","EditorWatchdogInitPlugin","context","_elementOrData","_startErrorHandling","keys","length","values","_cloneEditorConfiguration","model","document","on","_lastDocumentVersion","version","_getData","_getEditables","finally","_stopErrorHandling","cancel","off","_setExcludedProperties","props","_excludedProps","filter","root","isAttached","plugins","commentsRepository","has","get","trackChanges","data","markers","commentThreads","JSON","stringify","suggestions","forEach","content","Array","from","getChildren","attributes","getAttributes","_isLoaded","marker","_affectsData","name","rangeJSON","getRange","toJSON","usingOperation","_managedUsingOperations","affectsData","getCommentThreads","skipNotAttached","getSuggestions","editables","getRootNames","editable","ui","getEditableElement","_isErrorComingFromThisItem","value","key","init","evt","stop","enqueueChange","isUndoable","writer","_restoreCollaborationData","_restoreEditorData","fire","priority","_createNode","jsonNode","element","createElement","children","child","_appendChild","createText","parsedNodes","parse","parsedAttributes","rootElement","getRoot","setAttribute","node","insert","markerName","markerOptions","start","end","options","startPosition","createPositionFromPath","path","stickiness","endPosition","range","createRange","addMarker","parsedCommentThreads","parsedSuggestions","commentThreadData","channelId","hasCommentThread","threadId","commentThread","getCommentThread","remove","addCommentThread","suggestionData","trackChangesEditing","hasSuggestion","id","suggestion","getSuggestion","addSuggestionData"],"sources":["D:/My Work/DubaiMusic/dubai-music/node_modules/@ckeditor/ckeditor5-watchdog/src/editorwatchdog.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport areConnectedThroughProperties from './utils/areconnectedthroughproperties.js';\nimport Watchdog from './watchdog.js';\nimport { throttle, cloneDeepWith, isElement } from 'lodash-es';\n/**\n * A watchdog for CKEditor 5 editors.\n *\n * See the {@glink features/watchdog Watchdog feature guide} to learn the rationale behind it and\n * how to use it.\n */\nexport default class EditorWatchdog extends Watchdog {\n    /**\n     * @param Editor The editor class.\n     * @param watchdogConfig The watchdog plugin configuration.\n     */\n    constructor(Editor, watchdogConfig = {}) {\n        super(watchdogConfig);\n        /**\n         * The current editor instance.\n         */\n        this._editor = null;\n        /**\n         * A promise associated with the life cycle of the editor (creation or destruction processes).\n         *\n         * It is used to prevent the initialization of the editor if the previous instance has not been destroyed yet,\n         * and conversely, to prevent the destruction of the editor if it has not been initialized.\n         */\n        this._lifecyclePromise = null;\n        /**\n         * Specifies whether the editor was initialized using document data (`true`) or HTML elements (`false`).\n         */\n        this._initUsingData = true;\n        /**\n         * The latest record of the editor editable elements. Used to restart the editor.\n         */\n        this._editables = {};\n        // this._editorClass = Editor;\n        this._throttledSave = throttle(this._save.bind(this), typeof watchdogConfig.saveInterval === 'number' ? watchdogConfig.saveInterval : 5000);\n        // Set default creator and destructor functions:\n        if (Editor) {\n            this._creator = ((elementOrData, config) => Editor.create(elementOrData, config));\n        }\n        this._destructor = editor => editor.destroy();\n    }\n    /**\n     * The current editor instance.\n     */\n    get editor() {\n        return this._editor;\n    }\n    /**\n     * @internal\n     */\n    get _item() {\n        return this._editor;\n    }\n    /**\n     * Sets the function that is responsible for the editor creation.\n     * It expects a function that should return a promise.\n     *\n     * ```ts\n     * watchdog.setCreator( ( element, config ) => ClassicEditor.create( element, config ) );\n     * ```\n     */\n    setCreator(creator) {\n        this._creator = creator;\n    }\n    /**\n     * Sets the function that is responsible for the editor destruction.\n     * Overrides the default destruction function, which destroys only the editor instance.\n     * It expects a function that should return a promise or `undefined`.\n     *\n     * ```ts\n     * watchdog.setDestructor( editor => {\n     * \t// Do something before the editor is destroyed.\n     *\n     * \treturn editor\n     * \t\t.destroy()\n     * \t\t.then( () => {\n     * \t\t\t// Do something after the editor is destroyed.\n     * \t\t} );\n     * } );\n     * ```\n     */\n    setDestructor(destructor) {\n        this._destructor = destructor;\n    }\n    /**\n     * Restarts the editor instance. This method is called whenever an editor error occurs. It fires the `restart` event and changes\n     * the state to `initializing`.\n     *\n     * @fires restart\n     */\n    _restart() {\n        return Promise.resolve()\n            .then(() => {\n            this.state = 'initializing';\n            this._fire('stateChange');\n            return this._destroy();\n        })\n            .catch(err => {\n            console.error('An error happened during the editor destroying.', err);\n        })\n            .then(() => {\n            // Pre-process some data from the original editor config.\n            // Our goal here is to make sure that the restarted editor will be reinitialized with correct set of roots.\n            // We are not interested in any data set in config or in `.create()` first parameter. It will be replaced anyway.\n            // But we need to set them correctly to make sure that proper roots are created.\n            //\n            // Since a different set of roots will be created, `lazyRoots` and `rootsAttributes` properties must be managed too.\n            // Keys are root names, values are ''. Used when the editor was initialized by setting the first parameter to document data.\n            const existingRoots = {};\n            // Keeps lazy roots. They may be different when compared to initial config if some of the roots were loaded.\n            const lazyRoots = [];\n            // Roots attributes from the old config. Will be referred when setting new attributes.\n            const oldRootsAttributes = this._config.rootsAttributes || {};\n            // New attributes to be set. Is filled only for roots that still exist in the document.\n            const rootsAttributes = {};\n            // Traverse through the roots saved when the editor crashed and set up the discussed values.\n            for (const [rootName, rootData] of Object.entries(this._data.roots)) {\n                if (rootData.isLoaded) {\n                    existingRoots[rootName] = '';\n                    rootsAttributes[rootName] = oldRootsAttributes[rootName] || {};\n                }\n                else {\n                    lazyRoots.push(rootName);\n                }\n            }\n            const updatedConfig = {\n                ...this._config,\n                extraPlugins: this._config.extraPlugins || [],\n                lazyRoots,\n                rootsAttributes,\n                _watchdogInitialData: this._data\n            };\n            // Delete `initialData` as it is not needed. Data will be set by the watchdog based on `_watchdogInitialData`.\n            // First parameter of the editor `.create()` will be used to set up initial roots.\n            delete updatedConfig.initialData;\n            updatedConfig.extraPlugins.push(EditorWatchdogInitPlugin);\n            if (this._initUsingData) {\n                return this.create(existingRoots, updatedConfig, updatedConfig.context);\n            }\n            else {\n                // Set correct editables to make sure that proper roots are created and linked with DOM elements.\n                // No need to set initial data, as it would be discarded anyway.\n                //\n                // If one element was initially set in `elementOrData`, then use that original element to restart the editor.\n                // This is for compatibility purposes with single-root editor types.\n                if (isElement(this._elementOrData)) {\n                    return this.create(this._elementOrData, updatedConfig, updatedConfig.context);\n                }\n                else {\n                    return this.create(this._editables, updatedConfig, updatedConfig.context);\n                }\n            }\n        })\n            .then(() => {\n            this._fire('restart');\n        });\n    }\n    /**\n     * Creates the editor instance and keeps it running, using the defined creator and destructor.\n     *\n     * @param elementOrData The editor source element or the editor data.\n     * @param config The editor configuration.\n     * @param context A context for the editor.\n     */\n    create(elementOrData = this._elementOrData, config = this._config, context) {\n        this._lifecyclePromise = Promise.resolve(this._lifecyclePromise)\n            .then(() => {\n            super._startErrorHandling();\n            this._elementOrData = elementOrData;\n            // Use document data in the first parameter of the editor `.create()` call only if it was used like this originally.\n            // Use document data if a string or object with strings was passed.\n            this._initUsingData = typeof elementOrData == 'string' ||\n                (Object.keys(elementOrData).length > 0 && typeof Object.values(elementOrData)[0] == 'string');\n            // Clone configuration because it might be shared within multiple watchdog instances. Otherwise,\n            // when an error occurs in one of these editors, the watchdog will restart all of them.\n            this._config = this._cloneEditorConfiguration(config) || {};\n            this._config.context = context;\n            return this._creator(elementOrData, this._config);\n        })\n            .then(editor => {\n            this._editor = editor;\n            editor.model.document.on('change:data', this._throttledSave);\n            this._lastDocumentVersion = editor.model.document.version;\n            this._data = this._getData();\n            if (!this._initUsingData) {\n                this._editables = this._getEditables();\n            }\n            this.state = 'ready';\n            this._fire('stateChange');\n        }).finally(() => {\n            this._lifecyclePromise = null;\n        });\n        return this._lifecyclePromise;\n    }\n    /**\n     * Destroys the watchdog and the current editor instance. It fires the callback\n     * registered in {@link #setDestructor `setDestructor()`} and uses it to destroy the editor instance.\n     * It also sets the state to `destroyed`.\n     */\n    destroy() {\n        this._lifecyclePromise = Promise.resolve(this._lifecyclePromise)\n            .then(() => {\n            this.state = 'destroyed';\n            this._fire('stateChange');\n            super.destroy();\n            return this._destroy();\n        }).finally(() => {\n            this._lifecyclePromise = null;\n        });\n        return this._lifecyclePromise;\n    }\n    _destroy() {\n        return Promise.resolve()\n            .then(() => {\n            this._stopErrorHandling();\n            this._throttledSave.cancel();\n            const editor = this._editor;\n            this._editor = null;\n            // Remove the `change:data` listener before destroying the editor.\n            // Incorrectly written plugins may trigger firing `change:data` events during the editor destruction phase\n            // causing the watchdog to call `editor.getData()` when some parts of editor are already destroyed.\n            editor.model.document.off('change:data', this._throttledSave);\n            return this._destructor(editor);\n        });\n    }\n    /**\n     * Saves the editor data, so it can be restored after the crash even if the data cannot be fetched at\n     * the moment of the crash.\n     */\n    _save() {\n        const version = this._editor.model.document.version;\n        try {\n            this._data = this._getData();\n            if (!this._initUsingData) {\n                this._editables = this._getEditables();\n            }\n            this._lastDocumentVersion = version;\n        }\n        catch (err) {\n            console.error(err, 'An error happened during restoring editor data. ' +\n                'Editor will be restored from the previously saved data.');\n        }\n    }\n    /**\n     * @internal\n     */\n    _setExcludedProperties(props) {\n        this._excludedProps = props;\n    }\n    /**\n     * Gets all data that is required to reinitialize editor instance.\n     */\n    _getData() {\n        const editor = this._editor;\n        const roots = editor.model.document.roots.filter(root => root.isAttached() && root.rootName != '$graveyard');\n        const { plugins } = editor;\n        // `as any` to avoid linking from external private repo.\n        const commentsRepository = plugins.has('CommentsRepository') && plugins.get('CommentsRepository');\n        const trackChanges = plugins.has('TrackChanges') && plugins.get('TrackChanges');\n        const data = {\n            roots: {},\n            markers: {},\n            commentThreads: JSON.stringify([]),\n            suggestions: JSON.stringify([])\n        };\n        roots.forEach(root => {\n            data.roots[root.rootName] = {\n                content: JSON.stringify(Array.from(root.getChildren())),\n                attributes: JSON.stringify(Array.from(root.getAttributes())),\n                isLoaded: root._isLoaded\n            };\n        });\n        for (const marker of editor.model.markers) {\n            if (!marker._affectsData) {\n                continue;\n            }\n            data.markers[marker.name] = {\n                rangeJSON: marker.getRange().toJSON(),\n                usingOperation: marker._managedUsingOperations,\n                affectsData: marker._affectsData\n            };\n        }\n        if (commentsRepository) {\n            data.commentThreads = JSON.stringify(commentsRepository.getCommentThreads({ toJSON: true, skipNotAttached: true }));\n        }\n        if (trackChanges) {\n            data.suggestions = JSON.stringify(trackChanges.getSuggestions({ toJSON: true, skipNotAttached: true }));\n        }\n        return data;\n    }\n    /**\n     * For each attached model root, returns its HTML editable element (if available).\n     */\n    _getEditables() {\n        const editables = {};\n        for (const rootName of this.editor.model.document.getRootNames()) {\n            const editable = this.editor.ui.getEditableElement(rootName);\n            if (editable) {\n                editables[rootName] = editable;\n            }\n        }\n        return editables;\n    }\n    /**\n     * Traverses the error context and the current editor to find out whether these structures are connected\n     * to each other via properties.\n     *\n     * @internal\n     */\n    _isErrorComingFromThisItem(error) {\n        return areConnectedThroughProperties(this._editor, error.context, this._excludedProps);\n    }\n    /**\n     * Clones the editor configuration.\n     */\n    _cloneEditorConfiguration(config) {\n        return cloneDeepWith(config, (value, key) => {\n            // Leave DOM references.\n            if (isElement(value)) {\n                return value;\n            }\n            if (key === 'context') {\n                return value;\n            }\n        });\n    }\n}\n/**\n * Internal plugin that is used to stop the default editor initialization and restoring the editor state\n * based on the `editor.config._watchdogInitialData` data.\n */\nclass EditorWatchdogInitPlugin {\n    constructor(editor) {\n        this.editor = editor;\n        this._data = editor.config.get('_watchdogInitialData');\n    }\n    /**\n     * @inheritDoc\n     */\n    init() {\n        // Stops the default editor initialization and use the saved data to restore the editor state.\n        // Some of data could not be initialize as a config properties. It is important to keep the data\n        // in the same form as it was before the restarting.\n        this.editor.data.on('init', evt => {\n            evt.stop();\n            this.editor.model.enqueueChange({ isUndoable: false }, writer => {\n                this._restoreCollaborationData();\n                this._restoreEditorData(writer);\n            });\n            this.editor.data.fire('ready');\n            // Keep priority `'high' - 1` to be sure that RTC initialization will be first.\n        }, { priority: 1000 - 1 });\n    }\n    /**\n     * Creates a model node (element or text) based on provided JSON.\n     */\n    _createNode(writer, jsonNode) {\n        if ('name' in jsonNode) {\n            // If child has name property, it is an Element.\n            const element = writer.createElement(jsonNode.name, jsonNode.attributes);\n            if (jsonNode.children) {\n                for (const child of jsonNode.children) {\n                    element._appendChild(this._createNode(writer, child));\n                }\n            }\n            return element;\n        }\n        else {\n            // Otherwise, it is a Text node.\n            return writer.createText(jsonNode.data, jsonNode.attributes);\n        }\n    }\n    /**\n     * Restores the editor by setting the document data, roots attributes and markers.\n     */\n    _restoreEditorData(writer) {\n        const editor = this.editor;\n        Object.entries(this._data.roots).forEach(([rootName, { content, attributes }]) => {\n            const parsedNodes = JSON.parse(content);\n            const parsedAttributes = JSON.parse(attributes);\n            const rootElement = editor.model.document.getRoot(rootName);\n            for (const [key, value] of parsedAttributes) {\n                writer.setAttribute(key, value, rootElement);\n            }\n            for (const child of parsedNodes) {\n                const node = this._createNode(writer, child);\n                writer.insert(node, rootElement, 'end');\n            }\n        });\n        Object.entries(this._data.markers).forEach(([markerName, markerOptions]) => {\n            const { document } = editor.model;\n            const { rangeJSON: { start, end }, ...options } = markerOptions;\n            const root = document.getRoot(start.root);\n            const startPosition = writer.createPositionFromPath(root, start.path, start.stickiness);\n            const endPosition = writer.createPositionFromPath(root, end.path, end.stickiness);\n            const range = writer.createRange(startPosition, endPosition);\n            writer.addMarker(markerName, {\n                range,\n                ...options\n            });\n        });\n    }\n    /**\n     * Restores the editor collaboration data - comment threads and suggestions.\n     */\n    _restoreCollaborationData() {\n        // `as any` to avoid linking from external private repo.\n        const parsedCommentThreads = JSON.parse(this._data.commentThreads);\n        const parsedSuggestions = JSON.parse(this._data.suggestions);\n        parsedCommentThreads.forEach(commentThreadData => {\n            const channelId = this.editor.config.get('collaboration.channelId');\n            const commentsRepository = this.editor.plugins.get('CommentsRepository');\n            if (commentsRepository.hasCommentThread(commentThreadData.threadId)) {\n                const commentThread = commentsRepository.getCommentThread(commentThreadData.threadId);\n                commentThread.remove();\n            }\n            commentsRepository.addCommentThread({ channelId, ...commentThreadData });\n        });\n        parsedSuggestions.forEach(suggestionData => {\n            const trackChangesEditing = this.editor.plugins.get('TrackChangesEditing');\n            if (trackChangesEditing.hasSuggestion(suggestionData.id)) {\n                const suggestion = trackChangesEditing.getSuggestion(suggestionData.id);\n                suggestion.attributes = suggestionData.attributes;\n            }\n            else {\n                trackChangesEditing.addSuggestionData(suggestionData);\n            }\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}