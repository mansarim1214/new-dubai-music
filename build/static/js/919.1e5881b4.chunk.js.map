{"version":3,"file":"static/js/919.1e5881b4.chunk.js","mappings":"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","sources":["components/View/Venues.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { gsap } from \"gsap\";\r\nimport { Draggable } from \"gsap/Draggable\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { BsFillGeoAltFill } from \"react-icons/bs\";\r\nimport Preloader from './Preloader'; \r\nimport { BsChevronCompactRight, BsChevronCompactLeft } from \"react-icons/bs\";\r\n\r\n\r\ngsap.registerPlugin(Draggable);\r\n\r\nconst Venues = () => {\r\n  const [venues, setVenues] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const carouselRefs = useRef([]);\r\n\r\n  const isMobile = () => window.innerWidth <= 500;\r\n\r\n  useEffect(() => {\r\n    const fetchVenues = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `${process.env.REACT_APP_API_URL}/api/venues`\r\n        );\r\n        // Filter to only include published venues\r\n        const publishedVenues = response.data.filter(\r\n          (venue) => venue.status === \"published\"\r\n        );\r\n        setVenues(publishedVenues); // Set state to filtered venues\r\n      } catch (error) {\r\n        console.error(\"Error fetching venues:\", error);\r\n      }finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchVenues();\r\n  }, []);\r\n\r\n  // Helper function to shuffle an array\r\n  const shuffleArray = (array) => {\r\n    return array\r\n      .map((item) => ({ item, sort: Math.random() }))\r\n      .sort((a, b) => a.sort - b.sort)\r\n      .map(({ item }) => item);\r\n  };\r\n\r\n  const categoryOrder = [\r\n    \"Hot Picks\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n    \"Sunday\",\r\n  ];\r\n\r\n  // Function to group venues by category and shuffle the venues in each category\r\n  const groupVenuesByCategory = () => {\r\n    const groupedVenues = {};\r\n\r\n    venues.forEach((venue) => {\r\n      if (!groupedVenues[venue.category]) {\r\n        groupedVenues[venue.category] = [];\r\n      }\r\n      groupedVenues[venue.category].push(venue);\r\n    });\r\n\r\n    const orderedGroupedVenues = {};\r\n    categoryOrder.forEach((category) => {\r\n      if (groupedVenues[category]) {\r\n        orderedGroupedVenues[category] = shuffleArray(groupedVenues[category]);\r\n      }\r\n    });\r\n\r\n    return orderedGroupedVenues;\r\n  };\r\n\r\n  const groupedVenues = groupVenuesByCategory();\r\n\r\n\r\n\r\n  // Carousel Setting\r\n  const scrollCarousel = (direction, index) => {\r\n    const carousel = carouselRefs.current[index];\r\n    if (carousel) {\r\n      const item = carousel.querySelector(\".venueImage\");\r\n      const itemWidth = item ? item.clientWidth : 0;\r\n      const scrollAmount = itemWidth * 3;\r\n\r\n      let newScrollPosition = carousel.scrollLeft + scrollAmount * direction;\r\n      newScrollPosition = Math.max(\r\n        0,\r\n        Math.min(newScrollPosition, carousel.scrollWidth - carousel.clientWidth)\r\n      );\r\n\r\n      gsap.to(carousel, {\r\n        scrollLeft: newScrollPosition,\r\n        duration: 0.5,\r\n        ease: \"power2.out\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isMobile()) {\r\n      carouselRefs.current.forEach((carousel) => {\r\n        if (carousel) {\r\n          gsap.killTweensOf(carousel);\r\n\r\n          Draggable.create(carousel, {\r\n            type: \"x\",\r\n            bounds: {\r\n              minX: -carousel.scrollWidth + carousel.clientWidth,\r\n              maxX: 0,\r\n            },\r\n            inertia: true,\r\n            throwProps: true,\r\n            edgeResistance: 0.65,\r\n            onThrowUpdate: () => {\r\n              gsap.to(carousel, { x: carousel._gsap.x, ease: \"power2.out\" });\r\n            },\r\n            snap: {\r\n              x: (value) => Math.round(value / 16.67) * 200,\r\n            },\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }, [groupedVenues]);\r\n\r\n  if (loading) {\r\n    return <Preloader />; // Show Preloader while loading data\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"bg-custom\">\r\n     \r\n\r\n      <div className=\"container-fluid p-0\">\r\n        {Object.keys(groupedVenues).map((category, index) => {\r\n          const carousel = carouselRefs.current[index];\r\n          const isScrollable =\r\n            carousel && carousel.scrollWidth > carousel.clientWidth;\r\n\r\n          return (\r\n            <div key={category} className=\"category-wrapper\">\r\n              <div className=\"div mb-2\">\r\n                <h2 className=\"my-2 fav-title\">{category}</h2>\r\n                <hr />\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <div className=\"col p-relative\">\r\n                  {isScrollable && (\r\n                    <button\r\n                      className=\"arrow left react-multiple-carousel__arrow react-multiple-carousel__arrow--left\"\r\n                      onClick={() => scrollCarousel(-1, index)}\r\n                    >\r\n                      <BsChevronCompactLeft />\r\n                    </button>\r\n                  )}\r\n                  <div\r\n                    className=\"venueCarousel\"\r\n                    ref={(el) => (carouselRefs.current[index] = el)}\r\n                    style={{\r\n                      display: \"flex\",\r\n                      overflow: \"hidden\",\r\n                      width: \"100%\",\r\n                    }}\r\n                  >\r\n                    {groupedVenues[category].map((venue) => (\r\n                      <div\r\n                        key={venue._id}\r\n                        className=\"venueImage\"\r\n                        style={{ flex: \"0 0 16.67%\", padding: \"0 5px\" }}\r\n                      >\r\n                        <Link to={`/venuedetail/${venue._id}`}>\r\n                          <div className=\"artistImage\">\r\n                            {venue.featuredImage && (\r\n                              <img\r\n                                src={`${process.env.REACT_APP_API_URL}/${venue.featuredImage}`}\r\n                                alt={venue.title}\r\n                                width=\"100%\"\r\n                                loading=\"lazy\"\r\n                              />\r\n                            )}\r\n\r\n                            <span>\r\n                              {venue.isNew && (\r\n                                <span className=\"newLabel\">Recently Added</span>\r\n                              )}\r\n                            </span>\r\n\r\n                            <div className=\"artContent\">\r\n                              <h4 className=\"artTitle\">{venue.title}</h4>\r\n                              {venue.location && (\r\n                                <span className=\"location\">\r\n                                  <BsFillGeoAltFill /> {venue.location}\r\n                                </span>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </Link>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                  {isScrollable && (\r\n                    <button\r\n                      className=\"arrow right react-multiple-carousel__arrow react-multiple-carousel__arrow--right\"\r\n                      onClick={() => scrollCarousel(1, index)}\r\n                    >\r\n                      <BsChevronCompactRight />\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Venues;\r\n"],"names":["gsap","registerPlugin","Draggable","Venues","venues","setVenues","useState","loading","setLoading","carouselRefs","useRef","useEffect","async","publishedVenues","axios","get","concat","process","data","filter","venue","status","error","console","fetchVenues","categoryOrder","groupedVenues","groupVenuesByCategory","forEach","category","push","orderedGroupedVenues","map","item","sort","Math","random","a","b","_ref","scrollCarousel","direction","index","carousel","current","querySelector","scrollAmount","clientWidth","newScrollPosition","scrollLeft","max","min","scrollWidth","to","duration","ease","window","innerWidth","killTweensOf","create","type","bounds","minX","maxX","inertia","throwProps","edgeResistance","onThrowUpdate","x","_gsap","snap","value","round","_jsx","Preloader","className","children","Object","keys","isScrollable","_jsxs","onClick","BsChevronCompactLeft","ref","el","style","display","overflow","width","flex","padding","Link","_id","featuredImage","src","alt","title","isNew","location","BsFillGeoAltFill","BsChevronCompactRight"],"sourceRoot":""}