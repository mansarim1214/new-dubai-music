{"version":3,"file":"static/js/442.4d3f2b82.chunk.js","mappings":"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","sources":["../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","js/util/util.js","js/util/dom-events.js","js/util/viewport-size.js","js/slide/pan-bounds.js","js/slide/zoom-level.js","js/slide/slide.js","js/gestures/drag-handler.js","js/gestures/zoom-handler.js","js/gestures/tap-handler.js","js/gestures/gestures.js","js/main-scroll.js","js/keyboard.js","js/util/css-animation.js","js/util/spring-easer.js","js/util/spring-animation.js","js/util/animations.js","js/scroll-wheel.js","js/ui/ui-element.js","js/ui/button-arrow.js","js/ui/button-close.js","js/ui/button-zoom.js","js/ui/loading-indicator.js","js/ui/counter-indicator.js","js/ui/ui.js","js/core/eventable.js","js/slide/placeholder.js","js/slide/content.js","js/slide/loader.js","js/core/base.js","js/opener.js","js/photoswipe.js","js/slide/get-thumb-bounds.js","../node_modules/react-photoswipe-gallery/dist/helpers/sort-nodes.js","../node_modules/react-photoswipe-gallery/dist/helpers/object-to-hash.js","../node_modules/react-photoswipe-gallery/dist/helpers/hash-to-object.js","../node_modules/react-photoswipe-gallery/dist/helpers/get-hash-without-gid-and-pid.js","../node_modules/react-photoswipe-gallery/dist/helpers/get-hash-value.js","../node_modules/react-photoswipe-gallery/dist/helpers/get-base-url.js","../node_modules/react-photoswipe-gallery/dist/helpers/hash-includes-navigation-query-params.js","../node_modules/react-photoswipe-gallery/dist/helpers/get-initial-active-slide-index.js","../node_modules/react-photoswipe-gallery/dist/no-ref-error.js","../node_modules/react-photoswipe-gallery/dist/helpers/entry-item-ref-is-element.js","../node_modules/react-photoswipe-gallery/dist/helpers/ensure-ref-passed.js","../node_modules/react-photoswipe-gallery/dist/context.js","../node_modules/react-photoswipe-gallery/dist/lightbox-stub.js","../node_modules/react-photoswipe-gallery/dist/gallery.js","../node_modules/react-photoswipe-gallery/dist/item.js","../node_modules/react-photoswipe-gallery/dist/hooks.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName);\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ` scale3d(${scale},${scale},1)`;\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? `${prop} ${duration}ms ${ease || defaultCSSEasing}`\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? `${w}px` : w;\r\n  el.style.height = (typeof h === 'number') ? `${h}px` : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\r\nexport function specialKeyUsed(e) {\r\n  return ('button' in e && e.button === 1) || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n * @returns {boolean}\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\r\n\r\n","// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  /* @ts-ignore */\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document | undefined | null} target\r\n * @prop {string} type\r\n * @prop {EventListenerOrEventListenerObject} listener\r\n * @prop {boolean} [passive]\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type Can be multiple, separated by space.\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @private\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   * @param {boolean} [unbind] Whether the event should be added or removed\r\n   * @param {boolean} [skipPool] Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default DOMEvents;\r\n","/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue = 0;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return Number(paddingValue) || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","import { clamp } from '../util/util.js';\r\nimport { parsePaddingOption } from '../util/viewport-size.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {Record<Axis, number>} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n    this.currZoomLevel = 1;\r\n    this.center = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.max = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.min = /** @type {Point} */ { x: 0, y: 0 };\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By default, it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   * @returns {number}\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\r\n\r\nexport default PanBounds;\r\n","const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n    /** @type { Point | null } */\r\n    this.panAreaSize = null;\r\n    /** @type { Point | null } */\r\n    this.elementSize = null;\r\n    this.fit = 1;\r\n    this.fill = 1;\r\n    this.vFill = 1;\r\n    this.initial = 1;\r\n    this.secondary = 1;\r\n    this.max = 1;\r\n    this.min = 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    /** @type {Point} */\r\n    const elementSize = { x: maxWidth, y: maxHeight };\r\n    this.elementSize = elementSize;\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = panAreaSize.x / elementSize.x;\r\n    const vRatio = panAreaSize.y / elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (\r\n      optionPrefix + 'ZoomLevel'\r\n    );\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @typedef {_SlideData & Record<string, any>} SlideData\r\n * @typedef {Object} _SlideData\r\n * @prop {HTMLElement} [element] thumbnail element\r\n * @prop {string} [src] image URL\r\n * @prop {string} [srcset] image srcset\r\n * @prop {number} [w] image width (deprecated)\r\n * @prop {number} [h] image height (deprecated)\r\n * @prop {number} [width] image width\r\n * @prop {number} [height] image height\r\n * @prop {string} [msrc] placeholder image URL that's displayed before large image is loaded\r\n * @prop {string} [alt] image alt text\r\n * @prop {boolean} [thumbCropped] whether thumbnail is cropped client-side or not\r\n * @prop {string} [html] html content of a slide\r\n * @prop {'image' | 'html' | string} [type] slide type\r\n */\r\n\r\nimport {\r\n  createElement,\r\n  setTransform,\r\n  equalizePoints,\r\n  roundPoint,\r\n  toTransformString,\r\n  clamp,\r\n} from '../util/util.js';\r\n\r\nimport PanBounds from './pan-bounds.js';\r\nimport ZoomLevel from './zoom-level.js';\r\nimport { getPanAreaSize } from '../util/viewport-size.js';\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.pan = { x: 0, y: 0 };\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap', 'div');\r\n    /** @type {HTMLElement | null} */\r\n    this.holderElement = null;\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n    this.heavyAppended = false;\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load(false);\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean} [force] if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** @returns {HTMLImageElement | HTMLDivElement | null | undefined} */\r\n  getPlaceholderElement() {\r\n    return this.content.placeholder?.element;\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {Point} [centerPoint]\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean} [ignoreBounds] Minimum and maximum zoom levels will be ignored.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {Point} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number} [prevZoomLevel] Zoom level before new zoom was applied.\r\n   * @returns {number}\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    if (!prevZoomLevel) {\r\n      prevZoomLevel = this.zoomLevels.initial;\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   * @returns {boolean}\r\n   */\r\n  isPannable() {\r\n    return Boolean(this.width) && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   * @returns {boolean}\r\n   */\r\n  isZoomable() {\r\n    return Boolean(this.width) && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   * @private\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  /** @returns {string} */\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in the highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\r\n\r\nexport default Slide;\r\n","import {\r\n  equalizePoints, roundPoint, clamp\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n * @returns {number}\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = { x: 0, y: 0 };\r\n  }\r\n\r\n  start() {\r\n    if (this.pswp.currSlide) {\r\n      equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    }\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && this.pswp.options.closeOnVerticalDrag\r\n        && (currSlide && currSlide.currZoomLevel <= currSlide.zoomLevels.fit)\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!this.pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        this.pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        if (currSlide) {\r\n          roundPoint(currSlide.pan);\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { velocity } = this.gestures;\r\n    const { mainScroll, currSlide } = this.pswp;\r\n    let indexDiff = 0;\r\n\r\n    this.pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is visible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / this.pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched,\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if ((currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.max)\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { velocity } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (this.pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Increasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        this.pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = this.pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    this.pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && this.pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          this.pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @returns {boolean}\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = this.pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta || !currSlide) {\r\n      return false;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (this.pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   * @returns {number}\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - (this.pswp.currSlide?.bounds.center.y ?? 0)) / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number} [customFriction] (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DragHandler;\r\n","import {\r\n  equalizePoints, getDistanceBetween, clamp, pointsEqual\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startPan = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startZoomPoint = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._zoomPoint = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._wasOverFitZoomLevel = false;\r\n    /** @private */\r\n    this._startZoomLevel = 1;\r\n  }\r\n\r\n  start() {\r\n    const { currSlide } = this.gestures.pswp;\r\n    if (currSlide) {\r\n      this._startZoomLevel = currSlide.currZoomLevel;\r\n      equalizePoints(this._startPan, currSlide.pan);\r\n    }\r\n\r\n    this.gestures.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    if ((!currSlide || currSlide.currZoomLevel < currSlide.zoomLevels.initial)\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   * @returns {number}\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean} [ignoreGesture]\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide?.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === 0) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({ x: 0, y: 0 }, currSlide.pan);\r\n    let destinationPan = equalizePoints({ x: 0, y: 0 }, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    const panNeedsChange = !pointsEqual(destinationPan, initialPan);\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default ZoomHandler;\r\n","/**\r\n * @template {string} T\r\n * @template {string} P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n * @returns {boolean}\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide?.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide?.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element?.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TapHandler;\r\n","import {\r\n  equalizePoints, pointsEqual, getDistanceBetween\r\n} from '../util/util.js';\r\n\r\nimport DragHandler from './drag-handler.js';\r\nimport ZoomHandler from './zoom-handler.js';\r\nimport TapHandler from './tap-handler.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y' | null} */\r\n    this.dragAxis = null;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = { x: 0, y: 0 }; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = { x: 0, y: 0 }; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.prevP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.velocity = { x: 0, y: 0 };\r\n\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._lastStartP1 = { x: 0, y: 0 };\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._intervalP1 = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]}\r\n     * @private\r\n     */\r\n    this._ongoingPointers = [];\r\n    /** @private */\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    /** @private */\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @private */\r\n    this._intervalTime = 0;\r\n    /** @private */\r\n    this._velocityCalculated = false;\r\n    this.isMultitouch = false;\r\n    this.isDragging = false;\r\n    this.isZooming = false;\r\n    /** @type {number | null} */\r\n    this.raf = null;\r\n    /** @type {NodeJS.Timeout | null}\r\n     * @private\r\n     */\r\n    this._tapTimer = null;\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(\r\n        pswp.scrollWrap,\r\n        'click',\r\n        /** @type EventListener */(this._onClick.bind(this))\r\n      );\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        if (pswp.scrollWrap) {\r\n          pswp.scrollWrap.ontouchmove = () => {};\r\n          pswp.scrollWrap.ontouchend = () => {};\r\n        }\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(\r\n      pswp.scrollWrap,\r\n      pref + down,\r\n      /** @type EventListener */(this.onPointerDown.bind(this))\r\n    );\r\n    events.add(window, pref + 'move', /** @type EventListener */(this.onPointerMove.bind(this)));\r\n    events.add(window, pref + up, /** @type EventListener */(this.onPointerUp.bind(this)));\r\n    if (cancelEvent) {\r\n      events.add(\r\n        pswp.scrollWrap,\r\n        cancelEvent,\r\n        /** @type EventListener */(this.onPointerUp.bind(this))\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    const isMousePointer = e.type === 'mousedown' || e.pointerType === 'mouse';\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e, 'down');\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    this._preventPointerEventBehaviour(e, 'move');\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @private\r\n   * @param {boolean} [force]\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   * @returns {number}\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _preventPointerEventBehaviour(e, pointerType) {\r\n    const preventPointerEvent = this.pswp.applyFilters('preventPointerEvent', true, e, pointerType);\r\n    if (preventPointerEvent) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPointer) => {\r\n        return ongoingPointer.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, { x: 0, y: 0 }));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** update points that were used during previous rAF tick\r\n   * @private\r\n   */\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  /** update points at the start of gesture\r\n   * @private\r\n   */\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  /** @private */\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   * @returns {Point}\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gestures;\r\n","import {\r\n  setTransform,\r\n  createElement,\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n    this.slideWidth = 0;\r\n    /** @private */\r\n    this._currPositionIndex = 0;\r\n    /** @private */\r\n    this._prevPositionIndex = 0;\r\n    /** @private */\r\n    this._containerShiftIndex = -1;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = [];\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean} [resizeSlides] Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', 'div', this.pswp.container);\r\n      el.setAttribute('role', 'group');\r\n      el.setAttribute('aria-roledescription', 'slide');\r\n      el.setAttribute('aria-hidden', 'true');\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   * @returns {boolean}\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean} [animate]\r\n   * @param {number} [velocityX]\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    return Boolean(diff);\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   * @returns {number}\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   * @returns {boolean}\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    /** @type {ItemHolder | undefined} */\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n\r\n      // If slides are changed by 3 screens or more - clean up previous slides\r\n      this.itemHolders.forEach((itemHolder) => {\r\n        itemHolder.slide?.destroy();\r\n        itemHolder.slide = undefined;\r\n      });\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        if (tempHolder) {\r\n          this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n          this._containerShiftIndex++;\r\n\r\n          setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n        }\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        if (tempHolder) {\r\n          this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n          this._containerShiftIndex--;\r\n\r\n          setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1]?.slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    if (pswp.currSlide) {\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean} [dragging]\r\n   */\r\n  moveTo(x, dragging) {\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      let newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      const delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n\r\n    if (this.pswp.container) {\r\n      setTransform(this.pswp.container, x);\r\n    }\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging: dragging ?? false });\r\n  }\r\n}\r\n\r\nexport default MainScroll;\r\n","import { specialKeyUsed } from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\nconst KeyboardKeyCodesMap = {\r\n  Escape: 27,\r\n  z: 90,\r\n  ArrowLeft: 37,\r\n  ArrowUp: 38,\r\n  ArrowRight: 39,\r\n  ArrowDown: 40,\r\n  Tab: 9,\r\n};\r\n\r\n/**\r\n * @template {keyof KeyboardKeyCodesMap} T\r\n * @param {T} key\r\n * @param {boolean} isKeySupported\r\n * @returns {T | number | undefined}\r\n */\r\nconst getKeyboardEventKey = (key, isKeySupported) => {\r\n  return isKeySupported ? key : KeyboardKeyCodesMap[key];\r\n};\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Helps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    /** @private */\r\n    this._wasFocused = false;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      if (pswp.options.trapFocus) {\r\n        // Dialog was likely opened by keyboard if initial point is not defined\r\n        if (!pswp.options.initialPointerPos) {\r\n          // focus causes layout,\r\n          // which causes lag during the animation,\r\n          // that's why we delay it until the opener transition ends\r\n          this._focusRoot();\r\n        }\r\n\r\n        pswp.events.add(\r\n          document,\r\n          'focusin',\r\n          /** @type EventListener */(this._onFocusIn.bind(this))\r\n        );\r\n      }\r\n\r\n      pswp.events.add(document, 'keydown', /** @type EventListener */(this._onKeyDown.bind(this)));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** @private */\r\n  _focusRoot() {\r\n    if (!this._wasFocused && this.pswp.element) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe> | undefined} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y' | undefined} */\r\n    let axis;\r\n    let isForward = false;\r\n    const isKeySupported = 'key' in e;\r\n\r\n    switch (isKeySupported ? e.key : e.keyCode) {\r\n      case getKeyboardEventKey('Escape', isKeySupported):\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case getKeyboardEventKey('z', isKeySupported):\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case getKeyboardEventKey('ArrowLeft', isKeySupported):\r\n        axis = 'x';\r\n        break;\r\n      case getKeyboardEventKey('ArrowUp', isKeySupported):\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('ArrowRight', isKeySupported):\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case getKeyboardEventKey('ArrowDown', isKeySupported):\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('Tab', isKeySupported):\r\n        this._focusRoot();\r\n        break;\r\n      default:\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      // @ts-ignore\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @private\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (template\r\n        && document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Keyboard;\r\n","import { setTransitionStyle, removeTransitionStyle } from './util.js';\r\n\r\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/** @typedef {Object} DefaultCssAnimationProps\r\n *\r\n * @prop {HTMLElement} target\r\n * @prop {number} [duration]\r\n * @prop {string} [easing]\r\n * @prop {string} [transform]\r\n * @prop {string} [opacity]\r\n * */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultCssAnimationProps} CssAnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish = () => {},\r\n      duration = 333,\r\n      easing = DEFAULT_EASING,\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop] ?? '';\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n    /** @private */\r\n    this._finished = false;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transition won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element property was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default CSSAnimation;\r\n","const DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} [dampingRatio]\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} [naturalFrequency]\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    this._dampedFrequency = this._naturalFrequency;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency *= Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\r\n\r\nexport default SpringEaser;\r\n","import SpringEaser from './spring-easer.js';\r\n\r\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/**\r\n * @typedef {Object} DefaultSpringAnimationProps\r\n *\r\n * @prop {number} start\r\n * @prop {number} end\r\n * @prop {number} velocity\r\n * @prop {number} [dampingRatio]\r\n * @prop {number} [naturalFrequency]\r\n * @prop {(end: number) => void} onUpdate\r\n */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultSpringAnimationProps} SpringAnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    this._raf = 0;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish = () => {},\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = 0;\r\n  }\r\n}\r\n\r\nexport default SpringAnimation;\r\n","import CSSAnimation from './css-animation.js';\r\nimport SpringAnimation from './spring-animation.js';\r\n\r\n/** @typedef {import('./css-animation.js').CssAnimationProps} CssAnimationProps */\r\n/** @typedef {import('./spring-animation.js').SpringAnimationProps} SpringAnimationProps */\r\n\r\n/** @typedef {Object} SharedAnimationProps\r\n * @prop {string} [name]\r\n * @prop {boolean} [isPan]\r\n * @prop {boolean} [isMainScroll]\r\n * @prop {VoidFunction} [onComplete]\r\n * @prop {VoidFunction} [onFinish]\r\n */\r\n\r\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n/** @typedef {SpringAnimationProps | CssAnimationProps} AnimationProps */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {AnimationProps} props\r\n   * @param {boolean} [isSpring]\r\n   * @returns {Animation}\r\n   */\r\n  _start(props, isSpring) {\r\n    const animation = isSpring\r\n      ? new SpringAnimation(/** @type SpringAnimationProps */ (props))\r\n      : new CSSAnimation(/** @type CssAnimationProps */ (props));\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Animations;\r\n","/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', /** @type EventListener */(this._onWheel.bind(this)));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScrollWheel;\r\n","import { createElement } from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean} [isCustomSVG]\r\n * @prop {string} inner\r\n * @prop {string} [outlineID]\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string} [className]\r\n * @prop {UIElementMarkup} [html]\r\n * @prop {boolean} [isButton]\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string} [title]\r\n * @prop {string} [ariaLabel]\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number} [order]\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n * @returns {string}\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    /** @type {HTMLElement} */\r\n    const element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      const ariaText = ariaLabel || title;\r\n      if (ariaText) {\r\n        element.setAttribute('aria-label', ariaText);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          // @ts-ignore\r\n          pswp[data.onClick]();\r\n        } else if (typeof data.onClick === 'function') {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    /** @type {HTMLElement | undefined} root element by default */\r\n    let container = pswp.element;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      }\r\n    }\r\n\r\n    container?.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\r\n\r\nexport default UIElement;\r\n","/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean} [isNextButton]\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  // TODO: this should point to a unique id for this instance\r\n  element.setAttribute('aria-controls', 'pswp__items');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\r\n\r\nexport default closeButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\r\n\r\nexport default zoomButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean | undefined} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout | null} */\r\n    let delayTimeout = null;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList.toggle('pswp__preloader--' + className, add);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide?.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(Boolean(pswp.currSlide?.content.isLoading()));\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    if (pswp.ui) {\r\n      pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n    }\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\r\n","import UIElement from './ui-element.js';\r\nimport { arrowPrev, arrowNext } from './button-arrow.js';\r\nimport closeButton from './button-close.js';\r\nimport zoomButton from './button-zoom.js';\r\nimport { loadingIndicator } from './loading-indicator.js';\r\nimport { counterIndicator } from './counter-indicator.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default, it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList.toggle('pswp--zoomed-in', isZoomedIn);\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [];\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = () => {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {number | undefined}\r\n     */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element?.classList.toggle('pswp--one-slide', pswp.getNumItems() === 1);\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   *\r\n   * @private\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n\r\n    if (this.pswp.opener.isClosing || !template || !currSlide) {\r\n      return;\r\n    }\r\n\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\r\n\r\nexport default UI;\r\n","/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thumbnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thumbnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n * @prop {(preventPointerEvent: boolean, event: PointerEvent, pointerType: string) => boolean} preventPointerEvent\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    this.defaultPrevented = false;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe | undefined} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions | undefined} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name]?.push({ fn, priority });\r\n    this._filters[name]?.sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    this.pswp?.addFilter(name, fn, priority);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    this._filters[name]?.forEach((filter) => {\r\n      // @ts-expect-error\r\n      args[0] = filter.fn.apply(this, args);\r\n    });\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name]?.push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    this.pswp?.on(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    this.pswp?.off(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    this._listeners[name]?.forEach((listener) => {\r\n      listener.call(this, event);\r\n    });\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : 'div',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      const imgEl = /** @type {HTMLImageElement} */ (this.element);\r\n      imgEl.decoding = 'async';\r\n      imgEl.alt = '';\r\n      imgEl.src = imageSrc;\r\n      imgEl.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element?.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","import { createElement, isSafari, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {Placeholder | undefined} */\r\n    this.placeholder = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.slide = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.isDecoding = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = undefined;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content', 'div');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    if (!this.isImageContent()\r\n      || !this.element\r\n      || this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src ?? '';\r\n    imageElement.alt = this.data.alt ?? '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide && this.element) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch(\r\n      'contentResize',\r\n      { content: this, width, height }).defaultPrevented\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch(\r\n          'imageSizeChange',\r\n          { slide: this.slide, width, height, content: this }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\r\n      return;\r\n    }\r\n\r\n    const image = /** @type HTMLImageElement */ (this.element);\r\n    const sizesWidth = this.instance.applyFilters(\r\n      'srcsetSizesWidth',\r\n      this.displayedImageWidth,\r\n      this\r\n    );\r\n\r\n    if (\r\n      !image.dataset.largestUsedSize\r\n      || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)\r\n    ) {\r\n      image.sizes = sizesWidth + 'px';\r\n      image.dataset.largestUsedSize = String(sizesWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = undefined;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = undefined;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\r\n      errorMsgEl.innerText = this.instance.options?.errorMsg ?? '';\r\n      errorMsgEl = /** @type {HTMLDivElement} */ (this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      ));\r\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached || !this.element) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.slide && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented\r\n      || !this.slide) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n      // add image to slide when it becomes active,\r\n      // even if it's not finished decoding\r\n      this.appendImage();\r\n    } else if (this.isError()) {\r\n      this.load(false, true); // try to reload\r\n    }\r\n\r\n    if (this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  const content = instance.createContentFromData(itemData, index);\r\n  /** @type {ZoomLevel | undefined} */\r\n  let zoomLevel;\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset, and we need to define sizes\r\n  if (options) {\r\n    zoomLevel = new ZoomLevel(options, itemData, -1);\r\n\r\n    let viewportSize;\r\n    if (instance.pswp) {\r\n      viewportSize = instance.pswp.viewportSize;\r\n    } else {\r\n      viewportSize = getViewportSize(options, instance);\r\n    }\r\n\r\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n    zoomLevel.update(content.width, content.height, panAreaSize);\r\n  }\r\n\r\n  content.lazyLoad();\r\n\r\n  if (zoomLevel) {\r\n    content.setDisplayedSize(\r\n      Math.ceil(content.width * zoomLevel.initial),\r\n      Math.ceil(content.height * zoomLevel.initial)\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} initialIndex\r\n   */\r\n  loadSlideByIndex(initialIndex) {\r\n    const index = this.pswp.getLoopedIndex(initialIndex);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      this.addToCache(content);\r\n    }\r\n\r\n    // assign slide to content\r\n    content.setSlide(slide);\r\n\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = [];\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import Eventable from './eventable.js';\r\nimport { getElementsFromOption } from '../util/util.js';\r\nimport Content from '../slide/content.js';\r\nimport { lazyLoadData } from '../slide/loader.js';\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems = 0;\r\n    const dataSource = this.options?.dataSource;\r\n\r\n    if (dataSource && 'length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\r\n  getItemData(index) {\r\n    const dataSource = this.options?.dataSource;\r\n    /** @type {SlideData | HTMLElement} */\r\n    let dataSourceItem = {};\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options?.children || this.options?.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (\r\n      element.tagName === 'A'\r\n        ? element\r\n        : element.querySelector('a')\r\n    );\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\r\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt') ?? '';\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n","import {\r\n  setTransform,\r\n  equalizePoints,\r\n  decodeImage,\r\n  toTransformString\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this.isOpen = false;\r\n    this.isClosing = false;\r\n    this.isOpening = false;\r\n    /**\r\n     * @private\r\n     * @type {number | false | undefined}\r\n     */\r\n    this._duration = undefined;\r\n    /** @private */\r\n    this._useAnimation = false;\r\n    /** @private */\r\n    this._croppedZoom = false;\r\n    /** @private */\r\n    this._animateRootOpacity = false;\r\n    /** @private */\r\n    this._animateBgOpacity = false;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | HTMLImageElement | null | undefined }\r\n     */\r\n    this._placeholder = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._opacityElement = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._cropContainer1 = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLElement | null | undefined }\r\n     */\r\n    this._cropContainer2 = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Bounds | undefined}\r\n     */\r\n    this._thumbBounds = undefined;\r\n\r\n\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n  }\r\n\r\n  /** @private */\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = undefined;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = undefined;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide?.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = Boolean(this._duration && this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && slide?.content.usePlaceholder()\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening && slide) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity ?? false;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide?.holderElement;\r\n\r\n      if (pswp.container) {\r\n        pswp.container.style.overflow = 'hidden';\r\n        pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n      }\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity && pswp.bg) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = '1';\r\n        }\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      if (pswp.mainScroll.itemHolders[0]) {\r\n        pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      }\r\n      if (pswp.mainScroll.itemHolders[2]) {\r\n        pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n      }\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve(true);\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve(true);\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _initiate() {\r\n    this.pswp.element?.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element?.classList.toggle('pswp--ui-visible', this.isOpening);\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom && pswp.container) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide?.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom && this._cropContainer1 && this._cropContainer2) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      if (pswp.currSlide) {\r\n        pswp.currSlide.zoomAndPanToInitial();\r\n        this._animateTo(\r\n          pswp.currSlide.container,\r\n          'transform',\r\n          pswp.currSlide.getCurrentTransform()\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this._animateBgOpacity && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    // do not animate opacity if it's already at 0\r\n    if (this._animateBgOpacity && pswp.bgOpacity > 0.01 && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {boolean} [animate]\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom && innerRect && this._cropContainer1 && this._cropContainer2) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    if (currSlide) {\r\n      equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n      currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n      if (animate) {\r\n        this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n      } else {\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\r\n\r\nexport default Opener;\r\n","import {\r\n  createElement,\r\n  equalizePoints,\r\n  pointsEqual,\r\n  clamp,\r\n} from './util/util.js';\r\n\r\nimport DOMEvents from './util/dom-events.js';\r\nimport Slide from './slide/slide.js';\r\nimport Gestures from './gestures/gestures.js';\r\nimport MainScroll from './main-scroll.js';\r\n\r\nimport Keyboard from './keyboard.js';\r\nimport Animations from './util/animations.js';\r\nimport ScrollWheel from './scroll-wheel.js';\r\nimport UI from './ui/ui.js';\r\nimport { getViewportSize } from './util/viewport-size.js';\r\nimport { getThumbBounds } from './slide/get-thumb-bounds.js';\r\nimport PhotoSwipeBase from './core/base.js';\r\nimport Opener from './opener.js';\r\nimport ContentLoader from './slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/** @typedef {import('./slide/get-thumb-bounds').Bounds} Bounds */\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x: number; y: number; id?: string | number }} Point */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\r\n\r\n/** @typedef {Partial<PreparedPhotoSwipeOptions>} PhotoSwipeOptions https://photoswipe.com/options/ */\r\n/**\r\n * @typedef {Object} PreparedPhotoSwipeOptions\r\n *\r\n * @prop {DataSource} [dataSource]\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean} [wheelToZoom]\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding} [padding]\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Point, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} hideAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} showAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} zoomAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean} trapFocus\r\n * Trap focus within PhotoSwipe element while it's open.\r\n *\r\n * @prop {boolean} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} imageClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} bgClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} tapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} doubleTapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipeBase) => Point} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string} [mainClass]\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement} [appendToEl]\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string} [closeTitle]\r\n * Translating\r\n *\r\n * @prop {string} [zoomTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowNextTitle]\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean} [arrowPrev]\r\n * @prop {boolean} [arrowNext]\r\n * @prop {boolean} [zoom]\r\n * @prop {boolean} [close]\r\n * @prop {boolean} [counter]\r\n *\r\n * @prop {string} [arrowPrevSVG]\r\n * @prop {string} [arrowNextSVG]\r\n * @prop {string} [zoomSVG]\r\n * @prop {string} [closeSVG]\r\n * @prop {string} [counterSVG]\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * @prop {string} [arrowNextTitle]\r\n * @prop {string} [zoomTitle]\r\n * @prop {string} [closeTitle]\r\n * @prop {string} [counterTitle]\r\n *\r\n * @prop {ZoomLevelOption} [initialZoomLevel]\r\n * @prop {ZoomLevelOption} [secondaryZoomLevel]\r\n * @prop {ZoomLevelOption} [maxZoomLevel]\r\n *\r\n * @prop {boolean} [mouseMovePan]\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean} [showHideOpacity]\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean} [preloadFirstSlide]\r\n * @prop {ElementProvider} [gallery]\r\n * @prop {string} [gallerySelector]\r\n * @prop {ElementProvider} [children]\r\n * @prop {string} [childSelector]\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PreparedPhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  trapFocus: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.options = this._prepareOptions(options || {});\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.offset = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * @type {Point}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.viewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     */\r\n    this.bgOpacity = 1;\r\n    this.currIndex = 0;\r\n    this.potentialIndex = 0;\r\n    this.isOpen = false;\r\n    this.isDestroying = false;\r\n    this.hasMouse = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {SlideData}\r\n     */\r\n    this._initialItemData = {};\r\n    /** @type {Bounds | undefined} */\r\n    this._initialThumbBounds = undefined;\r\n\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.topBar = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.template = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.container = undefined;\r\n    /** @type {HTMLElement | undefined} */\r\n    this.scrollWrap = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.currSlide = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n    this.animations = new Animations();\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  /** @returns {boolean} */\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return false;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    if (this.element) {\r\n      this.element.className += ' ' + rootClasses;\r\n    }\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      const { itemHolders } = this.mainScroll;\r\n\r\n      // Add content to the previous and next slide\r\n      if (itemHolders[0]) {\r\n        itemHolders[0].el.style.display = 'block';\r\n        this.setContent(itemHolders[0], this.currIndex - 1);\r\n      }\r\n      if (itemHolders[2]) {\r\n        itemHolders[2].el.style.display = 'block';\r\n        this.setContent(itemHolders[2], this.currIndex + 1);\r\n      }\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    if (this.mainScroll.itemHolders[1]) {\r\n      this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    }\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   * @returns {number}\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    return clamp(index, 0, numSlides - 1);\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.appendHeavy();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide?.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide?.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this._listeners = {};\r\n\r\n    if (this.scrollWrap) {\r\n      this.scrollWrap.ontouchmove = null;\r\n      this.scrollWrap.ontouchend = null;\r\n    }\r\n\r\n    this.element?.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.destroy();\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = (this.currSlide?.index ?? 0) - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide?.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean} [force] If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = undefined;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  /** @returns {Point} */\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean} [force] Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    if (this.bg) {\r\n      this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element?.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp', 'div');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', 'div', this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', 'section', this.element);\r\n    this.container = createElement('pswp__container', 'div', this.scrollWrap);\r\n\r\n    // aria pattern: carousel\r\n    this.scrollWrap.setAttribute('aria-roledescription', 'carousel');\r\n    this.container.setAttribute('aria-live', 'off');\r\n    this.container.setAttribute('id', 'pswp__items');\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   *\r\n   * @returns {Bounds | undefined}\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continuous loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PhotoSwipeOptions} options\r\n   * @returns {PreparedPhotoSwipeOptions}\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PreparedPhotoSwipeOptions} */\r\n    return {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n\r\nexport default PhotoSwipe;\r\n","/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @returns Bounds\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n * @returns Bounds\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nexport function getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  /** @type {Bounds | undefined} */\r\n  let thumbBounds;\r\n  /** @type {HTMLElement | null | undefined} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : /** @type {HTMLElement | null} */ (element.querySelector(thumbSelector));\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w || 0,\r\n        itemData.height || itemData.h || 0\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\r\n","function sortNodes(a, b) {\n  if (a === b) return 0;\n  // eslint-disable-next-line no-bitwise\n  if (a.compareDocumentPosition(b) & 2) {\n    return 1;\n  }\n  return -1;\n}\nexport default sortNodes;","function objectToHash(obj) {\n  return Object.entries(obj).map(([key, value]) => value ? `${key}=${value}` : key).join('&');\n}\nexport default objectToHash;","function hashToObject(hash) {\n  return hash.split('&').reduce((acc, keyValue) => {\n    const [key, value] = keyValue.split('=');\n    if (key) {\n      acc[key] = value;\n    }\n    return acc;\n  }, {});\n}\nexport default hashToObject;","import hashToObject from \"./hash-to-object.js\";\nimport objectToHash from \"./object-to-hash.js\";\nfunction getHashWithoutGidAndPid(hash) {\n  const obj = hashToObject(hash);\n  delete obj.gid;\n  delete obj.pid;\n  return objectToHash(obj);\n}\nexport default getHashWithoutGidAndPid;","function getHashValue() {\n  return window.location.hash.substring(1);\n}\nexport default getHashValue;","function getBaseUrl() {\n  return `${window.location.pathname}${window.location.search}`;\n}\nexport default getBaseUrl;","import hashToObject from \"./hash-to-object.js\";\nconst hashIncludesNavigationQueryParams = hash => {\n  const hashParts = hashToObject(hash);\n  return Boolean(hashParts.gid) && Boolean(hashParts.pid);\n};\nexport default hashIncludesNavigationQueryParams;","function getInitialActiveSlideIndex(index, targetId) {\n  if (index !== null) {\n    return index;\n  }\n  return targetId ? parseInt(targetId, 10) - 1 : 0;\n}\nexport default getInitialActiveSlideIndex;","export class NoRefError extends Error {\n  constructor(msg = '') {\n    super();\n    this.message = `\n    ${msg}\n    No valid \\`ref\\` provided.\n    You should use \\`ref\\` from render prop of Item component.\n    Example:\n    <Item>{({ ref }) => <div ref={ref}></div>}</Item>\\n`;\n  }\n}","const entryItemRefIsElement = entry => entry[0].current instanceof Element;\nexport default entryItemRefIsElement;","import { NoRefError } from \"../no-ref-error.js\";\nimport entryItemRefIsElement from \"./entry-item-ref-is-element.js\";\nconst ensureRefPassed = entry => {\n  if (entryItemRefIsElement(entry)) {\n    return entry;\n  }\n  throw new NoRefError();\n};\nexport default ensureRefPassed;","import { createContext } from 'react';\nexport const Context = createContext({\n  remove: () => {},\n  set: () => {},\n  handleClick: () => {},\n  open: () => {},\n  isRefRegistered: () => false\n});","/**\n * The purpose of this class is to emulate the behavior of the PhotoSwipeLightbox\n * to provide the ability to use plugins\n */\nexport default class PhotoSwipeLightboxStub {\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.on = pswp.on.bind(pswp);\n    this.off = pswp.off.bind(pswp);\n    this.dispatch = pswp.dispatch.bind(pswp);\n  }\n}","var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport PhotoSwipe from 'photoswipe';\nimport React, { useRef, useCallback, useEffect, useMemo, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport sortNodes from \"./helpers/sort-nodes.js\";\nimport objectToHash from \"./helpers/object-to-hash.js\";\nimport hashToObject from \"./helpers/hash-to-object.js\";\nimport getHashWithoutGidAndPid from \"./helpers/get-hash-without-gid-and-pid.js\";\nimport getHashValue from \"./helpers/get-hash-value.js\";\nimport getBaseUrl from \"./helpers/get-base-url.js\";\nimport hashIncludesNavigationQueryParams from \"./helpers/hash-includes-navigation-query-params.js\";\nimport getInitialActiveSlideIndex from \"./helpers/get-initial-active-slide-index.js\";\nimport ensureRefPassed from \"./helpers/ensure-ref-passed.js\";\nimport entryItemRefIsElement from \"./helpers/entry-item-ref-is-element.js\";\nimport { Context } from \"./context.js\";\nimport PhotoSwipeLightboxStub from \"./lightbox-stub.js\";\nimport { NoRefError } from \"./no-ref-error.js\";\n/**\n * This variable stores the PhotoSwipe instance object\n * It aims to check whether does the PhotoSwipe opened at the moment\n * (analog of window.pswp in 'photoswipe/lightbox')\n */\nlet pswp = null;\n/**\n * Gallery component providing photoswipe context\n */\nexport const Gallery = ({\n  children,\n  options,\n  plugins,\n  uiElements,\n  id: galleryUID,\n  onBeforeOpen,\n  onOpen,\n  withCaption,\n  withDownloadButton\n}) => {\n  const [contentPortal, setContentPortal] = useState(null);\n  const items = useRef(new Map());\n  /**\n   * Store PID from hash if there are no items yet,\n   * but we need to open photoswipe if items appear in the next render\n   */\n  const openWhenReadyPid = useRef(null);\n  const open = useCallback((targetRef, targetId, itemIndex, e) => {\n    // only one photoswipe instance could be opened at once\n    // so if photoswipe is already open, function should do nothing\n    if (pswp) {\n      return;\n    }\n    const entries = Array.from(items.current);\n    if (typeof itemIndex === 'number' && (entries[itemIndex] === undefined || !entryItemRefIsElement(entries[itemIndex]))) {\n      throw new NoRefError(`Failed to open at index ${itemIndex}`);\n    }\n    const {\n      slides,\n      index\n    } = entries.map(ensureRefPassed).sort(([{\n      current: a\n    }], [{\n      current: b\n    }]) => sortNodes(a, b)).reduce((acc, entry, i) => {\n      const [ref, _a] = entry,\n        {\n          width,\n          height,\n          original,\n          originalSrcset,\n          thumbnail,\n          cropped,\n          content,\n          id: pid\n        } = _a,\n        rest = __rest(_a, [\"width\", \"height\", \"original\", \"originalSrcset\", \"thumbnail\", \"cropped\", \"content\", \"id\"]);\n      if (targetRef === ref || pid !== undefined && String(pid) === targetId) {\n        acc.index = i;\n      }\n      acc.slides.push(Object.assign(Object.assign(Object.assign({\n        w: Number(width),\n        h: Number(height),\n        src: original,\n        srcset: originalSrcset,\n        msrc: thumbnail,\n        element: ref.current,\n        thumbCropped: cropped,\n        content\n      }, content !== undefined ? {\n        type: 'html'\n      } : {}), pid !== undefined ? {\n        pid\n      } : {}), rest));\n      return acc;\n    }, {\n      slides: [],\n      index: itemIndex || null\n    });\n    const initialPoint = e && e.clientX !== undefined && e.clientY !== undefined ? {\n      x: e.clientX,\n      y: e.clientY\n    } : null;\n    const instance = new PhotoSwipe(Object.assign({\n      dataSource: slides,\n      index: getInitialActiveSlideIndex(index, targetId),\n      initialPointerPos: initialPoint\n    }, options || {}));\n    pswp = instance;\n    instance.on('contentActivate', ({\n      content: slideContent\n    }) => {\n      if (slideContent.data.content) {\n        setContentPortal(createPortal(slideContent.data.content, slideContent.element));\n      } else {\n        setContentPortal(null);\n      }\n    });\n    instance.on('close', () => {\n      setContentPortal(null);\n    });\n    if (withDownloadButton) {\n      instance.on('uiRegister', () => {\n        var _a;\n        (_a = instance.ui) === null || _a === void 0 ? void 0 : _a.registerElement({\n          name: 'download-button',\n          ariaLabel: 'Download',\n          order: 8,\n          isButton: true,\n          tagName: 'a',\n          appendTo: 'bar',\n          html: {\n            isCustomSVG: true,\n            inner: '<path d=\"M20.5 14.3 17.1 18V10h-2.2v7.9l-3.4-3.6L10 16l6 6.1 6-6.1ZM23 23H9v2h14Z\" id=\"pswp__icn-download\"/>',\n            outlineID: 'pswp__icn-download'\n          },\n          // can't test onInit callback correctly\n          onInit: /* istanbul ignore next */(el, pswpInstance) => {\n            el.setAttribute('download', '');\n            el.setAttribute('target', '_blank');\n            el.setAttribute('rel', 'noopener');\n            instance.on('change', () => {\n              var _a;\n              if (!((_a = pswpInstance.currSlide) === null || _a === void 0 ? void 0 : _a.data.src)) {\n                return;\n              }\n              const downloadButton = el;\n              downloadButton.href = pswpInstance.currSlide.data.src;\n            });\n          }\n        });\n      });\n    }\n    if (withCaption) {\n      instance.on('uiRegister', () => {\n        var _a;\n        (_a = instance.ui) === null || _a === void 0 ? void 0 : _a.registerElement({\n          name: 'default-caption',\n          order: 9,\n          isButton: false,\n          appendTo: 'root',\n          // can't test onInit callback correctly\n          onInit: /* istanbul ignore next */(el, pswpInstance) => {\n            /* eslint-disable no-param-reassign */\n            el.style.position = 'absolute';\n            el.style.bottom = '15px';\n            el.style.left = '0';\n            el.style.right = '0';\n            el.style.padding = '0 20px';\n            el.style.color = 'var(--pswp-icon-color)';\n            el.style.textAlign = 'center';\n            el.style.fontSize = '14px';\n            el.style.lineHeight = '1.5';\n            el.style.textShadow = '1px 1px 3px var(--pswp-icon-color-secondary)';\n            /* eslint-enable no-param-reassign */\n            instance.on('change', () => {\n              if (!pswpInstance.currSlide) {\n                return;\n              }\n              const {\n                caption,\n                alt\n              } = pswpInstance.currSlide.data;\n              // eslint-disable-next-line no-param-reassign\n              el.innerHTML = caption || alt || '';\n            });\n          }\n        });\n      });\n    }\n    if (Array.isArray(uiElements)) {\n      uiElements.forEach(uiElement => {\n        instance.on('uiRegister', () => {\n          var _a;\n          (_a = instance.ui) === null || _a === void 0 ? void 0 : _a.registerElement(uiElement);\n        });\n      });\n    }\n    if (typeof plugins === 'function') {\n      plugins(new PhotoSwipeLightboxStub(instance));\n    }\n    if (typeof onBeforeOpen === 'function') {\n      onBeforeOpen(instance);\n    }\n    const getHistoryState = () => {\n      return {\n        gallery: {\n          galleryUID\n        }\n      };\n    };\n    instance.on('beforeOpen', () => {\n      var _a;\n      if (galleryUID === undefined) {\n        return;\n      }\n      const hashIncludesGidAndPid = hashIncludesNavigationQueryParams(getHashValue());\n      // was openned by react-photoswipe-gallery's open() method call (click on thumbnail, for example)\n      // we need to create new history record to store hash navigation state\n      if (!hashIncludesGidAndPid) {\n        window.history.pushState(getHistoryState(), document.title);\n        return;\n      }\n      const hasGalleryStateInHistory = Boolean((_a = window.history.state) === null || _a === void 0 ? void 0 : _a.gallery);\n      // was openned by history.forward()\n      // we do not need to create new history record for hash navigation\n      // because we already have one\n      if (hasGalleryStateInHistory) {\n        return;\n      }\n      // was openned by link with gid and pid\n      const baseUrl = getBaseUrl();\n      const currentHash = getHashValue();\n      const hashWithoutGidAndPid = getHashWithoutGidAndPid(currentHash);\n      const urlWithoutOpenedSlide = `${baseUrl}${hashWithoutGidAndPid ? `#${hashWithoutGidAndPid}` : ''}`;\n      const urlWithOpenedSlide = `${baseUrl}#${currentHash}`;\n      // firstly, we need to modify current history record - set url without gid and pid\n      // we will return to this state after photoswipe closing\n      window.history.replaceState(window.history.state, document.title, urlWithoutOpenedSlide);\n      // then we need to create new history record to store hash navigation state\n      window.history.pushState(getHistoryState(), document.title, urlWithOpenedSlide);\n    });\n    instance.on('change', () => {\n      var _a;\n      if (galleryUID === undefined) {\n        return;\n      }\n      const pid = ((_a = instance.currSlide) === null || _a === void 0 ? void 0 : _a.data.pid) || instance.currIndex + 1;\n      const baseUrl = getBaseUrl();\n      const baseHash = getHashWithoutGidAndPid(getHashValue());\n      const gidAndPidHash = objectToHash({\n        gid: galleryUID,\n        pid\n      });\n      const urlWithOpenedSlide = `${baseUrl}#${baseHash}&${gidAndPidHash}`;\n      // updates in current history record hash value with actual pid\n      window.history.replaceState(getHistoryState(), document.title, urlWithOpenedSlide);\n    });\n    const closeGalleryOnHistoryPopState = () => {\n      if (galleryUID === undefined) {\n        return;\n      }\n      if (pswp !== null) {\n        pswp.close();\n      }\n    };\n    window.addEventListener('popstate', closeGalleryOnHistoryPopState);\n    instance.on('destroy', () => {\n      if (galleryUID !== undefined) {\n        window.removeEventListener('popstate', closeGalleryOnHistoryPopState);\n        // if hash includes gid and pid => this destroy was called with ordinary instance.close() call\n        // if not => destroy was called by history.back (browser's back button) => history has been already returned to previous state\n        if (hashIncludesNavigationQueryParams(getHashValue())) {\n          window.history.back();\n        }\n      }\n      pswp = null;\n    });\n    instance.init();\n    if (typeof onOpen === 'function') {\n      onOpen(instance);\n    }\n  }, [options, plugins, uiElements, galleryUID, onBeforeOpen, onOpen, withCaption, withDownloadButton]);\n  useEffect(() => {\n    return () => {\n      if (pswp) {\n        pswp.close();\n      }\n    };\n  }, []);\n  const openGalleryBasedOnUrlHash = useCallback(() => {\n    if (galleryUID === undefined) {\n      return;\n    }\n    if (pswp !== null) {\n      return;\n    }\n    const hash = getHashValue();\n    if (hash.length < 5) {\n      return;\n    }\n    const params = hashToObject(hash);\n    const {\n      pid,\n      gid\n    } = params;\n    if (!pid || !gid) {\n      return;\n    }\n    if (items.current.size === 0) {\n      // no items currently, save PID from hash for future use\n      openWhenReadyPid.current = pid;\n      return;\n    }\n    if (pid && gid === String(galleryUID)) {\n      open(null, pid);\n    }\n  }, [open, galleryUID]);\n  useEffect(() => {\n    openGalleryBasedOnUrlHash();\n    // needed for case when gallery was firstly opened, then was closed and user clicked on browser's forward button\n    window.addEventListener('popstate', openGalleryBasedOnUrlHash);\n    return () => {\n      window.removeEventListener('popstate', openGalleryBasedOnUrlHash);\n    };\n  }, [openGalleryBasedOnUrlHash]);\n  const remove = useCallback(ref => {\n    items.current.delete(ref);\n  }, []);\n  const set = useCallback((ref, data) => {\n    items.current.set(ref, data);\n    if (openWhenReadyPid.current === null) {\n      return;\n    }\n    const {\n      id\n    } = data;\n    if (id === openWhenReadyPid.current) {\n      // user provided `id` prop of Item component\n      open(ref);\n      openWhenReadyPid.current = null;\n      return;\n    }\n    if (!id) {\n      // in this case we using index of item as PID\n      const index = parseInt(openWhenReadyPid.current, 10) - 1;\n      const refToOpen = Array.from(items.current.keys())[index];\n      if (refToOpen) {\n        open(refToOpen);\n        openWhenReadyPid.current = null;\n      }\n    }\n  }, [open]);\n  const isRefRegistered = useCallback(ref => {\n    return items.current.has(ref);\n  }, []);\n  const openAt = useCallback(index => {\n    open(null, null, index);\n  }, [open]);\n  const contextValue = useMemo(() => ({\n    remove,\n    set,\n    handleClick: open,\n    open: openAt,\n    isRefRegistered\n  }), [remove, set, open, openAt, isRefRegistered]);\n  return React.createElement(Context.Provider, {\n    value: contextValue\n  }, children, contentPortal);\n};\nGallery.propTypes = {\n  children: PropTypes.any,\n  options: PropTypes.object,\n  plugins: PropTypes.func,\n  uiElements: PropTypes.array,\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onBeforeOpen: PropTypes.func,\n  onOpen: PropTypes.func,\n  withCaption: PropTypes.bool,\n  withDownloadButton: PropTypes.bool\n};","var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useRef, useEffect, useMemo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useApiContext } from \"./hooks.js\";\nimport { NoRefError } from \"./no-ref-error.js\";\n/**\n * Gallery item\n *\n * Should be a children of Gallery component\n */\nexport const Item = _a => {\n  var {\n      children\n    } = _a,\n    restProps = __rest(_a, [\"children\"]);\n  const ref = useRef(null);\n  const {\n    remove,\n    set,\n    handleClick,\n    isRefRegistered\n  } = useApiContext();\n  const refCallback = useCallback(node => {\n    ref.current = node;\n    set(ref, restProps);\n  }, [set, ...Object.values(restProps)]);\n  const open = useCallback(event => {\n    if (!isRefRegistered(ref)) {\n      throw new NoRefError();\n    }\n    handleClick(ref, null, null, event);\n  }, [handleClick, isRefRegistered]);\n  const childrenFnProps = useMemo(() => ({\n    ref: refCallback,\n    open\n  }), [refCallback, open]);\n  useEffect(() => {\n    return () => {\n      if (ref.current === null) {\n        remove(ref);\n      }\n    };\n  }, [remove]);\n  return children(childrenFnProps);\n};\nItem.propTypes = {\n  children: PropTypes.func.isRequired,\n  original: PropTypes.string,\n  originalSrcset: PropTypes.string,\n  thumbnail: PropTypes.string,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  alt: PropTypes.string,\n  caption: PropTypes.string,\n  content: PropTypes.element,\n  html: PropTypes.string,\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  cropped: PropTypes.bool\n};","import { useContext } from 'react';\nimport { Context } from \"./context.js\";\n/**\n * A hook that gives you access to provided methods for more advanced usage\n */\nexport const useGallery = () => {\n  const {\n    open\n  } = useContext(Context);\n  return {\n    /**\n     * Function that opens the gallery at the provided index\n     */\n    open\n  };\n};\nexport const useApiContext = () => useContext(Context);"],"names":["ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","name","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","undefined","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","concat","setTransform","style","transform","defaultCSSEasing","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","LOAD_STATE","isSafari","navigator","vendor","match","supportsPassive","window","addEventListener","Object","defineProperty","get","e","DOMEvents","constructor","this","_pool","add","target","type","listener","passive","_toggleListener","remove","removeAll","forEach","poolItem","unbind","skipPool","methodName","split","eType","filter","push","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","Number","getPanAreaSize","PanBounds","slide","currZoomLevel","center","update","_updateAxis","dispatch","reset","axis","elSize","data","panAreaSize","correctPan","panOffset","ZoomLevel","elementSize","fit","fill","vFill","initial","secondary","maxWidth","maxHeight","hRatio","vRatio","_getInitial","_getSecondary","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionName","optionValue","Slide","isActive","currIndex","currentResolution","pan","isFirstSlide","opener","isOpen","content","contentLoader","getContentBySlide","container","holderElement","heavyAppended","bounds","prevDisplayedWidth","prevDisplayedHeight","setIsActive","activate","deactivate","append","transformOrigin","calculateSize","load","updateContentSize","appendHeavy","zoomAndPanToInitial","applyCurrentZoomPan","mainScroll","isShifted","defaultPrevented","destroy","hasSlide","resize","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","getPlaceholderElement","_this$content$placeho","placeholder","zoomTo","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","getCurrentTransform","onComplete","easing","toggleZoom","zoomAnimationDuration","point","getViewportCenterPoint","zoomFactor","panX","panY","isPannable","Boolean","_applyZoomTransform","currSlide","zoom","newResolution","DragHandler","gestures","startPan","start","stopAll","change","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","_panOrMoveMainScroll","end","velocity","indexDiff","currentSlideVisibilityRatio","getCurrSlideX","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","initialVelocity","decelerationRate","project","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","moveTo","newPan","allowPanToNext","currSlideMainScrollX","mainScrollShiftDiff","isLeftToRight","isRightToLeft","_this$pswp$currSlide$","_this$pswp$currSlide","potentialPan","customFriction","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_wasOverFitZoomLevel","_startZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","click","originalEvent","targetClassList","classList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","tap","doubleTap","actionName","_this$gestures$pswp$e","actionFullName","clickToCloseNonZoomable","toggle","call","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","PointerEvent","supportsTouch","maxTouchPoints","_intervalTime","_velocityCalculated","isDragging","isZooming","raf","_tapTimer","drag","tapHandler","on","events","scrollWrap","_onClick","bind","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","onPointerMove","onPointerUp","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","_clearTapTimer","preventDefault","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","Date","_updateVelocity","_finishTap","_updatePrevPoints","requestAnimationFrame","time","_getVelocity","indexOf","tapDelay","doubleTapAction","setTimeout","clearTimeout","displacement","cancelAnimationFrame","applyFilters","pointerEvent","pointerIndex","findIndex","ongoingPointer","pointerId","splice","_convertEventPosToPoint","length","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MainScroll","slideWidth","_currPositionIndex","_prevPositionIndex","_containerShiftIndex","itemHolders","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","resetPosition","appendHolders","i","setAttribute","display","canBeSwiped","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","_this$itemHolders$","positionDifference","tempHolder","diffAbs","_itemHolder$slide","shift","setContent","pop","unshift","updateLazy","dragging","newSlideIndexOffset","KeyboardKeyCodesMap","Escape","z","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Tab","getKeyboardEventKey","key","isKeySupported","Keyboard","_wasFocused","trapFocus","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","activeElement","returnFocus","focus","ctrlKey","metaKey","altKey","shiftKey","specialKeyUsed","keydownAction","isForward","keyCode","escKey","arrowKeys","template","DEFAULT_EASING","CSSAnimation","_props$prop","onFinish","_target","_onComplete","_finished","_onTransitionEnd","_helperTimeout","_finalizeAnimation","removeEventListener","SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","easeFrame","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","_raf","easer","prevTime","animationLoop","Animations","activeAnimations","_start","isSpring","animation","stop","isPanRunning","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","UIElement","_container","elementHTML","html","isButton","toLowerCase","title","ariaLabel","ariaText","innerHTML","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","addElementHTML","onInit","onClick","onclick","appendTo","topBar","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","setIndicatorVisibility","visible","toggleIndicatorClass","updatePreloaderVisibility","_pswp$currSlide","isLoading","_pswp$currSlide2","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","isRegistered","uiElementsData","items","_lastUpdatedZoomLevel","init","sort","a","b","uiElementData","registerElement","_pswp$element","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","imageClickAction","PhotoSwipeEvent","details","assign","Eventable","_listeners","_filters","addFilter","fn","priority","arguments","_this$_filters$name","_this$_filters$name2","_this$pswp","f1","f2","removeFilter","_len","args","Array","_key","_this$_filters$name3","apply","_this$_listeners$name","_this$pswp2","off","_this$pswp3","_this$_listeners$name2","Placeholder","imageSrc","imgEl","decoding","alt","src","_this$element","parentNode","Content","instance","displayedImageWidth","displayedImageHeight","isAttached","isDecoding","state","removePlaceholder","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderEl","parentElement","prepend","placeholderSrc","msrc","isImageContent","loadImage","_this$data$src","_this$data$alt","imageElement","updateSrcsetSizes","srcset","complete","onLoaded","onload","onerror","onError","setSlide","displayError","isError","isInitialSizeUpdate","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","lazyLoad","_this$instance$option","_this$instance$option2","errorMsgEl","errorMsg","supportsDecode","decode","catch","finally","appendImage","lazyLoadData","createContentFromData","zoomLevel","ceil","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","initialIndex","getContentByIndex","getItemData","lazyLoadSlide","addToCache","removeByIndex","indexToRemove","item","find","PhotoSwipeBase","_this$options","numItems","dataSource","_getGalleryDOMElements","gallery","_this$options2","dataSourceItem","isArray","Element","_domElementToItemData","galleryElement","_this$options3","_this$options4","children","childSelector","option","legacySelector","parent","elements","NodeList","from","selector","querySelectorAll","getElementsFromOption","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","_thumbnailEl$getAttri","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","MIN_OPACITY","Opener","isClosed","isOpening","_duration","_useAnimation","_croppedZoom","_animateRootOpacity","_animateBgOpacity","_placeholder","_opacityElement","_cropContainer1","_cropContainer2","_thumbBounds","_prepareOpen","open","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","showAnimationDuration","_options$showHideOpac","showHideAnimationType","showHideOpacity","_initialThumbBounds","getThumbBounds","_animateZoom","bg","opacity","innerRect","overflow","_setClosedStateZoomPan","willChange","Promise","resolve","decoded","isDelaying","img","reject","_initiate","_this$pswp$element","_this$pswp$element2","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","defaultOptions","bgClickAction","tapAction","PhotoSwipe","super","_prepareOptions","_prevViewportSize","isDestroying","hasMouse","_initialItemData","keyboard","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_handlePageResize","_updatePageScrollOffset","goTo","next","prev","_this$currSlide","_this$currSlide2","_itemHolder$slide2","refreshSlideContent","slideIndex","_this$currSlide$index","_this$currSlide3","potentialHolderIndex","_itemHolder$slide3","holder","matchMedia","matches","_this$element2","test","userAgent","setScrollOffset","body","thumbBounds","thumbnail","thumbSelector","imageWidth","imageHeight","thumbAreaRect","getBoundingClientRect","fillZoomLevel","offsetX","offsetY","left","top","getCroppedBoundsByElement","getBoundsByElement","compareDocumentPosition","obj","entries","map","_ref","value","hash","reduce","acc","keyValue","hashToObject","gid","pid","objectToHash","substring","pathname","search","hashParts","targetId","NoRefError","msg","message","entry","current","entryItemRefIsElement","Context","createContext","set","handleClick","isRefRegistered","PhotoSwipeLightboxStub","__rest","s","t","prototype","hasOwnProperty","getOwnPropertySymbols","propertyIsEnumerable","Gallery","plugins","uiElements","galleryUID","onBeforeOpen","onOpen","withCaption","withDownloadButton","contentPortal","setContentPortal","useState","useRef","Map","openWhenReadyPid","useCallback","targetRef","itemIndex","slides","ensureRefPassed","_ref2","_ref3","sortNodes","ref","_a","original","originalSrcset","rest","initialPoint","getInitialActiveSlideIndex","_ref4","slideContent","createPortal","pswpInstance","position","bottom","right","color","textAlign","fontSize","lineHeight","textShadow","caption","uiElement","getHistoryState","hashIncludesNavigationQueryParams","getHashValue","history","pushState","baseUrl","getBaseUrl","currentHash","hashWithoutGidAndPid","getHashWithoutGidAndPid","urlWithoutOpenedSlide","urlWithOpenedSlide","replaceState","baseHash","gidAndPidHash","closeGalleryOnHistoryPopState","back","useEffect","openGalleryBasedOnUrlHash","params","delete","refToOpen","keys","has","openAt","contextValue","useMemo","React","Provider","propTypes","Item","restProps","useContext","refCallback","values","childrenFnProps"],"sourceRoot":""}